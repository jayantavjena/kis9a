└─987 /usr/bin/memcached -u memcached -p 11211 -m 64 -c 1024

大人になってからの人間関係　信頼を深めるための３ステップ
マニピュレーター（潜在的攻撃性パーソナリティ)
503 trouble shutting
HTTP 503とは”Service Unavailable”であり、一時的にサーバーにアクセスできないこと
ターゲットグループのフロントにあるALB がSSL/TLS接続の終端であれば、ターゲットグループは80で受けます。
一方、ターゲットグループのフロントがNLB であれば、ターゲットグループは443 となりますね。

vpc + subnet を作る。

- [Microtone Trainer](https://yuichkun.github.io/quarterToneTrainer/index.html)
x /infrabuilder command line flags self documentation.
x /ev-devops saveAndRun hook to who no vscode user.
x /infra connect with static ip alternative
<https://github.com/caixw/gobuild>
<https://github.com/olebedev/on>
<https://github.com/yaacov/observer>
---

Of course vim have similarly features, but make vim heavy.  
So, I use core feature of vim, other have external.

example:

```
~/.vimrc
if !empty(glob("~/.vimrc.local"))
  source ~/.vimrc.local
endif

~/.local.vimrc
au BufWritePost *.lua,*.conf :!nginx -s reload
au BufWritePost *.js,*.inc :!brew services restart httpd
```

2021-06-18
WebRTC servey
Argora 
one day
10 user x 100 min = 8$
10000 user x 100 min = 800$
User ごとに全ての
Composition
Agora calculates your billing based on the usage of all sessions under each project. The billing for each session equals the total sum of charges for all users in the session.
At the end of each month, Agora adds up the usage duration (in seconds) of audio and video in each category, and divides them by 60 to get the respective service minutes (rounded up to the nearest integer). Then, Agora multiplies the service minutes by the corresponding pricing to get the cost of that month.
Cost = audio charges + video charges = audio pricing × audio service minutes + video pricing × video service minutes
If the user subscribes to multiple audio and video streams at the same time, the total service minutes per stream are not additive. For example:
If User A subscribes to the video streams of both B and C for the same 10 minutes, A uses 10 minutes of video service.
If User A subscribes to the audio stream of B, and video stream of C, both for the same 10 minutes, A also uses 10 minutes of video service.
For more information, see How does Agora calculate service minutes?
① Agora determines video category based on aggregate video resolution, which is the sum of resolutions of all the video streams a user subscribes to at the same time. For details, see Aggregate video resolution.
Once a user joins an RTC channel from apps integrated with the Agora RTC SDK, the user subscribes to the audio and video streams sent by all other users in the channel by default, giving rise to usage and cost. The Agora RTC SDK includes the Agora Voice or Video SDK for native platforms and third-party frameworks.

2021-06-17<!--{{{-->
https://www.nginx.com/resources/wiki/start/topics/examples/full/
lean as nginx + php server structure

o adfadfadsfadsf
o adfadsfadsf
o adsfadsfadsfads
x adsfasdfasdf
r adfadfsdasdfasdf

x clean up todo list.
x clean up memos and separate topics.

- sort out motivation

- fix me.kis9a top page and reset styles.
- start sleep tracking.
- start pay traking.
- saveandrun
  x change to prepend task.
- images list view in me.kis9a.com
- <https://github.com/GavinOB/Sleep_Cycle>

2021-01-12 - yyyy-mm-dd - orange

o (2) #new new task is added - green
o (2) #neww new task is added - green
x #done this task is done - gray
~ stoped this task - gray
r <https://github.com/kis9a/vim-gtd> - inside <> and start <http.\*\>
r <https://github.com/peterlundgren/vim-todo>
m this is memos

- this task is idea - white
- this task is new ideas - white
<!--}}}-->

### 2021-06-02<!--{{{-->

`````<!--{{{-->
package main

import (
 "strings"

 "github.com/gdamore/tcell/v2"
 "github.com/gonuts/commander"
 "github.com/rivo/tview"
)

func makeCmdUpdate() *commander.Command {
 cmdUpdate := func(cmd *commander.Command, args []string) error {
  var err error
  // app := tview.NewApplication()

  // b := tview.NewTextView()
  // b.SetText("textarea(b)")
  // b.SetTitle("title(b)").
  //  SetBorder(true)

  // c := tview.NewTextView()
  // c.SetText("textarea(c)")
  // c.SetTitle("title(c)").
  //  SetTitleAlign(tview.AlignRight).
  //  SetBorder(true)

  // flex := tview.NewFlex().
  //  AddItem(b, 0, 1, false).
  //  AddItem(c, 0, 1, false)

  // if err := app.SetRoot(flex, true).Run(); err != nil {
  //  panic(err)
  // }

  app := tview.NewApplication()
  table := tview.NewTable().
   SetBorders(true)
  lorem := strings.Split("Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.", " ")
  cols, rows := 10, 40
  word := 0
  for r := 0; r < rows; r++ {
   for c := 0; c < cols; c++ {
    color := tcell.ColorWhite
    if c < 1 || r < 1 {
     color = tcell.ColorYellow
    }
    table.SetCell(r, c,
     tview.NewTableCell(lorem[word]).
      SetTextColor(color).
      SetAlign(tview.AlignCenter))
    word = (word + 1) % len(lorem)
   }
  }
  table.Select(0, 0).SetFixed(1, 1).SetDoneFunc(func(key tcell.Key) {
   if key == tcell.KeyEscape {
    app.Stop()
   }
   if key == tcell.KeyEnter {
    table.SetSelectable(true, true)
   }
  }).SetSelectedFunc(func(row int, column int) {
   table.GetCell(row, column).SetTextColor(tcell.ColorRed)
   table.SetSelectable(false, false)
  })
  if err := app.SetRoot(table, true).EnableMouse(true).Run(); err != nil {
   panic(err)
  }

  return err
 }

  | パラメータ | 意味 |
  | ----------- | --------------------------------------------------------------------------------------------------------------------------------- |
  | name | playbook の概要を記述。日本語 OK |
  | remote_user | コントロールノードからターゲットノードにアクセスするユーザーを指定する。Ansible-playbook コマンドを実行するユーザーであれば不要。 |
  | hosts | Inventory ファイルで作成したグループを指定することができる。全てのグループに適用させたいときは all と指定する。 |
  | become | ターゲットノードで root ユーザーになるかどうか。true と指定する。 |

| パラメータ    | 意味                                                                                                                                 |
| ------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
| tasks         | 処理内容は tasks 以下に入れ子で内容を記述する。                                                                                      |
| name(先頭)    | 処理内容の説明を記述(日本語 OK)                                                                                                      |
| yum           | yum モジュール。yum モジュールでの処理内容は以降入れ子で記述する                                                                     |
| yum/name      | yum モジュールでインストールするパッケージ名を指定する。                                                                             |
| yum/state     | yum モジュールでは present では導入,latest なら最新版に更新,adsent なら削除を行う                                                    |
| template      | template モジュール。Jinja2 というテンプレートエンジンでテンプレートファイルを利用してファイルを生成してリモート送信することができる |
| template/src  | テンプレートのパスを指定する。相対パスまたは絶対パス                                                                                 |
| template/dest | 送り先のリモートのファイル名を指定する                                                                                               |

| パラメータ | 意味                                                                                                                              |
| ---------- | --------------------------------------------------------------------------------------------------------------------------------- |
| name       | ※必須項目。ユーザーの名前を指定する。                                                                                             |
| password   | ユーザーのパスワードを設定する。                                                                                                  |
| state      | present:ユーザアカウントを作成する。absent:ユーザアカウントを削除する。デフォルト値は present                                     |
| remove     | "state: absent"と併せて、ホームディレクトリを削除するかどうか指定する。no : 削除しない。yes : 削除する                            |
| home       | ユーザのホームディレクトリを指定する。                                                                                            |
| group      | ユーザーが追加されるグループを指定する。                                                                                          |
| append     | yes:指定されたグループにユーザーを追加。no:指定されたグループにのみ追加され,他のすべてのグループからは削除される。デフォルトは no |
| createhome | ホームディレクトリが存在しない場合に作成する。                                                                                    |
| shell      | ユーザのシェルを指定する                                                                                                          |
| uid        | ユーザー ID を指定                                                                                                                |

| パラメータ    | 意味                                                                                                                       |
| ------------- | -------------------------------------------------------------------------------------------------------------------------- |
| name          | ※必須項目。パッケージ名/URL を指定を指定する。『state=latest』かつ『name=\*』を指定した場合は『yum -y update』を実行する。 |
| state         | present/installed:インストール。latest:最新バージョンがインストール。absent/removed:削除                                   |
| enablerepo    | リポジトリのインストール/更新操作のために有効にするリポジトリを指定する                                                    |
| enable_plugin | インストール/更新操作を有効にするプラグイン名を指定する。                                                                  |

| パラメータ | 意味                                                                                                                              |
| ---------- | --------------------------------------------------------------------------------------------------------------------------------- |
| name       | ※必須項目。サービスの名前を指定する。                                                                                             |
| state      | started: サービスを開始する。stopped: サービスを停止する。restarted: サービスを再起動する。reloaded: サービスを再読み込みする     |
| sleep      | サービスを再起動する場合に、stop と start コマンドの間で指定時間スリープします。 動作の悪い init スクリプトを回避するのに役立つ。 |
| enabled    | 起動時にサービスを自動起動するかどうか。デフォルトは yes。no はしない                                                             |
| arguments  | コマンドラインの追加の引数を指定する。                                                                                            |

| パラメータ | 意味                                                                                                                 |
| ---------- | -------------------------------------------------------------------------------------------------------------------- |
| path       | ※必須項目。ファイルパスを指定する。                                                                                  |
| src        | コントロールノードのファイルパスを指定する(state=link の場合のみ)。source の略。                                     |
| dest       | destination の略。宛先。src を置く送信先であるターゲットノードの絶対パスを指定する。                                 |
| attributes | ファイルまたはディレクトリの属性を指定する。                                                                         |
| group      | ファイル/ディレクトリを所有するグループを指定する。                                                                  |
| mode       | ファイル/ディレクトリに権限を付与する。8 進数の指定(0644 や'644')とシンボリックモード(u=rw,g=r,o=r)での指定が可能。  |
| follow     | 既にファイルが存在する場合置き換えない。(要確認)                                                                     |
| force      | シンボリックリンクを作成する。path ファイルのリンクを解除し、代わりに src でファイルへのシンボリックリンクを作成する |
| recurse    | 再帰的にファイル属性を変更するか(state=directory/state=hard の場合のみ)。。                                          |
| state      | **file**                                                                                                             |

: 既存のファイルを操作する場合に指定する。
**link**
: シンボリックリンクとして指定する。
**directory**
: path に指定されたパス名のディレクトリを作成する。パス名の途中のディレクトリが存在しない場合はサブディレクトリも一緒に作成する。
**hard**
: ハードリンクとして指定する。
**touch**
: path で指定したファイルが存在しない場合、空ファイルを作成する。既にファイルが存在する場合、タイムスタンプが更新される。
**absent**
: ディレクトリやファイル、シンボリックリンクを削除する。 |

| パラメータ     | 意味                                                                                                                                             |
| -------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ |
| dest           | ※必須項目。コピー先のターゲットノードの絶対パス。src がディレクトリの場合、これもディレクトリである必要がある。                                  |
| src            | コピー元を指定する。                                                                                                                             |
| attributes     | ファイルの属性を指定する。                                                                                                                       |
| backup         | yes の場合、上書きされるファイルのバックアップを作成する。バックアップはコピー先のファイルが存在するディレクトリと同じディレクトリに作成される。 |
| content        | src の代わりに使用するとコピー先ファイルに記述する内容を指定する。                                                                               |
| decrypt        | 暗号化されたファイルを復号化する。デフォルトは yes                                                                                               |
| directory_mode | ディレクトリのパーミッションを指定する                                                                                                           |
| follow         | yes の場合、dest で指定した内容に従うことを示す。既にファイルが存在する場合置き換えない。(要確認)デフォルトは no                                 |
| force          | yes を指定すれば、コピー先に既にファイルが存在する場合、ファイルの中身を比較して差分がある場合はコピーを実施する。                               |
| group          | グループ名を指定する。                                                                                                                           |
| mode           | chmod コマンドで設定できる権限設定                                                                                                               |
| owner          | chown コマンドで設定できる所有者ユーザの設定。                                                                                                   |
| validate       | 所定の位置にコピーする前に実行する検証コマンド。検証するファイルへのパスは、「％s」を介して渡されます。shell は利用できない。                    |
| remote_src     | ターゲットノード内でのファイルコピー yes/no で指定する。src/dest のパスはターゲットノードになる                                                  |

| パラメータ       | 意味                                                                                                       |
| ---------------- | ---------------------------------------------------------------------------------------------------------- |
| dest             | コピー先の絶対パスの指定。                                                                                 |
| src              | ローカルにある Jinja2 テンプレートのパス。絶対パス、相対パスでの指定が可能。                               |
| group            | chown コマンドで設定できる所有者グループの設定。                                                           |
| mode             | chmod コマンドで設定できる権限設定。8 進数の指定とシンボリックモードでの指定が可能。                       |
| owner            | chown コマンドで設定できる所有者ユーザの設定。                                                             |
| validate         | コピー前に実行される検証コマンド。検証するファイルのパスは『%s』で指定することが可能。                     |
| force            | ・yes ⇒ dest の内容と、内容が異なればファイルを置換。・no ⇒ ファイルは宛先が存在しない場合にのみ転送される |
| newline_sequence | ファイルのテンプレートに使用する改行シーケンスを指定する。デフォルトは\ n                                  |

<!--}}}-->

- [Please Wait... | Cloudflare](https://linuxize.com/post/how-to-install-go-on-centos-7/)
- read miniapp local env <https://evolany.larksuite.com/docs/docusLE2ZorIU0PaP9leYg9xoEd>
- read db:rdbms, sql <https://evolany.larksuite.com/docs/docusveOLTtbCoWk682cKQui3eb#fvPvyy>
- <https://evolany.larksuite.com/sheets/shtusDee9dRQZATrbTYPzZsugfc>
- maintain <https://evolany.larksuite.com/docs/docusXxPFXCosMC5lt9ZJODphIg#>
- payment <https://evolany.larksuite.com/docs/docusWQjhMPhBXCCyExYoTGgnYe>
<!--}}}-->

### 2021-06-03<!--{{{-->

- [x] infrabuilder connect commmand
- [x] infrabuilder ui command - infomation list, search view, when enter trans to form.

標準入力・標準出力
標準入力・標準出力とは実はこの暗黙の入力・出力のことを指します。
コマンド/アプリ側で入力元・出力先を明示することなく使用できる入力・出力のことです。
これにはもう少し深い意味が含まれていることに注意する必要があります。それは、次のようなコマンド/アプリ開発者と使用者との間の約束事です。

- アプリ側では、標準入力・標準出力が暗黙の入力・出力として使えることを前提として良い。
- 標準入力・標準出力がどんなファイルに結び付けられているか、アプリ側で意識する必要はない。それはアプリ実行者が良いように用意しているはずだ。
- アプリ実行者には、そのアプリがどのように標準入力・標準出力を使うかを意識して、事前に適切な入力元・出力先を用意する義務がある。

- 入力・出力とはファイルに対して読み書きする経路のこと
- 暗黙のうちに使用できる入力・出力として、標準で 3 種、標準入力・標準出力・標準エラーが用意されている
  au BufWritePost \*.go silent! :!bash -c "(cd ./infra/cmd; go build .)"

au BufWritePost \*.go silent! :!bash -c "(cd ./infra/cmd; go build .)"

````<!--{{{-->
package main

import (
 "fmt"
 "log"
 "strings"

 "github.com/gdamore/tcell/v2"
 "github.com/gonuts/commander"
 "github.com/gonuts/flag"
 "github.com/rivo/tview"
)

func makeCmdUI() *commander.Command {
 flg := *flag.NewFlagSet("force", flag.ExitOnError)
 app := tview.NewApplication()
 table := tview.NewTable().SetBorders(true)
 var searchInput *tview.InputField
 var footer *tview.TextView
 items, err := getEnvItems()
 if err != nil {
  log.Fatal(err)
 }

 getVarByName := func(vars []Variable, name string) Variable {
  var v Variable
  for _, v = range vars {
   if v.Name == name {
    return v
   }
  }
  return v
 }

 setCell := func(table *tview.Table, row int, column int, value string) {
  align := tview.AlignCenter
  color := tcell.ColorWhite
  if row == 0 {
   color = tcell.ColorRed
  }
  cell := tview.NewTableCell(value).SetAlign(align).SetTextColor(color).SetSelectable(row != 0)
  table.SetCell(row, column, cell)
 }

 drawNewTable := func(selected EnvItem) {
  app := tview.NewApplication()
  form := tview.NewForm().
   AddDropDown("Title", []string{"Mr.", "Ms.", "Mrs.", "Dr.", "Prof."}, 0, nil).
   AddInputField("First name", "", 20, nil, nil).
   AddInputField("Last name", "", 20, nil, nil).
   AddCheckbox("Age 18+", false, nil).
   AddPasswordField("Password", "", 10, '*', nil).
   AddButton("Save", nil).
   AddButton("Quit", func() {
    app.Stop()
   })
  form.SetBorder(true).SetTitle("Enter some data").SetTitleAlign(tview.AlignLeft)
  if err := app.SetRoot(form, true).EnableMouse(true).Run(); err != nil {
   panic(err)
  }
 }

 getSearched := func(str string) []EnvItem {
  var res []EnvItem
  for _, v := range items {
   if v.Name == str {
    res = append(res, v)
   }
  }
  return res
 }

 setInfoTable := func(items []EnvItem) error {
  var err error
  setCell(table, 0, 0, "Env name")
  setCell(table, 0, 1, "Domain")
  setCell(table, 0, 2, "AP count")
  setCell(table, 0, 3, "DB count")
  setCell(table, 0, 4, "DB slave count")
  setCell(table, 0, 5, "Cost")
  for i, v := range items {
   i = i + 1
   setCell(table, i, 0, v.Name)
   setCell(table, i, 1, strings.Join([]string{v.Name, ".*"}, ""))
   apc := getVarByName(v.Vars, "ap_instance_count")
   setCell(table, i, 2, fmt.Sprint(apc.Default))
   setCell(table, i, 3, fmt.Sprint("db"))
   setCell(table, i, 4, fmt.Sprint("db_slave"))
   setCell(table, i, 5, fmt.Sprint(v.Cost))
  }
  table.SetFixed(1, 1).SetDoneFunc(func(key tcell.Key) {
   if key == tcell.KeyCtrlC || key == tcell.KeyEscape {
    app.Stop()
   }
   if key == tcell.KeyEnter {
    table.SetSelectable(true, false)
   }
  }).SetSelectedFunc(func(row int, column int) {
   table.GetCell(row, column).SetTextColor(tcell.ColorRed).SetAlign(tview.AlignCenter)
   table.SetSelectable(false, false)
   row -= 1
   selected := items[row]
   table.Clear()
   drawNewTable(selected)
  })
  return err
 }

 searchInput = tview.NewInputField().
  SetLabel("search env:  ").SetDoneFunc(func(key tcell.Key) {
  text := searchInput.GetText()
  item := getSearched(text)
  setInfoTable(item)
 })
 setFooter := func(msg string) {
  footer = tview.NewTextView().SetText(msg)
 }

 cmdUI := func(cmd *commander.Command, args []string) error {
  var err error
  err = setInfoTable(items)
  if err != nil {
   log.Fatal(err)
  }
  flex := tview.NewFlex()
  setFooter("SELECT: Enter / EXIT: Escape or Ctrl+C")
  flex.SetDirection(tview.FlexRow).AddItem(table, 0, 1, true).AddItem(searchInput, 2, 0, false).AddItem(footer, 1, 0, false)
  if err := app.SetRoot(flex, true).EnableMouse(true).Run(); err != nil {
   log.Fatal(err)
  }
  return err
 }

 return &commander.Command{
  Run:       cmdUI,
  UsageLine: "ui",
  Short:     "ui",
  Flag:      flg,
 }
}

// flex := tview.NewFlex()
// flex.SetDirection(tview.FlexRow). // 各ウィジェットを縦に配置する設定
//  AddItem(widget1, 3, 0, true). // widget1は常に3行固定で表示する
//  AddItem(widget2, 0, 1, false). // widget2は残りの領域の1/3で表示する
//  AddItem(widget3, 0, 2, false) // widget3は残りの領域の2/3で表示する

// grid := tview.NewGrid()
// grid.SetSize(5, 5, 0, 0). // 表示領域を縦横それぞれを5等分し、5x5のグリッドを作る
//  AddItem(widget4, 0, 0, 1, 1, 0, 0, true). //(0,0)から(1,1)にwidget4を表示する
//  AddItem(widget5, 1, 1, 2, 2, 0, 0, true). //(1,1)から(3,3)にwidget5を表示する
//  AddItem(widget6, 3, 3, 2, 2, 0, 0, true) //(3,3)から(5,5)にwidget6を表示する

// page := tview.NewPages()
// page.AddPage("page1", flex, true, true). // flexをpageに追加し、表示する
//  AddPage("page2", grid, true, false) // gridをpageに追加するが、表示させない

```<!--}}}-->
`````

<!--}}}-->

### 2021-06-04<!--{{{-->

- [x] /infrabuilder terraform module clean up and fix.
- [x] ~~/infrabuilder create draft server and setup with ansible.~~ -> don't need ansible
- [x] /infrabuilder verification works in draft server.
- [x] /infrabuilder cmd apply with s3, dns new add.
- [x] /infrabuilder command dispatching and localize.
- [x] /infrabuilder register public ip4v address to elastic ip and ssh with hostname
- [x] /infrabuilder golang uniq file string and write function.
- [x] /kis9a build images index function.
- [x] /dotfiles if exists local configure file then load file vim.
- [x] /infrabuilder understand nat gateway and check management console exsist proj.
- [x] watch golang code static analytics <https://www.youtube.com/watch?v=IPLmqfJphBM>

- ステージング環境とはシステム開発工程の一つで、本番環境と同様の状態でシステムの動作や不具合のチェックを行う段階のことです。 開発環境で開発を進め、テスト環境、ステージング環境で問題がなければ、本番環境へとデプロイ（移行）します。

ec2 instance に 紐付けるために terraform の eip リソースのドキュメントを読んでいたが、
aws_eip_association が ec2 に関連する elastic ip の設定リソースなのか、

- linux infra 基本知識
- Task queue server
- TSDB server
- Others : Push/messaging/email/broadcasting servers...
- <https://github.com/cipepser/goNLP100knock2015>
- read [図解『実践 Terraform』 - Qiita](https://qiita.com/ayatothos/items/27024e8168a8b766bcd3)
- [GitHub - tmknom/example-pragmatic-terraform-on-aws: 技術書典 6 で頒布した『Pragmatic Terraform on AWS 』のサンプルコードを公開しています](https://github.com/tmknom/example-pragmatic-terraform-on-aws)

- [yappie 比較](https://evolany.larksuite.com/sheets/shtus7i2aPxZsgwZMPTJQZzmyKg)
- SSH : 22 (リモートログイン)
- SMTP : 25 (メール送受信)
- DNS : 53 (ドメイン名解析)目標の因数分解
<!--}}}-->

### 2021-06-05<!--{{{-->

- [x] awesome-aws-services/ fix navigation.
- [x] ~~Apply biz confort.~~ -> more consider to less dependency.
- [x] kis9a/ mmeos buliding AST markdown golang. -> AST is over to generate toc. go script read and create idea.
- [x] devops github actions schedule. and awesome-aws-services update.
- [x] centos dotfiles
- [x] ~~/kis9a hyperapp rooting best practice.~~ -> need to configure to server side to ignore child path. it's not beautiful.
- [x] /kis9a images json data generate script.
- [x] live reload golang.
      <https://github.com/qrtz/livedev> - Livedv uses a deceptively simple protocol to enable live reload.
      It injects a small inline javascript into HTML pages at the end of the document right before the closing body tag.
      The script opens a websocket connection and reloads the page once the connection is closed.
      Live reload events are as follow.
      <https://github.com/cosmtrek/air> - this is check change with fs-notify pkg and beautiful logger and serve update.
      -> [x] fs-notify <https://github.com/fsnotify/fsnotify>
      [x] fs-notify filepath.Walk and watcher add direactry childrens
- [x] static server witch golang. net package.
- [ ] read [Modern Web Development on the JAMstack を読んでまとめた - console.lealog();](https://lealog.hateblo.jp/entry/2020/09/30/163242)
- [Go 言語の標準パッケージだけで画像処理をする その１ （入出力） - Qiita](https://qiita.com/ikeponsu/items/808a83d2f3bcf3ad95f3)
- diff images <https://github.com/murooka/go-diff-image#example>
- [x] how to introducing GO your Organize <https://wayne.cloud/introduce-go/>
- [x] export path /kis9a bin/executable_file
<!--}}}-->

### 2021-06-06<!--{{{-->

remove image background in golang.

- [x] /kis9a image convert with golang.
- [x] /kis9a image resize with golang.
- [x] /kis9a golang minify initialized.
- [x] try go pdf
- [x] tview golang tui form
- <https://github.com/kasperisager>
- [x] write string to file without duplicate line bash. use uniq.
- [x] go-minify html, css, javascript, ~~whitespace.<https://github.com/luncheon/typescript-build-tools-comparison.git>~~
- [x] ~~me.kis9a.com deployment s3 and cloudformation~~
- [x] /infrabuilder terraform lifecycle.

- <http://paulgraham.com/>
- <https://news.ycombinator.com/>
- <https://woodgears.ca/dust/air_cleaner.html>
- <https://pdfcpu.io/>

- [x] /kis9a bin minify javascript golang
- [x] /kis9a bin minify css golang
- [x] /kis9a bin minify html golang
- [x] /kis9a bin minify json golang
- [x] /kis9a bin specific file build in golang. -> copyFile function.
- [x] /kis9a bin when web path contain in pages/ custom output path to serve.
- [x] /kis9a bin server function minify diff what on write

panic

```go
func createDirIfNotExist(path string) error {
 var err error
 baseDir := filepath.Dir(path)
 if !isExistPath(baseDir) {
  if err = os.Mkdir(baseDir, 755); err != nil {
   createDirIfNotExist(baseDir)
  }
 }
 return nil
}
```

- read [Don't defer Close() on writable files – joe shaw](https://www.joeshaw.org/dont-defer-close-on-writable-files/)
<!--}}}-->

### 2021-06-07<!--{{{-->

- [x] /infrabuilder database の永続化について
- [x] /etc/hosts について
- [x] /infrabuilder remove side party commander, flag pkg and scratch.

npm install -g mysql
npm install -g memcached #will be removed
npm install -g node-sass
npm install -g pm2
npm install -g socket.io
npm install -g socket.io-client
npm install -g shelljs
npm install -g aws-sdk
npm install -g nodemailer #for staging only
npm install -g ioredis
npm install -g cheerio async
npm install -g fast-xml-parser
npm install -g googleapis

<!--}}}-->

## Minification<!--{{{-->

- takes about 15 second.
- static contents bundle size is become to half.
- use in staging environment and production environment.
- don't use in development? because hard to debug, but can't check minify work in development.
- minify JS,CSS,HTML,XML,SVG,JSON <https://github.com/tdewolff/minify>
- on file change minify, watch with <https://github.com/fsnotify/fsnotify>
- finally this minifier is distribution as binary.
- minify image use <https://github.com/marketplace/imgbot>
- javascript minify is not working and find some bugs.
- try minify cli -w watch flags. and -b bundle.
- try javascript bundle with esbuild.
- [x] read esbuild documentation and getting start.
      This loader is enabled by default for .js, .cjs, and .mjs files. The .cjs extension is used by node for CommonJS modules and the .mjs extension is used by node for ECMAScript modules, although esbuild doesn't make a distinction between the two.
      All modern JavaScript syntax is supported by esbuild. Newer syntax may not be supported by older browsers, however, so you may want to configure the target option to tell esbuild to convert newer syntax to older syntax as appropriate.
      These syntax features are always transformed for older browsers:

topic: causality of CVR and website speed.

## Suggestion

- Use LightHouse to check frontend preformance.
- introduce script to minify static content in staging and production environment.
- introduce ImgBot in github or script to minify images in .

```production
|- devwebroot/ js,css,html...
  ⬇ minify              ⬇ minify on file change.
|- webroot/ js,css,html...
```

command-line:

.cmd minify <- minify devwebroot/\* -> webroot/\*
.cmd server <- watch devwebroot change. with fsnotify when develop in production env.

⬇ cross compile

./binary

- first create command and test in local.
- minimal project use this commands.
<!--}}}-->

### 2021-06-08<!--{{{-->

- [x] re search javascript bundle.
- [x] try minify html in javascript
- [x] minify cli install for mac : brew install tdewolff/tap/minify
- [x] try minify cli -w watch flags. and -b bundle.

以下、キャッチアップ JavaScript ビルドより引用。

モジュール管理（依存性解決）
テンプレート管理
UT/操作テスト
構文チェック
圧縮/難読化
CSS プリプロセッサー
ES2015 コンパイル
altJS コンパイル

- [x] esbuild research github repositories.
- [GitHub - egoist/maho: Experimental framework for building server-rendered or static websites, powered by React and esbuild, hella fast.](https://github.com/egoist/maho)
- [GitHub - osdevisnot/sorvor: extremely fast, zero config server for modern web applications.](https://github.com/osdevisnot/sorvor)
- [GitHub - esbuild/esbuild.github.io](https://github.com/esbuild/esbuild.github.io)
- [esbuild service](https://esbuild.vercel.app/)
- [How to deploy SPA as a static website using AWS S3 - DEV Community](https://dev.to/alexeyromanchenko/how-to-deploy-spa-as-a-static-website-using-aws-s3-1adg)
- [GitHub - egoist/docute: 📚 Effortless documentation, done right.](httops://github.com/egoist/docute)
- [Golang Development | TutorialEdge.net](https://tutorialedge.net/golang/)

- ~~goenv init and go vrsion modify to go1.15.5~~ -> <https://zenn.dev/nobonobo/articles/e0af4e8afc6c38b42ae>
  Go に?:がない理由は、言語の設計者が、操作が頻繁に使用されて不可解な複雑な式を作成するのを見ていたためです。 if-else 形式は、長くなりますが、間違いなく明確です。 言語に必要な条件制御フロー構造は 1 つだけです。
- [「トランザクション張っておけば大丈夫」と思ってませんか？ バグの温床になる、よくある実装パターン](https://zenn.dev/tockn/articles/4268398c8ec9a9)
  <https://qiita.com/unokun/items/dcf3ed4fbc4f532f664a>

- Public DNS のアドレスではなく、独自ドメインでアクセスできるようにするには固定グローバル
  IP アドレスの付与と DNS サーバーの設定が必要になります。

!--}}}-->

<!--{{{-->nslookup

```
< ~/kis9a +master > nslookup nav.kis9a.com
Server:         2400:4051:a00:fe00:2ae9:8eff:fe82:a46c
Address:        2400:4051:a00:fe00:2ae9:8eff:fe82:a46c#53

Non-authoritative answer:
Name:   nav.kis9a.com
Address: 151.101.65.195
Name:   nav.kis9a.com
Address: 151.101.1.195

```

<!--}}}-->

<!--{{{-->hugo

cloud.google.com/go/storage="v1.10.0"
cloud.google.com/go="v0.81.0"
github.com/Azure/azure-pipeline-go="v0.2.2"
github.com/Azure/azure-storage-blob-go="v0.9.0"
github.com/BurntSushi/locker="v0.0.0-20171006230638-a6e239ea1c69"
github.com/BurntSushi/toml="v0.3.1"
github.com/PuerkitoBio/purell="v1.1.1"
github.com/PuerkitoBio/urlesc="v0.0.0-20170810143723-de5bf2ad4578"
github.com/alecthomas/chroma="v0.9.1"
github.com/armon/go-radix="v1.0.0"
github.com/aws/aws-sdk-go="v1.38.23"
github.com/bep/debounce="v1.2.0"
github.com/bep/gitmap="v1.1.2"
github.com/bep/godartsass="v0.12.0"
github.com/bep/gowebp="v0.1.0"
github.com/bep/tmc="v0.5.1"
github.com/cli/safeexec="v1.0.0"
github.com/cpuguy83/go-md2man/v2="v2.0.0"
github.com/danwakefield/fnmatch="v0.0.0-20160403171240-cbb64ac3d964"
github.com/disintegration/gift="v1.2.1"
github.com/dlclark/regexp2="v1.4.0"
github.com/dustin/go-humanize="v1.0.0"
github.com/evanw/esbuild="v0.11.16"
github.com/fsnotify/fsnotify="v1.4.9"
github.com/getkin/kin-openapi="v0.61.0"
github.com/ghodss/yaml="v1.0.0"
github.com/go-openapi/jsonpointer="v0.19.5"
github.com/go-openapi/swag="v0.19.5"
github.com/gobuffalo/flect="v0.2.2"
github.com/gobwas/glob="v0.2.3"
github.com/gohugoio/go-i18n/v2="v2.1.3-0.20210430103248-4c28c89f8013"
github.com/golang/groupcache="v0.0.0-20200121045136-8c9f03a8e57e"
github.com/golang/protobuf="v1.5.2"
github.com/google/go-cmp="v0.5.5"
github.com/google/uuid="v1.1.2"
github.com/google/wire="v0.4.0"
github.com/googleapis/gax-go/v2="v2.0.5"
github.com/googleapis/gax-go="v2.0.2+incompatible"
github.com/gorilla/websocket="v1.4.2"
github.com/hashicorp/hcl="v1.0.0"
github.com/jdkato/prose="v1.2.1"
github.com/jmespath/go-jmespath="v0.4.0"
github.com/kyokomi/emoji/v2="v2.2.8"
github.com/magiconair/properties="v1.8.1"
github.com/mailru/easyjson="v0.0.0-20190626092158-b2ccc519800e"
github.com/mattn/go-ieproxy="v0.0.1"
github.com/mattn/go-isatty="v0.0.12"
github.com/mattn/go-runewidth="v0.0.9"
github.com/miekg/mmark="v1.3.6"
github.com/mitchellh/hashstructure="v1.0.0"
github.com/mitchellh/mapstructure="v1.3.3"
github.com/muesli/smartcrop="v0.3.0"
github.com/niklasfasching/go-org="v1.5.0"
github.com/olekukonko/tablewriter="v0.0.5"
github.com/pelletier/go-toml="v1.9.0"
github.com/pkg/errors="v0.9.1"
github.com/rogpeppe/go-internal="v1.8.0"
github.com/russross/blackfriday/v2="v2.0.1"
github.com/russross/blackfriday="v1.5.3-0.20200218234912-41c5fccfd6f6"
github.com/rwcarlsen/goexif="v0.0.0-20190401172101-9e8deecbddbd"
github.com/sanity-io/litter="v1.5.0"
github.com/shurcooL/sanitized_anchor_name="v1.0.0"
github.com/spf13/afero="v1.6.0"
github.com/spf13/cast="v1.3.1"
github.com/spf13/cobra="v1.1.3"
github.com/spf13/fsync="v0.9.0"
github.com/spf13/jwalterweatherman="v1.1.0"
github.com/spf13/pflag="v1.0.5"
github.com/spf13/viper="v1.7.1"
github.com/subosito/gotenv="v1.2.0"
github.com/tdewolff/minify/v2="v2.9.16"
github.com/tdewolff/parse/v2="v2.5.14"
github.com/yuin/goldmark-highlighting="v0.0.0-20200307114337-60d527fdb691"
github.com/yuin/goldmark="v1.3.5"
go.opencensus.io="v0.23.0"
gocloud.dev="v0.20.0"
golang.org/x/image="v0.0.0-20210220032944-ac19c3e999fb"
golang.org/x/net="v0.0.0-20210316092652-d523dce5a7f4"
golang.org/x/oauth2="v0.0.0-20210413134643-5e61552d6c78"
golang.org/x/sync="v0.0.0-20210220032951-036812b2e83c"
golang.org/x/sys="v0.0.0-20210412220455-f1c623a9e750"
golang.org/x/text="v0.3.6"
golang.org/x/xerrors="v0.0.0-20200804184101-5ec99f83aff1"
google.golang.org/api="v0.45.0"
google.golang.org/genproto="v0.0.0-20210413151531-c14fb6ef47c3"
google.golang.org/grpc="v1.37.0"
google.golang.org/protobuf="v1.26.0"
gopkg.in/ini.v1="v1.51.1"
gopkg.in/yaml.v2="v2.4.0"

<!--}}}-->

parallel \* concurrent{{{

並行処理は 1 人がその場の判断で沢山の仕事をこなす事
並列処理は複数人が仕事を同時にこなす事

Concurrent（並行）は「複数の動作が、論理的に、順不同もしくは同時に起こりうる」こと
Parallel（並列）は、「複数の動作が、物理的に、同時に起こること」

- [ゴルーチンと並行性パターン - Qiita](https://qiita.com/hayajo/items/4cd75f87e35e60ae11a9)

- [Leetcode](https://1kohei1.com/leetcode/)
  = スタンフォードでは、SCPD(Stanford Center For Professional Development)
- [Meetup - We are what we do](https://www.meetup.com/)
- [【エンジニアリング組織論への招待】を 10~15 分で読めるように 1 万文字程度でまとめてみた - Qiita](https://qiita.com/kamesennin/items/89d479112554a6f9d038)
- [GO 《ゴー》 │ タクシーが呼べるアプリ GO 《ゴー》 │ 株式会社 Mobility Technologies（MoT）](https://go.mo-t.com/)
  デザインパターンを濫用するのではなくリファクタリングの道しるべとして使うようになったという。
- [GitHub - po3rin/post: This repository manages my texh blog posts.](https://github.com/po3rin/post)
<!--}}}-->

<!--{{{-->tview exsist

```
package main

import (
 "fmt"
 "log"
 "strings"

 "github.com/gdamore/tcell/v2"
 "github.com/rivo/tview"
)

func cmdUI(envName string, options CmdUI) error {
 var err error
 app := tview.NewApplication()
 table := tview.NewTable().SetBorders(true)
 var searchInput *tview.InputField
 var footer *tview.TextView
 items, err := getEnvItems()
 if err != nil {
  log.Fatal(err)
 }
 var backstr []string

 setCell := func(table *tview.Table, row int, column int, value string) {
  align := tview.AlignCenter
  color := tcell.ColorWhite
  if row == 0 {
   color = tcell.ColorRed
  }
  cell := tview.NewTableCell(value).SetAlign(align).SetTextColor(color).SetSelectable(row != 0)
  table.SetCell(row, column, cell)
 }

 drawNewTable := func(selected EnvItem) {
  app := tview.NewApplication()
  form := tview.NewForm().
   AddDropDown("Title", []string{"Mr.", "Ms.", "Mrs.", "Dr.", "Prof."}, 0, nil).
   AddInputField("First name", "", 20, nil, nil).
   AddInputField("Last name", "", 20, nil, nil).
   AddCheckbox("Age 18+", false, nil).
   AddPasswordField("Password", "", 10, '*', nil).
   AddButton("Save", nil).
   AddButton("Quit", func() {
    app.Stop()
   })
  form.SetBorder(true).SetTitle("Enter some data").SetTitleAlign(tview.AlignLeft)
  if err := app.SetRoot(form, true).EnableMouse(true).Run(); err != nil {
   panic(err)
  }
 }

 getSearched := func(str string) []EnvItem {
  var res []EnvItem
  for _, v := range items {
   if v.Name == str {
    res = append(res, v)
   }
  }
  return res
 }

 setInfoTable := func(items []EnvItem) error {
  var err error
  setCell(table, 0, 0, "Env name")
  setCell(table, 0, 1, "Domain")
  setCell(table, 0, 2, "AP count")
  setCell(table, 0, 3, "DB count")
  setCell(table, 0, 4, "DB slave count")
  setCell(table, 0, 5, "Cost")
  for i, v := range items {
   i = i + 1
   setCell(table, i, 0, v.Name)
   setCell(table, i, 1, strings.Join([]string{v.Name, ".*"}, ""))
   apc := getVarByName(v.Vars, "ap_instance_count")
   setCell(table, i, 2, fmt.Sprint(apc.Default))
   setCell(table, i, 3, fmt.Sprint("db"))
   setCell(table, i, 4, fmt.Sprint("db_slave"))
   setCell(table, i, 5, fmt.Sprint(v.Cost))
  }
  table.SetFixed(1, 1).SetDoneFunc(func(key tcell.Key) {
   if key == tcell.KeyCtrlC {
    app.Stop()
   }
   if key == tcell.KeyEscape {
    app.Stop()
   }
   if key == tcell.KeyEnter {
    table.SetSelectable(true, false)
   }
  }).SetSelectedFunc(func(row int, column int) {
   table.GetCell(row, column).SetTextColor(tcell.ColorRed).SetAlign(tview.AlignCenter)
   table.SetSelectable(false, false)
   row -= 1
   selected := items[row]
   table.Clear()
   drawNewTable(selected)
  })
  return err
 }

 searchInput = tview.NewInputField().
  SetLabel("search env:  ").SetDoneFunc(func(key tcell.Key) {
  text := searchInput.GetText()
  item := getSearched(text)
  setInfoTable(item)
  backstr = append(backstr, text)
 })
 setFooter := func(msg string) {
  footer = tview.NewTextView().SetText(msg)
 }
 err = setInfoTable(items)
 if err != nil {
  log.Fatal(err)
 }
 flex := tview.NewFlex()
 setFooter("SELECT: Enter / EXIT: Escape or Ctrl+C")
 flex.SetDirection(tview.FlexRow).AddItem(table, 0, 1, true).AddItem(footer, 1, 0, false)
 if err := app.SetRoot(flex, true).EnableMouse(true).Run(); err != nil {
  log.Fatal(err)
 }
 fmt.Println(backstr)
 return err
}
```

<!--}}}-->

Operators and punctuation<!--{{{-->

```

+ & += &= && == != ( )
- | -= |= || < <= [ ]
* ^ *= ^= <- > >= { }
/ << /= <<= ++ = := , ;
% >> %= >>= -- ! ... . :
&^ &^=
```

<!--}}}-->

### 2021-06-09<!--{{{-->

vim plugin fzf go structure

- [x] cheome console how to get 転送量
- [x] /saveandrun repository initialized.
- [x] /saveandrun conf json structure schemed.
- [x] /saveandrun check multiple watcher and logging local.
- [x] /saveandrun how to separat watch envnt each environment.
- [x] /saveandrun watcher add conf file to without restart server.
- [x] 組織論に関して調べる。
- [【2021 年版】GitHub × Go 製ツールのリリースフロー](https://zenn.dev/kyoh86/articles/5e7fe8c16a39aa3d3796)
- [GitHub - po3rin/gofmtmd: gofmtmd formats go source code block in Markdown. detects fenced code &amp; formats code using gofmt.](https://github.com/po3rin/gofmtmd)

- 既存の問題を解決すべき
  Use back-ticks instead of double-quotes for your string literals. Back-slashes inside double-quotes start escape sequences, which you don't need/want for this use case. Additionally, how did you expect this to work?
  "<a href="$0">$0</a>"
  aa

[.\{-}\]
<.\{-}\>>
[2]
^.\{-},

<<<hoge>>>

- [GitHub - mvdan/xurls: Extract urls from text](https://github.com/mvdan/xurls)
- [fsnotifydeep/fsnotifydeep.go at master · traherom/fsnotifydeep · GitHub](https://github.com/traherom/fsnotifydeep/blob/master/fsnotifydeep.go)
- [RegEX Cheat Sheet & Quick Reference](https://quickref.me/regex)
- [x] vim syntax gtd initialized.
- [x] (2) #vim-gtd match first status and action match regex. #adadf
      "}}}

regex<!--{{{-->
r asdfadf

apple/ asdfasdf

# STATUS

o todo - natural white
x done - natural gray

# ACTION

r read - orange
m memo

# 2021-06-09

- this task is idea - white
- this task is new ideas - white
  o #new new task is added - green
  o #neww new task is added - green
  x #done this task is done - gray
  ~ stoped this task - gray
  r <https://github.com/kis9a/vim-gtd> - inside <> and start <http.\*\>
  m this is memos

this is memos

(2) - task time white

# tag - purple

# tags - max string length is 15.

2021-01-12

600000 "My Star"
{
RA 24.406489
Dec -9.404052
SpectralType "Q"
Mass 1.09 SpectralType
AbsMag 1.29
Distance 124.729260
}

<!--}}}-->

<!--{{{-->

I have to build pages/\*.js -> dist/\*.js
I have to build pages/\*.scss -> dist/\*.css

m <https://github.com/vomnes/matcha> <- fullstuck app golang
m <https://github.com/Away0x/goweibo> <- beautiful directory structure

change highlight by filetype -> add syntax highlight \d{2}.md -> syntax/markdown.vim

- checkout esbuild import .css
- checkout esbuild import .html
- esbuild css bundle issue <https://github.com/evanw/esbuild/issues/20>
- html start point for bundl issue <https://github.com/evanw/esbuild/issues/31>

I feel like you took 5,000 words to say nothing.

Ask HN: Why All the Hate for NPM?

- Large dependency trees
- 100's of Mb of code for hello world react projects
- Software reuse (maybe too much)
- Bundling source with the package (good for verification)
- Easy to contribute to the ecosystem
- Fast resolution of modules

<https://stackoverflow.com/questions/43816039/html-partials-in-golang>

esbuild unused javascript function.

scheme kis9a building.

layouts/
\- default.html :⬇ ogp.html ... [ ] check load template interpretation
\- ogp.html :when

x /saveAndRun hook conf structure change
dir [ ]string -> path string because [], cmd []string -> string

<!--}}}-->

go reflect<!--{{{-->
var m map[string]int
fmt.Println(reflect.TypeOf(m).Elem())
// output: int

<!--}}}-->

cmd-history<!--{{{-->
cp -pf dev1.bonp.me.conf manhour.bonp.me.conf
vim manhour.bonp.me.conf
service nginx restart
./update_anybot_gmail.sh

cd manhour/

chmod -R 1777 tmp
vim /etc/nginx/nginx.conf
vim /etc/nginx/conf.d/manhour.bonp.me.conf
service nginx restart
systemctl status nginx.service
vim /etc/nginx/conf.d/manhour.bonp.me.conf
systemctl status nginx.service
vim /etc/nginx/conf.d/manhour.bonp.me.conf
systemctl status nginx.service
vim /etc/nginx/nginx.conf
service nginx restart
exit
cd html/manhour/
git pull
service php-fpm
service php-fpm status
service nginx status
tail -f php_error.log
tail -f /tmp/php_error.log

<!--}}}-->

<!--{{{-->

imgix <https://qiita.com/mi-1109/items/df493afb513c71a89b8a>
<https://gtmetrix.com/>

<https://developers.google.com/speed/pagespeed/insights/>

CGI は、ユーザーから要求がある度に、プロセスの生成と破棄を行います。
FastCGI は、初回リクエスト時に起動したプロセスをメモリ上へ保持を行い、次回リクエストに対してはそのメモリに保持したプロセスの実行を行います。

sudo service nginx restart
systemctl reload nginx

collect tf-notify wrapper functions.
image walker with server.

layout

- index.html
- css
- [x] test loading javascript as directory name / index.js for component folding -> ok!
- [x] is possible esbuild bunldling path import root setting ? -> esbuild

現在私のサイトを AWS S3 + CloudFront + Route53 で HTTP/2 に対応するよう作業を行なっています。
完了したらこの記事に追記するか、別記事としてまとめようと考えています。
FWIW esbuild should now support NODE_PATH.

<!--}}}-->

### 2021-06-13<!--{{{-->

- [x] vim toggle terminal adjustments -> idea from merucari go vim live.

```
  if matchRegexp != nil && !matchRegexp.MatchString(path) {
    return nil
  }
```

<https://github.com/ivpusic/reruns>

<!--}}}-->

<!--{{{-->

````
var envSchemes = map[string]*regexp.Regexp{
 "windows": regexp.MustCompile("%([a-zA-Z0-9]+)%"),
 "linux":   regexp.MustCompile("[$]([a-zA-Z0-9]+)"),
 "darwin":  regexp.MustCompile("[$]([a-zA-Z0-9]+)"),
}

func convertAbsolute(path string) (string, error) {

 // if the path contains an environment variable at its beginning
 // then replace that with its value
 reg, ok := envSchemes[runtime.GOOS]
 if ok && reg.MatchString(path) {
  if matches := reg.FindAllStringSubmatch(path, -1); len(matches) > 0 {
   // replace environment variable with its value
   path = strings.Replace(path, matches[0][0], os.Getenv(matches[0][1]), 1)
  }
 }

 abs, err := filepath.Abs(path)
 if err == nil {
  return abs, nil
 } else {
  return path, err
 }
}

```<!--}}}-->

<https://tutorialedge.net/golang/go-oauth2-tutorial/>{{{
<https://tutorialedge.net/projects/chat-system-in-go-and-react/>
reference layout tips from <https://github.com/kiasaki/muun>
https://github.com/gomarkdown/markdown>
<https://xkcd.com/>
<https://voluntas.github.io/>
- manekai
- <https://noraworld.com/>
  lacquer font
- ISUCON <https://github.com/isucon/isucon9-qualify><https://github.com/catatsuy/resume>
<!--}}}-->

<!--{{{-->
basedir: a
a/b/c/\*.js
a/b/d/\*.js
c/e/b/\*.js
c/e/\*.js
c/b/\*.js
\*.js

⬇

a/b/c/
a/b/d/
c/e/b/
c/e/
c/b/

e/e

when parse "c/e/b/"
if c/e/ is exits don't add c/e/

return expected
basedir: [
a/b/,
c/e/b,
]

No
The case, I was trying to segmentation walking base each match base base direcotry.
but don't need. only add base directory to walking, ignore without match base directories.<!--}}}-->

<!--{{{-->

<https://github.com/JohnStarich/go/tree/gh-pages/gopage>

```

{
  "saveAndRun": [
    {
      "base": "~/dev/any/media",
      "commands": [
        {
          "match": "controllers/api",
          "cmd": ["echo vim changed >> ~/dev/log"]
        },
        {
          "match": "views/pc/*.js",
          "cmd": ["echo vim changed >> ~/dev/log"]
        },
        {
          "match": "webroot/*.css",
          "cmd": ["echo vim changed >> ~/dev/log"]
        },
        {
          "match": "webroot/*.scss",
          "cmd": ["echo vim changed >> ~/dev/log"]
        }
      ]
    }
  ]
}
```

### SAW

create event.
intervals

<https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm>

<https://github.com/olekukonko/tablewriter>

- path normalize
  <https://github.com/bediger4000/pathnormalize>
  <https://github.com/search?l=Go&q=pathNormalize&type=Code>
  <https://github.com/PuerkitoBio/purell>
  <https://golang.hotexamples.com/examples/github.com.juju.utils/-/NormalizePath/golang-normalizepath-function-examples.html>

- when watcher added paths and { absPath, match } list and judge when matched functoin.
- when created working and watcher consideration.

### IBF

- front end of the infrabuilder.
- aws services export as csv.
!--}}}-->
````
