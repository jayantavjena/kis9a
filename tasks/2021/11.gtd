2021-11

/* MEMO{{{
//*}}}*/

2021-11-21

o ifconfig.io を読む -> [GitHub - georgyo/ifconfig.io](https://github.com/georgyo/ifconfig.io)
o ECR deployment workflow. GitHub Actions. Codes.
o SSO serverless 認証基盤
o cloudwatch alrt -> lambda -> slack 通知する zenn-scraps 
  o kms resource
  o get slack access token
  o create test function -> proxy but don't local execution.
  o [【Go】slack-go を使用して Slack にメッセージを投稿する](https://zenn.dev/kou_pg_0131/articles/go-slack-go-usage)

2021-11-20

x rust programing book ~ 第二章
x access metric architecture diagrams.
x cleanup notifiers(1, 2) destroy.
x ipad setup applications. accounts.
x read documents for rustbook.

2021-11-19

x aws_cloudwatch_log_subscription_filter を使用する
x ECSへのデプロイ部分を読む -> どのように活用するか
x kakuninn suru yooo
x インフラ側からの確認事項の整理
x 既存環境の消していいリソースの削除リスト
x jq ".resources | map({ type: .type, name: .name }) | .[]" | grep "^\s" | awk '{ print $NF }' | tr -d "\"," | xargs -n2 | tr " " "."
x bash string について -> [18.1. Here Strings](https://linux.die.net/abs-guide/x15683.html)
/*aws parameter sheet cli {{{*/
x ec2 instance list -> aws ec2 describe-instances --filters 'Name=tag:Name,Values=${1:=*}' --profile ${2:=default} --output json | jq -r '.Reservations|.[].Instances|.[] |{InstanceId,InstanceName: (.Tags[] | select(.Key=="Name").Value)}'
x rds instance list/

x aws logs describe-log-groups --profile kis9a --output json --query "logGroups[].{logGroupName:logGroupName, retentionInDays:retentionInDays, metricFilterCount:metricFilterCount, storedBytes:storedBytes, arn:arn, creationTime:creationTime}" | jq

x aws cloudwatch describe-alarms --profile kis9a --output json --query "MetricAlarms[].{AlarmName:AlarmName, StateValue:StateValue, AlarmConfigurationUpdatedTimestamp:AlarmConfigurationUpdatedTimestamp, Namespace:Namespace, MetricName:MetricName, Statistic:Statistic, Period:Period, EvaluationPeriods:EvaluationPeriods, AlarmArn:AlarmArn}" | jq

x aws iam list-roles --profile kis9a --output json --query "Roles[].{RoleName:RoleName, Arn:Arn, Description:Description, Path:Path, CreateDate:CreateDate}" | jq

x aws lambda list-functions --profile kis9a --output json --query "Functions[].{FunctionName:FunctionName, Description:Description, PackageType:PackageType, Runtime:Runtime, CodeSize:CodeSize, MemorySize:MemorySize, Role:Role, Timeout:Timeout, LastModified:LastModified}" | jq

x aws iam list-policies --profile kis9a --output json --query "Policies[].{PolicyName:PolicyName, Path:Path, AttachmentCount:AttachmentCount, CreateDate:CreateDate, UpdateDate:UpdateDate}" | jq

x aws ec2 describe-instances --profile kis9a --region=ap-northeast-1 --filter "Name=instance-state-name,Values=running" | jq -r '.Reservations[].Instances[]|{PrivateIpAddress, InstanceType, Zone: .Placement.AvailabilityZone, State: .State.Name, KeyName, TagName: .Tags|map(select(.Key == "Name"))[0]|.Value}'
/*}}}*/

2021-11-18

x CLIを使う時も、MFA認証してロールを切り替える -> 実践 zenn scraps.{{{
x [manをもっと便利に使おう！(ビルトインコマンドに対応 + 色付きで表示) - Qiita](https://qiita.com/ssh0/items/f148f0125faad5217160)
[AWSアカウントを作ったときこれだけはやっとけって言うIAMの設定](https://zenn.dev/machamp/articles/2f9ffcd9f38614)
GetSessionToken APIで一時的な認証情報を取得します
$ aws sts get-session-token --serial-number arn:aws:iam::xxxxxxxxxxxx:mfa/xxxxx --token-code 123456
```
#!/bin/sh
MFA_TOKEN=$1
JSON=`aws sts get-session-token --serial-number arn:aws:iam::792438568712:mfa/machamp --token-code $MFA_TOKEN --profile machamp`
AWS_ACCESS_KEY_ID=`echo $JSON | jq -r -c '.Credentials | .AccessKeyId'`
AWS_SECRET_ACCESS_KEY=`echo $JSON | jq -r -c '.Credentials | .SecretAccessKey'`
AWS_SESSION_TOKEN=`echo $JSON | jq -r -c '.Credentials | .SessionToken'`
aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile sample-mfa
aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile sample-mfa
aws configure set aws_session_token $AWS_SESSION_TOKEN --profile sample-mfa
```
/*}}}*/
x Error: error configuring Terraform AWS Provider: Error creating AWS session: AssumeRoleTokenProviderNotSetError: assume role with MFA enabled, but AssumeRoleTokenProvider session option not set. -> Access Keysの認証  ---->  MFAの認証  ---->  Assume Role
x terraform redirector の module 化 -> zenn.kis9a.com の作成
x aws cli warapper 
  x kms-encrypt
  x kms-decrypt
  x ssm-start-session
  x s3 policy -> terraform state show
  x cloudfront invalidate
  x alb domain
x zfuncs command
x sns-topic のサービス毎の作成とchatbot リソースのチャンネル毎の作成
x role name prefix service name -> commit
x cloudwatch alert fargate の値の設定 メトリクスの確認する必要性
x [AWS Fargate 使用状況メトリクス](https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/userguide/monitoring-fargate-usage.html)
x [bash: 標準出力、標準エラー出力をファイル、画面それぞれに出力する方法 - Qiita](https://qiita.com/laikuaut/items/e1cc312ffc7ec2c872fc)
x [Amazon ECS CloudWatch のメトリクス](https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/cloudwatch-metrics.html)
x git secrets --register-aws && git secrets --install
x git-secrets と git-secret の違い [Gitリポジトリ暗号化のススメ - git-secret - - Qiita](https://qiita.com/jqtype/items/9b0524baa4b7fe6dbde0)
x aws kms decrypt --ciphertext-blob fileb://<(cat $file | base64 -D) --output json --profile $profile | jq .Plaintext --raw-output | base64 -D
x crashed vim pipe/*{{{*/
# zmodload zsh/terminfo zsh/system
# color_stderr() {
#   while sysread std_err_color; do
#     syswrite -o 2 "${fg_bold[red]}${std_err_color}${terminfo[sgr0]}"
#   done
# }
# exec 2> >(color_stderr)}}}

2021-11-17

~ [Amazon ECRのイメージスキャン結果をSlackに通知する](https://qiita.com/hayao_k/items/116e5540b2bf0c2a2c9d) -> リクエストの投げ方が参考-> 
x 費申請項目: 交通費、NFTの教科書、詳解Bitcoin, LPIC_1.
~ amazon magic mouse 買う -> PC 変更した。
x ecs task role iam 権限追加
x npx gitignore の curl でする。 gitignore function curl gitignore.io/api
x 構成図の粒度を決める -> 大きめのレイヤーに細かいのを重ねていく -> 構成図
x terraform の運用方針を決める。 -> https://qiita.com/chroju/items/13d8f5c6719e2f4711f3
x 間近に勉強したい事は、アサインされたタスクに対しての知識の補充。勤務先の課題の把握とそれに対しての解決策の準備。
x 社内アウトプットの導線。 -> インフラ関連のzenn-scraps -> 4記事投稿した。
x 基本的なスケージュールの確認 9 - 10 タスクの確認、メール確認, 13 - 13.5 飯, 13.5 - 14 メール確認, 14 - 18 タスク。

2021-11-16

x chatbot 用のIAM role の作成、管理
x cloudwatch alert -> slack の terraform 化とscraps
x buy IPad & 目的か -> research 昼休み
x cloudwatch alert - SNS 疎通確認。
x EC2 -> cloudwatch alarm の設定 / SNS 連携 テスト / Chatbot 確認。
x aws cloudwatch set-alarm-state --alarm-name $ --state-value ALARM --state-reason "test"   ALARM
x https://github.com/kis9a/aws-cost-line-notify の README.md を埋める。Slack 連携
x chatbot 用の IAM role の作成 terraform.
x [CloudWatchでテストのためにアラームを発報させる3つの方法 - DENET 技術ブログ](https://blog.denet.co.jp/cloudwatch3/){{{
1.本当にアラーム発生条件に該当する状態にする
2.テストでアラーム発報②：アラーム発生条件の閾値を手動で調整する
3.set-alarm-state コマンドを使用してアラーム状態の変更する
/*}}}*/
x remove-empty-line
x /dev/stdin の使い方 [/dev/stderr（/dev/std{in,out}も）は使うべきではない](https://qiita.com/richmikangithub/items/a3803d816c196ecebff5)
x drank/*{{{*/
空腹感が増し、食欲が増進する
血管が拡張し、血行が良くなる
緊張がほぐれ、コミュニケーションが円滑になる
ストレスが緩和される
体や健康に良い/*}}}*/
x stderr に色をつける。
x read [shell/bash generate random alphanumeric string · GitHub](https://gist.github.com/earthgecko/3089509){{{
base64 /dev/urandom | tr -d '/+' | dd bs=32 count=1 2>/dev/null
LC_ALL=C; cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1
cat /dev/urandom | tr -dc 'a-z0-9' | head -c 32
tr -dc '[:alnum:]' < /dev/urandom  | dd bs=4 count=8 2>/dev/null
od -x /dev/urandom | head -1 | awk '{OFS="-"; print $2$3,$4,$5,$6,$7$8$9}'
/*}}}*/
x [AWSサーバレス環境における必要最低限の監視設定(ECS+Fargate編)](https://qiita.com/toshipon/items/886579563d1a1b739322){{{
セキュリティ監視
外形監視
リソース監視
アプリケーション監視
コスト監視
/*}}}*/
x stag の追従
x create user and grant, stag db connection 確認
x add MFA device to c's IAM.
x ssm-start-settion command/*{{{*/
function ssm-start-session() {
  instance=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" --profile "$2" --output json \
    | jq -r ".Reservations|.[].Instances|.[].InstanceId")
  aws ssm start-session --target "$instance" --profile "$2"
}
/*}}}*/
x freet manager からインスタンスID を確認する。 aws cli
x DB 設定方法をドキュメントした
x _r _w user の権限確認 SHOW GRANTS FOR '_w'@'%'

2021-11-15

x read [【SQL脳から切り替えよう】DynamoDB使ってみた - Qiita](https://qiita.com/a2-tsuchiya/items/fcae664b7ec81d80194c)
x [なぜReactでもVueでもなくElmを使っているのか - Qiita](https://qiita.com/lambda_funtaro/items/2d4d82412d0bb7179cf3) -> 後回し issues.{{{
Functional-Static-Strong-Managed： Haskell、Scala
Functional-Dynamic-Strong-Managed： Clojure、Erlang
Proc-Static-Strong-Managed： C#、Java、Go
Script-Dynamic-Strong-Managed： Python、Ruby
Script-Dynamic-Weak-Managed： Perl、PHP、JavaScript
Proc-Static-Weak-Unmanaged：C、C++、Objective-C/*}}}*/
x vpc endpoint に関して調べる。 [[Terraform] Fargate v1.4で必要なVPC endpoint設定](https://zenn.dev/samuraikun/articles/0d22699a9878cd){{{
CodeBuildはVPC内のリソースにしたほうが良い
VPC内にあるCoudeBuildからECRへpushするにはecr.api, ecr.dkr, s3, logs のエンドポイントが必要
CodeBuildをVPC内においた状態でCCodeBuildのソースをCodePipelineにする場合はS3へのエンドポイントが必要
CodeCommitやECRはIAMベースの認証があるので、外部からのアクセスをコントロールできる
Deployはあまり触れてないけど、EC2は２つのエンドポイント(片方はDeployのエージェント通信用)。LambdaとかContainerは一つのエンドポイントでOK。
SLO で対応 / 運用 /
/*}}}*/
x [ECSでコンテナをALB配下に置く](https://blog.adachin.me/archives/11211)
x #SRE [AWS ECSにおけるBlueGreenデプロイメントの使いどころ](https://yoshinori-satoh.com/blog/2020-10-26-ecs_blue_green_deployment/)
x #SRE [Amazon ECS+Fargate まとめ  (terraformを使ったクラスタ構築とオートスケール、ブルーグリーンデプロイ) - Qiita](https://qiita.com/marnie_ms4/items/202deb8f587233a17cca)
x fix ig.kis9a.com style
x advent calendar schedule scheme. [2021年は一人アドベントカレンダーを目論んでみる](https://zenn.dev/megane_otoko/scraps/a0ecf0164ae9d2) -> すごい 自分も仕込んどくか
x 二段階認証 AWSアカウント 2
~ プロフィール登録 -> 準備だけ プラットフォームが気に食わない
x 構成図 cb architecture zu -> x draw.io layer 機能の使い方
x stag用のAPI-tokenをもらう。
x 外形メモ -> 構成図をサクッと。コストかかるリソース中心。
x 返信 4
x MTG: 14:
x 893 domain

o career/*{{{*/
1.大量アクセスを捌く業務経験
　スケールアウトやスケールアップによるインフラの冗長化もこれにあたるか。
　Amazon CloudFrontやElastic cash(redis)を使用した、大容量データを
　高速に送る技術もこれにあたるかもしれない。

2.大規模データを扱う業務経験
　いわゆるビッグデータからpythonなどでデータ分析して
　ビジネスに生かすデータサイエンティストがその部類にあたる。

3.難易度の高い言語による開発経験
　C++やJAVAは間違いなく、難易度が高い言語なので、
　長い業務経験者なら重宝される？
　今だったら、pythonやgoのほうが、将来性ありそうな気がする。

4.アーキテクト的な業務経験
　いわゆる上流業務、新規開発フェーズで仕様が決まってない中、
　アーキテクト設計してドキュメントに落とす仕事がこれにあたる。

5.DevOps系の業務経験
　CICDパイプラインの構築
　　（circleCI・aws code deploy・aws code build）
　インフラのコード化
　　（terraform・ansible・cloudfomation）
/*}}}*/

2022-11-14

x owned media の構築 scheme.
x What is DI container?
x 収支計画 -> DONE report for private repository pkis9a/balance
o read [僕らは何故Kubernetesを使うのか](https://zenn.dev/esaka/articles/2d117655af1f03cf2444){{{
> コンテナオーケストレーション
Docker公式のSwarm
Googleを中心としたOSSのKubernetes
Mesos社によるMarathon
CoreOS社によるfleet
HashiCorp社によるNomad
AWSによるElasic Container Service
Kubernetesは技術的な完成度、コミュニティの成長という2点でデファクトスタンダードになったと思います。
Cloud Native Computing Foundation(CNCF)
リソースを効率的に利用するためにコンテナ技術が使われだした
コンテナを商用環境でスケーラブルに扱うためにコンテナオーケストレーション技術が誕生した
多数の企業を巻き込んだKubernetesがコンテナオーケストレーションのデファクトスタンダードになった
kubernetes
多様なワークフローに対応できるほどに多機能
宣言的設定と突き合わせループによるリソース管理
CRDなど拡張性が高い

/*}}}*/
x read [AWSの保守運用を自動化するためのアーキテクチャ](https://qiita.com/uzresk/items/776bb789a8585654a978)
x LeetCode Go ->  [LeetCode解いた時の考え方](https://zenn.dev/esaka/scraps/4d1c4042e60d60)
x read [TerraformでCodeBuildのレポート機能を使ってみる - Qiita](https://qiita.com/neruneruo/items/c10c7983a586f2819bbe)
x read [批判は賢い選択肢ではないということ](https://mycode.rip/criticism-is-not-good-choice){{{
> 損失回避バイアスという損をしたくない心理的バイアス。
作品を批判することは、その良いと評価した人に対して認知的不協和（不快感）を与える行為。
さらに不快感を覚えた人は、批判行為を行った人に対しても良くないイメージを抱きます。
「これは損失回避バイアスのせいによる不快感だ」「批判者の人格と意見は別けて考えるべきだ」と、
合理的に考える人の割合は少ないと推測できるので、結果的に多くの人を敵に回してることが分かります。
社会的承認を求める人たちは気後れを感じるでしょう。大局的に見れば、批判は本人にとっても世界をあまり良くないベクトルに向ける行為です。
/*}}}*/
x docker imageのサイズを落とす ->  Multi Stage Build の使用。{{{
ビルド処理にはGoのランタイムがいるのですが、バイナリの実行にはランタイム不要
FROM golang:alpine as builder
RUN git clone github.com/hoge/hoge.git
WORKDIR hoge
RUN go build

FROM alpine
COPY --from=builder /go/hoge/app /app
CMD ["/app"]/*}}}*/
x 会社のソースコードを読む
x 返信 2
x dot.kis9a.com redirector
x 二段階認証 自分のAWSアカウント
x snippets/ README.md の更新。
x tasks/ README.md の更新。
x make precache.manifest.js/*{{{*/
const precacheManifestHash = (() => {
  const hash = crypto.createHash("md5");
  hash.update(precacheManifest);
  return hash.digest("hex");
})();

fs.writeFileSync(
  `./precache-manifest.${precacheManifestHash}.js`,
  precacheManifest,
  { encoding: "utf8" }
);
[怖くないPWA - 既存静的サイトを爆速でPWA化する - Qiita](https://qiita.com/shellyln/items/48e51b554044293ada24)
/*}}}*/
~ me iam の管理。 frontend-deploy: s3 + cloudfront, route53, acm ... 結構面倒

2021-11-13

x git-secrets の導入
x my number card.
x hair cut at mens wish. 13:00 ~
/* o write to storage{{{
const storageArea = (area) => window[area + "Storage"] || localStorage;

const writeToStorage = (props) => [
  storageArea(props.area).setItem(props.key, props.converter(props.value)),
  ((source, assign) => {
    var result = {},
      i;
    for (i in source) result[i] = source[i];
    for (i in assign) result[i] = assign[i];
    return result;
  },
  ({
    converter: props.converter || JSON.stringify,
  },
  props)),
];

const readFromStorage = (props) => [
  (dispatch, props) => {
    try {
      var value = props.converter(storageArea(props.area).getItem(props.key));
      var dispatchProps = assign({}, props.props || {});
      dispatchProps[props.prop || "value"] = value;
      dispatch(props.action, dispatchProps);
    } catch (error) {
      dispatch(props.error);
    }
  },
  ((source, assign) => {
    var result = {},
      i;
    for (i in source) result[i] = source[i];
    for (i in assign) result[i] = assign[i];
    return result;
  },
  ({
    converter: props.converter || JSON.parse,
    error: props.error,
  },
  props)),
];
*/ 
/*}}}*/

2021-11-12

x mock image viewer.
x variables refactoring.
x e 向き先 設定 -> prod 向き先変更時 通知
x ecr repository 共通化 -> 通知
x rpc URL の変更
x twitter access key を復活
x iam 共通化 リファクタ
x タスク整理

2021-11-11

x tmux clock.
x write terraform cicd diagrams.
x マイナンバー月の住民票を取りに行く。
x init ultisnips directory.
x fix testnet instance.
x unused repositories make private.
x Dotfiles clean/*{{{*/
  x fix snippets.userSnippetsDirectory path
  x refactor: remove comments
  x chore: remove nvim colorscheme anynight.vim
  x remove delta to use vim-diff
  x chore: remove unused functions
  x move hop.nvim to easymotion.vim
  x fix: source file when file exsits on zsh
  x deinit submodule for ultisnips
  x init ultisnips as submodules
/*}}}*/

2021-11-10

x kis9a/vim-snippets plugin の初期化
x マイナンバーを見つける
x 124 - 341 までに絞る。
x サイコロゲーム ROCE に繋げたい。
x 反復か再帰のどちらが適切か？
x ハノイの塔 x A(n + 1) = 2An + 1, An = 2^n -1
x 再帰に関しての定義整理
x subscription to be recreated. に関してのスレッドを読む。
~ google meet を録音して共通用語を抑える。
x tesnet 用の ALB ドメインの設定
x hustle or hassle
o 再帰の概念: 階乗の例/*{{{*/
n! に関して
n! = 1 // if n = 0
n! = n x (n-1) // if n >0
func fact(init n) {
if (n == 1) {
return 1
} else {
return n*
}
return n*fact
}
/*}}}*/
o 階乗の例の際のメモリの動き/*{{{*/
if n == 4
4!
4 * 3!
3 * 2!
2 * 1!
1
/*}}}*/
x why closed hyperway navigation issue?
x check comment about hyperway.

2021-11-09

x Cライブラリのインストール方法。
x 単純なポインター演算を初めて見る。
x [Google Chromeで条件にマッチした履歴を削除](https://qiita.com/kaityo256/items/dd306110580100159041)
x clang 実行環境の準備
x clang 始める。zenn.dev.
x [Docker for Macを使っていたらディスク容量を圧迫していたので](https://qiita.com/shinespark/items/526b70b5f0b1ac643ba0)
x read [今日からできるプログラムの高速化(C/C++)](https://zenn.dev/irugo/articles/4bd113195228c3)
x e の要件に関して理解する[2021-11-08
x ssm parameter の設定
x data 構造とアルゴリズム
x dns setting for stag domain.
x ssm praemter setting
x 環境構築 C
x format c: fd -ec | xargs -I {} bash -c "clang-format {} | tee {}"
x shell parameter の整理
x man hoo | col -b | nvim -
x init clang snippets
x find . -maxdepth 1 | grep -e Ch -e Ap | xargs -n 1 bash -c 'echo ${0: -2}'
x [はじめに｜net／httpでつくるHTTPルーター 自作入門](https://zenn.dev/bmf_san/books/3f41c5cd34ec3f/viewer/dce8ca)

2021-11-04
2021-11-05
2021-11-06
2021-11-07

x 1 password の導入/*{{{*/
  x research and examination.
  x application subscriptions -> Apoleストアでは月会費450円もしくは年会費3,900円
  x connect google account
  x chrome extensions.
/*}}}*/
x clean up task lists.
x https://github.com/higuruchi/sijimi
x github api usage https://github.com/mattn/gh-star/blob/main/main.go
x [GitHub Actions でも [skip ci] が使えるようになりました](https://zenn.dev/snowcait/articles/ef60401313a3fc)
x findy のアカウント削除。
x [Toreru](https://toreru.jp/)
x [80万円／月～の案件一覧](https://freelance.levtech.jp/project/sala-6/)
x [Blockchain学習メモ](https://zenn.dev/razokulover/scraps/b85e061d8c06fd)
x [GitHub - MasakiMisawa/cwl-transfer-slack-sample](https://github.com/MasakiMisawa/cwl-transfer-slack-sample)
x 初期化 pc1
x セットアップ pc1
x 初期化 pc2
x buy clang data strcture and algorithm.
x https://github.com/georgyo/ifconfig.io
x [CloudWatch Events Amazon SNS トピックで通知が送信されないときの対処法](https://dev.classmethod.jp/articles/tsnote-sns-topic-policy-encryption-cloudwatch-001/)
x Lambda cloudwatch [Lambdaをどう管理する？ - 秋の魔法使い](https://radiochemical.hatenablog.com/entry/2020/08/30/180000)
x t3.largeで環境構築やってみる。起動時間とコストの算出プログラム。
x やっぱり Lambda より chatbot の方がいいかもな。 -> [CloudWatchのアラートをSlackへ通知する](https://zenn.dev/3104/articles/6bb3603feb64a0)
x https://qiita.com/hayao_k/items/529539bbb07736ea0f41
x [Web3.0のインターネット基盤になっていくEthereum](https://nobumei.substack.com/p/web30ethereum)
x https://qiita.com/kooohei/items/e9f8692b9ebe90b6a9df
x project management -> PMBOOK
x datadog の個人での導入
x bigqury の個人での導入
x https://menslog.net/2021/02/02/kimetunoyaiba-back-settings/
x terraform modulelize
x https://maku77.github.io/vim/basic/search.html
x read cloudwatch alarm resources.
x initialize cloudwatch alarm test resource.
x [LambdaイベントソースのSNSからCloudWatch Alarm名を取得してみた](https://dev.classmethod.jp/articles/lambda-sns-cloudwatch-alarm/)
x aws cloudwatch set-alarm-state --alarm-name $ --state-value $ --state-reason "test"
x cloudwatch-alerm -> lambda の実行テストを実践。
x fzf に関しての調べ in slack vim-jp.
x [GitHub - anyakichi/lambda-rust-api-sample](https://github.com/anyakichi/lambda-rust-api-sample)
x how to create vim-snippets plugin.
x vim-zenn-snippets <https://github.com/kis9a/vim-zenn>
x script for development instance https://github.com/motojouya/ec2-develop/blob/master/init.sh
x serverless GitHub API の hook の使用。
x [Golang でコマンドライン Fuzzy Finder 「gof」作った。 - Qiita](https://qiita.com/mattn/items/edea1be5a6d84663ab8b) の実装
x 個人のproject management とディレクトリ構成。
x 構成図を書いて一度整理する。
x スタートアップ 経由でのマネタイズ関連。
x 株式会社 unkonow のリポジトリの作成。
x 定量か指標の組み込み。
x cd ~, pushd ~ > /dev/null
x ec2 instance の開発環境での使用事例.
x commented for youtube video about ipad blink shell.
x read [TerraformでAWSのスポットインスタンスを作成する - Qiita](https://qiita.com/m-shimao/items/0832d67b6abdc22ba2f0)
x read [AWS Spot Instance Guide: 7 Things You Should Know - ParkMyCloud](https://www.parkmycloud.com/blog/aws-spot-instance/)

2021-11-03

~ zenn-markdown snippets
x init me/cv_22_01.md
~ init me/cv_22_08.md
x (1) lambda のローカル実行方法の調べ。
x [GolangでSlack Interactive Messageを使ったBotを書く](https://engineering.mercari.com/blog/entry/2017-05-23-095500/)
x 開発用インスタンスの作成 - nvim install.
x how to manage ami.
x [EC2をリモート開発環境にする時のTips](https://zenn.dev/suzuk1satosh1/articles/2b8e4fa4259e51)
x 目的を決める。-> 自己分析期間とメトリクス、監視方法に関して考える。

2021-11-02

x "github.com/slack-go/slack" を使用してみる。[slack-go Slack にメッセージを投稿](https://zenn.dev/kou_pg_0131/articles/go-slack-go-usage)
x password check [How Secure Is My Password?](https://howsecureismypassword.net/)
x kms encrypt / new bastion / s3 bucket rename ...
x migrate terraform resource another account.
x multi account operation.
x destroy lambda-upload resource
x あの日たてたリソースの名前も用途も管理者も金額も後色々、僕たちはまだ知らない
x archive  post about frontend learning cost reduce.
x cloudtrailのIaC, clean up iam role, post.
~ aws [AWS CLF、SAA、SOA、DVA4冠までの道のり](https://zenn.dev/mn87/articles/0b8b6d8bf49249) -> 体系化は後でいい
~ terraform から cloudformation resource で chatbot を管理する。 -> 学習コスト。
x Removed the title of blockchain engineer. -> customer-tailored service orientation engineer
x 請求アラートのIaC -> [CloudWatchで請求アラームを作成する](https://zenn.dev/mn87/articles/ec5a57228c491c) -> don't use mail
~ 請求書アラートのIaC -> [請求アラームをAWS ChatbotでSlackに通知してみた](https://zenn.dev/mn87/articles/17901f9a88b706) -> no support tf aws chatbot
x slack のトークン取得方法。Webhook/ slack-bot 関連のリサーチ
x lambda triger の設定 / example s3 put object.
x make private 
x release validation for upload filetype at javascript.
~ manage cost tags for billing. -> sep account.
x memo coding-interview algorithm
x clean up relation for company. buyout, subsidiary.
x 月次勤怠締め申請は必要か？
x cloudtrail log の調査
x archive task files.
x read [リモートワークを支える 社内セキュリティ基盤の構築と運用](https://speakerdeck.com/mizutani/secueiry-for-wfh?slide=29)
x read [AWS S3を中心としたセキュリティログ基盤の紹介をしました](https://techlife.cookpad.com/entry/aws-tma-2019)
~ 24365
~ mv dotfiles ~/kis9a/dotfiles
x fix aws-services script.
~ remove aws-services script action.

2021-11-01

x transfer aws cost at october.
x try to fix invalid content-type when upload image.
x read [クレデンシャルの適切な扱い方 ー AWS SDK for Goの場合 | DevelopersIO](https://dev.classmethod.jp/articles/using-credential-at-aws-sdk-for-go/)
x fix InvalidAccessKeyId error. -> documented.
x schdule not woking fix re apply and setup kms.
x https://github.com/kis9a/aws-cost-line-notify のアーキティクチャ変更に関しての記事の更新。
x try lambda-upload allow all resource remove under /*{{{*/
# resources = [
#   "${aws_s3_bucket.this.arn}"
# ]
#}}}
x kms line token/*{{{*/
```
ecoh $AWS_COST_LINE_NOTIFY_TOKEN > secret.txt
## $keyId known after terraform apply.
id=$(aws kms generate-data-key --key-id $keyId --key-spec AES_256 --output json | jq .KeyId)
aws kms encrypt --key-id $id --plaintext fileb://secret.txt --query CiphertextBlob --output text > lambda-upload.yaml.encrypted
```/*}}}*/
x add environment block for lambda function/*{{{*/
environment {
  variables = {
/*}}}*/
/* fix lambda iam role{{{
downloader := s3manager.NewDownloader(sess)
n, err := downloader.Download(f, &s3.GetObjectInput{
  Bucket: aws.String(bucketName),
  Key:    aws.String(objectKey),
})
/*}}}*/
