local cb = require'diffview.config'.diffview_callback
require'diffview'.setup {
  diff_binaries = false,
  file_panel = {
    position = "left",
    width = 35,
    height = 10,
    use_icons = true
  },
  key_bindings = {
    disable_defaults = false,
    view = {
      ["<tab>"]     = cb("select_next_entry"),
      ["<s-tab>"]   = cb("select_prev_entry"),
      ["<leader>e"] = cb("focus_files"),
      ["<leader>b"] = cb("toggle_files"),
    },
    file_panel = {
      ["j"]             = cb("next_entry"),
      ["<down>"]        = cb("next_entry"),
      ["k"]             = cb("prev_entry"),
      ["<up>"]          = cb("prev_entry"),
      ["<cr>"]          = cb("select_entry"),
      ["o"]             = cb("select_entry"),
      ["<2-LeftMouse>"] = cb("select_entry"),
      ["-"]             = cb("toggle_stage_entry"),
      ["S"]             = cb("stage_all"),
      ["U"]             = cb("unstage_all"),
      ["X"]             = cb("restore_entry"),
      ["R"]             = cb("refresh_files"),
      ["<tab>"]         = cb("select_next_entry"),
      ["<s-tab>"]       = cb("select_prev_entry"),
      ["<leader>e"]     = cb("focus_files"),
      ["<leader>b"]     = cb("toggle_files"),
    }
  }
}
  
Plug sindrets/diffview.nvim
[GitHub - JacobSNGoodwin/memrizr at lesson-09](https://github.com/JacobSNGoodwin/memrizr/tree/lesson-09)

  https://www.amazon.co.jp/gp/video/detail/B076J9K82W/ref=atv_me_kid_c_JslnYP_brws_11_1?language=en
	// group := costexplorer.GroupDefinition{
	// 	Key:  aws.String("SERVICE"),
	// 	Type: aws.String("DIMENSION"),
	// }
	// groups := []*costexplorer.GroupDefinition{&group}
	// input.GroupBy = groups


func getCost() (Response, error) {
	svc := cloudwatch.New(session.New(), &aws.Config{Region: aws.String("us-east-1")})
	now := time.Now()
	params := &cloudwatch.GetMetricStatisticsInput{
		Dimensions: []*cloudwatch.Dimension{
			{
				Name:  aws.String("Currency"),
				Value: aws.String("USD"),
			},
		},
		StartTime:  aws.Time(time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, time.UTC)),
		EndTime:    aws.Time(now),
		Period:     aws.Int64(86400),
		Namespace:  aws.String("AWS/Billing"),
		MetricName: aws.String("EstimatedCharges"),
		Statistics: []*string{
			aws.String(cloudwatch.StatisticMaximum),
		},
	}
	resp, err := svc.GetMetricStatistics(params)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(resp)
	return Response{
		Message: "",
	}, nil
}

func sumCost(cost *costexplorer.GetCostAndUsageOutput) (total string) {
	sum := 0.0
	for _, data := range cost.ResultsByTime[0].Groups {
		amount, _ := strconv.ParseFloat(*data.Metrics["UnblendedCost"].Amount, 64)

		sum = sum + amount
	}
	total = fmt.Sprintf("%.10f", sum)
	return total
}

リージョンを us-east-1 にしたら、秒で作りやがった。
terraform の aws_acm_certificate リソースに region がなかったから、リージョンを分けたい場合、acm だけ別のプロバイダーで定義するといいかも。
- [【hey佐藤裕介】天才と呼ばれた男が、20代で経験した挫折から学んだこと「若手エンジニアは“つよくてニューゲーム”状態をつくれ」 - エンジニアtype | 転職type](https://type.jp/et/feature/9856/)

[S3 + AWS Cognito + Google認証でドメイン制限のついた非公開サイトを作る - Sanwa Systems Tech Blog](https://tech.sanwasystem.com/entry/2018/06/19/103639)

export LINK_TABLE=link
export REGION=ap-northeast-1
export STACK_BUCKET=url-shortener-lambda-go
An error occurred (BucketAlreadyOwnedByYou) when calling the CreateBucket operation: Your previous request to create the named bucket succeeded and you already own it.

aws s3api create-bucket --bucket url-shortener-lambda-go-kis9a --create-bucket-configuration LocationConstraint=ap-northeast-1

-c, --cached          show cached files in the output (default)
-d, --deleted         show deleted files in the output
-m, --modified        show modified files in the output
-o, --others          show other files in the output
-i, --ignored         show ignored files in the output
-s, --stage           show staged contents' object name in the output
-k, --killed          show files on the filesystem that need to be removed
-u, --unmerged        show unmerged files in the output

*~
*.o
\#*#
*#
.#*
.*~
*~
.DS_Store
*.sw[po]
tags
TAGS
.svn
*.dSYM
*.log
*.dvi
*.aux
*.elc
.zshrc.local
.python-version
samples
.netrwhist
.bundle
/vendor/bundle
Gemfile.lock
node_modules
bower_components
fishd.*

# Vim
Session.vim
.vim/bundle/
.vimrc_sample
.vim/ftdetect/Dockerfile.vim
.vim/syntax/Dockerfile.vim
.vim/snippets/

# Xcode
build/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata
*.xccheckout
*.moved-aside
DerivedData
*.hmap
*.ipa
*.xcuserstate
*.xcworkspace/xcshareddata

# CocoaPods
Pods/

# Atom.io
.atom/packages/save-session
.atom/compile-cache
.atom/storage

# Fish local config
.config/fish/config-local.fish
.config/fish/fish_variables.x86_64

# Karabiner
.config/karabiner/automatic_backups

.tmux/*
.config/coc
.config/nvim/plugged/
.code

aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 298276046670.dkr.ecr.ap-northeast-1.amazonaws.com

https://github.com/aws/apprunner-roadmap
https://github.com/jeffisadams/lambda-cognito-go
https://github.com/br4in3x/golang-cognito-example
https://github.com/hiepd/cognito-go
[GitHub - loteoo/hyperapp-starter: Clean web app starter using Hyperapp with strong focus on developer experience.](https://github.com/loteoo/hyperapp-starter)

const cssFilePlugin = {
  name: 'css-file',
  setup(build) {
    const path = require('path')

    build.onResolve({ filter: /\.css$/ }, args => {
      return {
        path: path.join(args.resolveDir, args.path),
        namespace: 'css-file',
      }
    })

    build.onLoad({ filter: /.*/, namespace: 'css-file' }, async (args) => {
      const result = await esbuild.build({
        entryPoints: [args.path],
        bundle: true,
        write: false,
      })
      return {
        contents: result.outputFiles[0].text,
        loader: 'file'
      }
    })
  },
}

[Next.js+SWRでGraphQL！](https://zenn.dev/thim/articles/d09cc8500d47d3216907)
<https://github.com/TakahiroHimi/Next-SWR-sample>

[GitHub - jbyuki/venn.nvim: Draw ASCII diagrams in Neovim](https://github.com/jbyuki/venn.nvim)

package main

import (
	"fmt"

	"github.com/aws/aws-lambda-go/lambda"
)

type Request struct {
	ID    float64 `json:"id"`
	Value string  `json:"value"`
}

type Response struct {
	Message string `json:"message"`
	Ok      bool   `json:"ok"`
}

func Handler(request Request) (Response, error) {
	return Response{
		Message: fmt.Sprintf("Id %f", request.ID),
		Ok:      true,
	}, nil
}

func main() {
	lambda.Start(Handler)
}



[Hyperapp V2 - Qiita](https://qiita.com/diontools/items/074dd32f86ecd995aff5#actions)
[[フロントエンド] fetchAPIで画像(バイナリーデータ)を取得する](https://www.yoheim.net/blog.php?q=20180901)

// const viewRoute = (name) => {
//   findRoute;
//   switch (name) {
//     case "home":
//       return viewHome();
//     case "about":
//       return viewAbout();
//     default:
//       h("div", { class: "not-found" }, text("not found"));
//   }
// };



- [AWSにおける静的コンテンツ配信パターンカタログ（アンチパターン含む） | DevelopersIO](https://dev.classmethod.jp/articles/static-contents-delivery-patterns/)
私は製品を作るときは「開発」と「製造」を分けるべきだと思っている。 何故ならそれぞれに要求される技術要素が異なるからだ。 でもソフトウェアはしばしば「開発」と「製造」が混濁する。
[技術的負債と FOSS | text.Baldanders.info](https://text.baldanders.info/remark/2021/07/technical-debt-and-foss/)

https://cloud.google.com/run

clean up dotfiles/
link "~/.dotfiles/git/.gitconfig", "~/.gitconfig"
link "~/.dotfiles/git/.git_template", "~/.git_template"
link "~/.dotfiles/zsh/.zshrc", "~/.zshrc"
link "~/.dotfiles/git/.gitignore_global", "~/.gitignore_global"
link "~/.dotfiles/tmux/.tmux.conf", "~/.tmux.conf"
link "~/.dotfiles/nvim/", "~/.config/nvim/"
link "~/.dotfiles/alacritty/", "~/.config/alacritty/"

sudo -u host createuser postgres
[MoT TechTalk #6 タクシーデリバリーアプリ「GO Dine」を支えるバックエンド - connpass](https://jtx.connpass.com/event/220555/)
[自動化大好きエンジニアLT会 - vol.4 - connpass](https://rakus.connpass.com/event/217909/)
[GeekGig #1 〜Goと私の一年〜 - connpass](https://showcase-gig.connpass.com/event/217914/)
- [続・サーバーレス検索エンジン：巨大な静的ファイルを扱うケースについて考える | フューチャー技術ブログ](https://future-architect.github.io/articles/20210604a/)

[GitHub - akella/taotajima.jp](https://github.com/akella/taotajima.jp)
[GitHub - akella/fake3d](https://github.com/akella/fake3d)

package main

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/mmcdole/gofeed"
)

func main() {
	fp := gofeed.NewParser()
	feed, err := fp.ParseURL("https://zenn.dev/kis9a/feed")
	if err != nil {
		log.Fatal(err)
	}
	items := feed.Items
	res, err := json.Marshal(items)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(res))
}

u
func explorerSvgs() {
	const tmpl = `
<html><body>
    <div>
	{{ $baseDir := .BaseDir }}
	{{range $name := .Names}}
		<svg src="{{$baseDir}}/{{$name}}" />
	{{end}}
    </div>
</body></html>
`
	type Tmpl struct {
		BaseDir string
		Names   []string
	}
	var tmplArg Tmpl
	var names []string
	dir := getSvgsPath()
	fs, err := readDir(dir)
	if err != nil {
		log.Fatal(err)
	}
	for _, f := range fs {
		names = append(names, f.Name())
	}
	tmplArg.Names = names
	tmplArg.BaseDir = dir
	t := template.Must(template.New("tmpl").Parse(tmpl))
	t.Execute(os.Stdout, tmplArg)
}
https://www.w3schools.com/cssref/playit.asp?filename=playcss_filter
[Remove lifecycle events · jorgebucaran/hyperapp@68c158a · GitHub](https://github.com/jorgebucaran/hyperapp/commit/68c158a6fe23e15607edeb2ac77bb8ce105f8af9)

[Lighthouseをよりパワフルで便利にする - Qiita](https://qiita.com/murajun1978/items/f89df7a30890fa23fa87)
- [GitHub - codrops/LiquidDistortion: A slideshow with liquid distortion effects in WebGL powered by PixiJS and GSAP](https://github.com/codrops/LiquidDistortion)

yes | nl | xargs -L 1 bash -c 'sed -n $(("${1}" % $(wc -l < "${0}")))p "${0}"' ~/.vimrc
- google analytics
- apple screen time
- wakatime
- sleep cycle
- aws cost manager
- apple tag
- gps
- bigquery




[GitHub - loteoo/hyperstatic-starter: Starter project for the hyperapp site generator](https://github.com/loteoo/hyperstatic-starter)
yes | nl | xargs -L 1  \ 
bash -c 'sleep 0.1; sed -n $(("${1}" % $(wc -l < "${0}")))p "${0}"' ~/dotfiles/.vimrc

[](https://katsuya-place.com/react-fullcalendar/)
[Pure JavaScriptで画像の遅延ロード - Qiita](https://qiita.com/naosk8/items/55570591927e00c21b13)
[Blockchain 入門](https://zenn.dev/endo/books/914069b7855e63c445ea)
[AWS SAA 入門](https://zenn.dev/endo/books/1b2e692232ddd84e6500)
[Terraform 入門](https://zenn.dev/endo/books/4b1cc6a4d6755a36f7f2)
[ECS 入門](https://zenn.dev/endo/books/6c9c8e9e74a3d30bcf08)

[Invalidate Cloudfront · Actions · GitHub Marketplace · GitHub <title>cloud-lightning <title>cloud-lightning](https://github.com/marketplace/actions/invalidate-cloudfront)

linux user manage ment

Cache-Control: max-age=600, stale-while-revalidate=30

will cache some content for 10 minutes and, at the end of that 10 minutes, will serve stale content for up to 30 seconds while new content is being fetched.

Similarly, this statement:

Surrogate-Control: max-age=3600, stale-if-error=86400

instructs the cache to update the content every hour (3600 seconds) but if the origin is down then show stale content for a day (86400 seconds).



[CDNキャッシュ向けレスポンスヘッダーCache-Control:s-maxage を触ってみた | DevelopersIO](https://dev.classmethod.jp/articles/play-with-shared-cache-response-header-s-maxage/)
https://dev.classmethod.jp/articles/investigation-of-serverless-and-terraform-module-structure/

[Serverless×Terraformモジュール設計のベストプラクティスの検討~IoTデータ収集基盤の例~ | DevelopersIO](https://dev.classmethod.jp/articles/investigation-of-serverless-and-terraform-module-structure/)


https://dev.classmethod.jp/articles/investigation-of-serverless-and-terraform-module-structure/
[GitHub - golang/example: Go example projects](https://github.com/golang/example)
[AWS AmplifyでNext.jsのISRを試してみる | DevelopersIO](https://dev.classmethod.jp/articles/amplify-next-js-isr/)
https://www.amazon.co.jp/kindle-dbs/library/manga
[stale-while-revalidate対応のCDNでISRのような挙動を実現する](https://zenn.dev/catnose99/articles/0b601c1f62019b)
[Amazon CloudFront Flash Talks: Best Practices on Configuring, Securin…](https://www.slideshare.net/AmazonWebServices/amazon-cloudfront-flash-talks-best-practices-on-configuring-securing-customizing-and-monitoring-your-distribution-ctd301-reinvent-2017)

Array.prototype.find
Array.prototype.findIndex
Array.prototype.flat
Array.prototype.flatMap
Array.prototype.includes
String.prototype.includes
String.prototype.padStart
Object.values
Object.assign
Object.entries
Object.fromEntries

[About | ysmtegsr.com](https://ysmtegsr.com/about)

let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;]*')

gh-pages-clean

- [Terraformで楽をしたい | フューチャー技術ブログ](https://future-architect.github.io/articles/20200805/)
オプション指定when=destroyで削除時の削除直前に動作する

[Ansible Webinars and Training I Ansible](https://www.ansible.com/resources/webinars-training)

探した結果、vimのスクリプトでは
substitute(ソース文字列,置換元パターン,置換文字列,フラグ)
という関数がこの目的にぴったりであった。
具体的にはcurfilenameという変数に対象となるパスが入っていれば

let curfilename=substitute(curfilename,"\\","/","g")

https://github.com/kis9a

[Terraform AWS modules · GitHub](https://github.com/terraform-aws-modules)
