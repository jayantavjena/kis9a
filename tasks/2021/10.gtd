2021-10

/* MEMO
x Goの基礎とアルゴリズム的な課題解決。 -> 標準パッケージのコードリーディング  -> zenn scraps
間近に勉強したい事は、アサインされたタスクに対しての知識の補充。勤務先の課題の把握とそれに対しての解決策の準備。
業務知識ま割りの補強,調べる。block-chain ことはじめ。 -> 詳解 block-chain を読む。
ORMに頼りきりだったのでSQL 部分の復習 http://sqlbolt.com。
refs: [とりあえずド素人が読むべきブロックチェーン入門論文・書籍・サイト - Qiita](https://qiita.com/onokatio/items/7db58947b05c17d1f44e)
社内アウトプットの導線。 -> インフラ関連のzenn-scraps -> 4記事投稿した。
基本的なスケージュールの確認 9 - 10 タスクの確認、メール確認, 13 - 13.5 飯, 13.5 - 14 メール確認, 14 - 18 タスク。
IaC周りの理解の強化。特にterraform のスニペットを増やしたりAWSのサービスも細かく見る。特にコンテナ周り。
[GitHub - bitcoinbook/bitcoinbook: Mastering Bitcoin 2nd Edition - Programming the Open Blockchain](https://github.com/bitcoinbook/bitcoinbook)
[web3.js - Ethereum JavaScript API &mdash; web3.js 1.0.0 documentation](https://web3js.readthedocs.io/en/v1.5.2/index.html)
https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/what-is-managed-blockchain.html
経費申請項目: 交通費、NFTの教科書、詳解Bitcoin, LPIC_1.
[GitHub - IzumiSy/go-cleanarchitecture](https://github.com/IzumiSy/go-cleanarchitecture)
*/

o Ansible 周りの記事を漁ります。https://zenn.dev/topics/ansible
o 読む [Bitcoinトランザクションをバイナリから理解していく](https://tech.fressets.com/1103/)
o eth, dapps tutorial <https://www.youtube.com/playlist?list=PLuCS8p0T7ozKYkr15ZjtjSNmVIwMVZebu>
o 見る [Rust で単方向 LinkedList を実装する | ゴミ箱](https://53ningen.com/linkedlist-in-rust/) -> init
o https://github.com/awslabs/aws-lambda-go-api-proxy のドキュメントを読み理解する。
o dynamodb のローカル環境の構築とデプロイまでのフロー。
o lambda で gin の proxy が動作しているかどうかの確認。
o ECS 構成 -> [ECS の構成と Terraform コード化する際の構造化について](https://jedipunkz.github.io/blog/2019/10/17/ecs/)
x base-number に関して、Golang の 標準パッケージ、数学。
x 進数変換スクリプト Golang

2021-10-25
2021-10-24
2021-10-23
2021-10-22

o about scraps/*{{{*/
スクラップを何個か買いてて思ったのは
知識のダッシュボード的な使い方をしたい。
見る側にとっても角側にとってもすごくわかりやいですがやはり機能が少ない、
Zennのスクラップに記事を載せるメリットは、 簡単に描き始められる。 比較的多くの人に見てもらえる。反応がある時が嬉。
ですが、Github で管理できな、移行できない スクラップ一覧の検索性、管理が難しいです。
Github sources -> Github Issues か
自分は、Trello とかより Redmine の方が好きだったりします。
/*}}}*/

terraformの設定を眺めていたのですが、Fargate のロール周りでお願いがあります。
https://github.com/palettechain/terraform/blob/master/coinbook/prod/ecs.tf#L8
タスク実行ロールは環境ごとに分けて作成してください。秘匿情報の取得の為にパラメータストアへのアクセスがありますので他の環境へアクセスできる状態は避けたいです
タスク実行ロールとタスクロールは分けてください。実行ロールはタスク実行とパラメータストアのリードアクセスのみですので、メール送信などはできません
タスクロールについてはステージング用に palette-nft というIAMユーザーがいるので、そこからポリシーをピックアップしたロールを別途作成してください。
また、palette-nft ユーザーは CircleCI から ECR へのアクセスや ECS のデプロイができるように権限が追加されています。coinbook 本番用にもデプロイなどができるようにユーザーを作っていただければと:pray:


aws iam list-attached-user-policies --user-name palette-nft

ATTACHEDPOLICIES        arn:aws:iam::695299050844:policy/PaletteNFTDeployECSTask        PaletteNFTDeployECSTask
ATTACHEDPOLICIES        arn:aws:iam::695299050844:policy/PaletteNFTParameterStoreReadAccess     PaletteNFTParameterStoreReadAccess
ATTACHEDPOLICIES        arn:aws:iam::aws:policy/SecretsManagerReadWrite SecretsManagerReadWrite
ATTACHEDPOLICIES        arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess     AmazonElastiCacheFullAccess
ATTACHEDPOLICIES        arn:aws:iam::aws:policy/AmazonS3FullAccess      AmazonS3FullAccess
ATTACHEDPOLICIES        arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS AWSCodeDeployRoleForECS
ATTACHEDPOLICIES        arn:aws:iam::aws:policy/AmazonSESFullAccess     AmazonSESFullAccess
ATTACHEDPOLICIES        arn:aws:iam::aws:policy/AmazonRDSDataFullAccess AmazonRDSDataFullAccess
ATTACHEDPOLICIES        arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy   AmazonECSTaskExecutionRolePolicy
ATTACHEDPOLICIES        arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess AmazonSSMReadOnlyAccess

2021-10-21

o 見る [Rust の基本的な文法メモ | ゴミ箱](https://53ningen.com/hello-rust/) -> init
o frontend cache 要件確認 TTL 設定 
o ssoを始める。basic 認証のLambda function をみる。
o レプリケーションについて読む
  o replication-demo instance の作成。
  o [MySQL入門　レプリケーション編 - Qiita](https://qiita.com/Tocyuki/items/c224cef57493f536a941)
  o [MySQLでMaster-Slave構成のレプリケーション設定 - Qiita](https://qiita.com/ksugawara61/items/fdd5ae9b78931540887f)
  o [MySQL on EC2 → Aurora にレプリケーションをしてみた - kakakakakku blog](https://kakakakakku.hatenablog.com/entry/2017/02/03/223834)
o ECS/Fargate
  o タスク実行ロールは環境ごとに分けて作成してください。
  o タスク実行ロールとタスクロールは分けてください。
o singer のリソースの確認。
o 通知チャンネルの統一
  o aws-cost-line-notify -> slack.
  o aws cost warning -> slack.
  o gmail important -> slack.
  o 統一後の記事更新, output 関連。
o AWS 今かかっている cost 調査
o netrw の 今開いているファイルの親ディレクトリを開く関数。
o AWS cost alert の調査。 -> slack 連携
o me.kis9a.com のリダイレクト -> <https://github.com/kis9a/kis9a>
o github issue template に関して調べる。
o github-labeler でのラベルのセットアップ,言語、カテゴリー。
! terraform CI·CD pipeline の構築。
! kis9a/kis9a に関しての設計
  o images/README.md の初期化
  o memos/subs/ ディレクトリの 許容 
  o memos/ ファイル群の整理
  o waka/ の整理 
o dotfiles の整理
o tasks/ directory の整理。

x 証明書ACM登録 内容確認 with openssl command.
x freee 経費申請画面を見つける。 -> 権限がない、調整中？月末に確認。-> 招待メールきた

2021-10-20

x 携帯電話の通知設定。
x singer のリソースの 掃除, 
  x twitter 2 -> slack.
x zenn-scraps の機能要望。-> scraps の管理 -> とりあえず 100 記事投稿してみては
x nested syntax highlight match pattern. trimmed first word match.
x terraform の小さいやつのまとめリポジトリを作る。
x いらないインスタンスを消す。
x 源泉徴収票を出す。
x 家計簿確認, 計画。
x amazon prime の支払いがなぜかできてないので、修正する。
/* ~ Pulumi に関して調べる */
/*   o [Gosuke Miyashita](https://mizzy.org/) */
/*   o https://qiita.com/ttkn9a/items/6fb71af2d265939184c3 */
x 自己管理 の外部化 -> 情報発信, センターピンの設定。
x docker 環境構築手順の書き換え。
x Makefile 設定ファイルを絶対パスに変更。
x LINE 消す。
x 名刺管理
x Twitter 2 消す。
x 睡眠
x cloudfront のBasic認証。
x ttl の設定の調節
x https://docs.aws.amazon.com/ja_jp/AmazonCloudFront/latest/DeveloperGuide/Expiration.html
x ecs task definition の設定。
x alb にドメインを設定
x 状況を整理する必要がある。
x 残りの要件の確認
x どのresources 管理は手動でやるのかterraform でやるのか

2021-10-19

o k8s のdocker 非推奨について調べて読む。dockersim の役割/*{{{*/
/*
CRI(Container Runtime Interface)の完全な実装を含む利用可能なコンテナランタイムの使用を検討するようにと推奨しています
<https://gavin-zhou.medium.com/%E3%81%AA%E3%81%9Ckubernetes%E3%81%AFdocker%E3%82%92%E6%8D%A8%E3%81%A6%E3%81%9F%E3%81%AE%E3%81%8B-124bfce69f47>
[k8s 1.20のDocker非推奨問題でEKSを使用しているプロジェクトが対応すること - Tech Inside Drecom](https://tech.drecom.co.jp/k8s-1_20-problem-for-eks-with-docker/)
[Dockerは非推奨じゃないし今すぐ騒ぐのをやめろ - Cloud Penguins](https://jaco.udcp.info/entry/2020/12/03/172843)
[KubernetesのDockershim廃止における開発者の対応 - inductor&#39;s blog](https://blog.inductor.me/entry/2020/12/03/144834)
*//*}}}*/
x write [scrap about Groff and PDF. How to presentation and LT. ](https://zenn.dev/kis9a/scraps/6591ed66745eb9)
x write [Docker image hashicorp/terraform を使用して、 ローカルで terraform の実行環境を作る。](https://zenn.dev/kis9a/scraps/8f905d56b41485)

2021-10-18

~ 全社会議だけは参加します。 -> 1 week で prod まで。
x ~駅通知~, ハロワ　雇用保険番号
x 転職お断りメール4件。
~ 住民票
~ UFJ 電話番号、住所変更
x (1) groff のドキュメント読み込み
x ~groff sql 拡張~, macro 機能。
x https://www.gnu.org/software/groff/manual/groff.html
x introduction scheme
x learn groff tbl syntax
x watch playlist for groff
x how to landing groff page
x github laberer の terraform コード, 類似プロジェクトのIaCを試す。
~ [AWS-CLIによるAMI作成と削除自動化（JSON取得によるRedmineチケット駆動） - Qiita](https://qiita.com/silva114jp/items/f0de1aa4f2ece78a0af4)
x ミドルウェアのプロビジョニングツールの再度リサーチ。

2021-10-17

x ami の更新
x KMS での認証情報の管理
x mysql_client, redis_client のインストール
x cb の方に踏み台サーバを作る。
x rds の force replace bug は発生しているか？
x tfvars による環境構築方法の汎用化
~ zenn-scraps -> markdown
~ terraform の CI·CD に関しての環境構築をする。
x 見る <[【本編 32:17 より】Infra Study Metup #1「Infrastructure as Codeのこれまでとこれから」 - YouTube](https://www.youtube.com/watch?v=_bLzgd_UlbU)>
~ mysql調査終わらせる。-> レプリケーション手順確認。
# go download[] {{{
$ go install golang.org/dl/go1.10.7@latest
$ go1.10.7 download
# }}}

2021-10-16

# route_table{{{
resource "aws_route_table" "this" {
  vpc_id = aws_vpc.this.id
  tags   = var.service_tags

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.this.id
  }
}

# route_table (public_a)
resource "aws_route_table_association" "public_a" {
  subnet_id      = aws_subnet.public_a.id
  route_table_id = aws_route_table.this.id
}

# route_table (app_a)
resource "aws_route_table_association" "app_a" {
  subnet_id      = aws_subnet.app_a.id
  route_table_id = aws_route_table.this.id
}

# route_table (db_a)
resource "aws_route_table_association" "db_a" {
  subnet_id      = aws_subnet.db_a.id
  route_table_id = aws_route_table.this.id
}

# route_table (public_c)
resource "aws_route_table_association" "public_c" {
  subnet_id      = aws_subnet.public_c.id
  route_table_id = aws_route_table.this.id
}

# route_table (app_c)
resource "aws_route_table_association" "app_c" {
  subnet_id      = aws_subnet.app_c.id
  route_table_id = aws_route_table.this.id
}

# route_table (db_c)
resource "aws_route_table_association" "db_c" {
  subnet_id      = aws_subnet.db_c.id
  route_table_id = aws_route_table.this.id
}
/*}}}*/
/*{{{*/
# subnet (public_a)
resource "aws_subnet" "public_a" {
  availability_zone = "ap-northeast-1a"
  vpc_id            = aws_vpc.this.id
  cidr_block        = "100.32.0.0/20"
  tags              = var.service_tags
}

# subnet (app_a)
resource "aws_subnet" "app_a" {
  availability_zone = "ap-northeast-1a"
  vpc_id            = aws_vpc.this.id
  cidr_block        = "100.32.16.0/20"
  tags              = var.service_tags
}

# subnet (db_a)
resource "aws_subnet" "db_a" {
  availability_zone = "ap-northeast-1a"
  vpc_id            = aws_vpc.this.id
  cidr_block        = "100.32.64.0/20"
  tags              = var.service_tags
}

# subnet (public_c)
resource "aws_subnet" "public_c" {
  availability_zone = "ap-northeast-1c"
  vpc_id            = aws_vpc.this.id
  cidr_block        = "100.32.0.0/20"
  tags              = var.service_tags
}

# subnet (app_c)
resource "aws_subnet" "app_c" {
  availability_zone = "ap-northeast-1c"
  vpc_id            = aws_vpc.this.id
  cidr_block        = "100.32.16.0/20"
  tags              = var.service_tags
}

# subnet (db_c)
resource "aws_subnet" "db_c" {
  availability_zone = "ap-northeast-1c"
  vpc_id            = aws_vpc.this.id
  cidr_block        = "100.32.64.0/20"
  tags              = var.service_tags
}
/*}}}*/
# subnet groups{{{
resource "aws_db_subnet_group" "db" {
  name       = "${var.service}-subnet-group-db"
  subnet_ids = [aws_subnet.db.id]
  tags       = var.service_tags
}
custom_origin_config {
  http_port              = "80"
  https_port             = "443"
  origin_protocol_policy = "http-only"
  origin_ssl_protocols   = ["TLSv1", "TLSv1.1", "TLSv1.2"]
}# }}}
x docker volumes, container, images remove and clean.
x clean up pc for volumes.
x docker groff 環境の構築。
x 環境ごとにディレクトリを分ける。
x cloufront, s3 のログの設定。
x 各リソース環境名を変更する。
x resource apply fixes。
x VPCの冗長化、マルチAZの対応。

2021-10-15

x 納品用の本番環境構築(cb) の詳細を確認
x cb: terraform 命名, ファイル構成の設計。 service-unit-env-app
x 用途に対しての区分の設定。
x サービス関連共通のリソースの定義
x [TerraformでプライベートサブネットとNATゲートウェイを管理する - GeekFactory](https://int128.hatenablog.com/entry/2018/06/28/180504)
x terraform profile を引数で指定できるようにする。
x Markdown to PDF を作る。 -> groff に移行。
x VPC IP 制限確認
x https://www.gnu.org/software/groff/manual/groff.html#Table-of-Contents
x how to use image in groff -> groff $file.ms -T ps > $file.ps; ps2pdf $file.ps
/*{{{*/ Terraform 一時的な待機
/* resource "aws_db_proxy" "use_aurora" { */
/*   name                   = local.rds_proxy_name */
/*   debug_logging          = true */
/*   engine_family          = "MYSQL" */
/*   idle_client_timeout    = 60 */
/*   require_tls            = false */
/*   role_arn               = aws_iam_role.dbproxy.arn */
/*   vpc_security_group_ids = [aws_security_group.aurora.id] */
/*   vpc_subnet_ids         = data.aws_subnet_ids.my_vpc.ids */
/*   depends_on = [ */
/*     aws_rds_cluster_instance.use_aurora, */
/*   ] */


/*   auth { */
/*     auth_scheme = "SECRETS" */
/*     iam_auth    = "DISABLED" */
/*     secret_arn  = aws_secretsmanager_secret.dbproxy.arn */
/*   } */
/* } */

/* resource "aws_db_proxy_default_target_group" "use_aurora" { */
/*   db_proxy_name = aws_db_proxy.use_aurora.name */

/*   connection_pool_config { */
/*     connection_borrow_timeout    = 120 */
/*     max_connections_percent      = 100 */
/*     max_idle_connections_percent = 50 */
/*   } */
/* } */

/* resource "aws_db_proxy_target" "use_aurora" { */
/*   db_proxy_name         = aws_db_proxy.use_aurora.name */
/* #   db_cluster_identifier = aws_rds_cluster.use_aurora.id */
/* #   target_group_name     = aws_db_proxy_default_target_group.use_aurora.name */
/* # } */
/*}}}*/
x ready for explorer code reading.
x IaC CI·CD structure scheme.
x 一時的な構成で terraform の directory 構成をタスク単位に変更。
x aurora_db research.
x Groff preview/*{{{*/
function! Preview()
	let extension = expand('%:e')
	if extension == "ms"
		execute "! groff -ms \"%\" -T pdf > /tmp/op.pdf"
	elseif extension == "tex"
		execute "! pandoc -f latex -t latex \"%\" -o /tmp/op.pdf"
	elseif extension == "md"
		execute "! pandoc \"%\" -s -o /tmp/op.pdf"
	endif
	execute "! zathura /tmp/op.pdf &"
endfunction
/*}}}*/

2021-10-14

" TabLine {{{
function! s:sid_prefix()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

function! s:tb()
  " let s='%#TabLineDir# [%{toupper(fnamemodify(getcwd(), ":t"))}]'
  let s=''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]
    let no = i
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = title
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= ' '.no .':'. title
    let s .= mod
    let s .= '%#TabLineFill#'
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction

let &tabline = '%!'. s:sid_prefix() . 'tb()'

nnoremap <Leader>1 1gt
nnoremap <Leader>2 2gt
nnoremap <Leader>3 3gt
nnoremap <Leader>4 4gt
nnoremap <Leader>5 5gt
nnoremap <Leader>6 6gt
nnoremap <Leader>7 7gt
nnoremap <Leader>8 8gt
nnoremap <Leader>9 9gt
nnoremap <Leader>10 10gt
nnoremap <C-h> :tabprevious<CR>
nnoremap <C-l> :tabnext<CR>
nnoremap <C-w>d :tabclose<CR>
nnoremap <C-w>c :tabnew<CR>
"}}}
" tmux/*{{{*/
if exists("$TMUX")
  let dir= fnamemodify(getcwd(), ":t")
  autocmd VimEnter * call system("tmux rename-window " .dir)
  autocmd VimLeave * call system("tmux rename-window zsh")
endif
/*}}}*/

o groff sytax clean up
x ログイン情報をもらう
x terraform init aurora_db 必要なリソース、リレーションの整理。
x fix tmux color to minimalize.
x ssh command wrap for tmux rename window.
x domain の疎通を確認する
x ALB terraform import and fixes.
x test instance の ami の更新。
x test instance の ネットワーク構成の変更。
x aws-services が、壊れているので更新する。
x pbz
x bastion server の AMI 更新.
x ssh host configuration setting.
x terraform local environment for docker.
x AMIの更新 -> ssh-keygen, ssh config の設定。
x ssm-agent log 確認 -> https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/sysman-agent-logs.html
x ssm cloudwatch logs の設定初期化.

2021-10-13

- vim coc colors 周りのvimscriptを見る。
- read [Hashpalette white paper](https://document.hashpalette.com/HashpalettePaper.pdf)
x sort out tasks and requirements.
~ bastion server test workspace and request check.
x get credential key and schedule to survey db instance.
x clean up manual resource. -> remote bastion, rpcvhosts all.

2021-10-12

x ALBにログの設定.
x (1) タスク整理.
x terraform-bastion initialized.
x /etc/hosts/ の名前解決して、接続のインターフェースをわかりやすく。
x 十分な睡眠が必要
x 一つのキーペアで各インスタンスにログインできる。アクセステスト用のインスタンスの設定。
x SG VPC ローカルIPアドレスによるインスタンスのアクセス制限。
x ssh 周りのコンフィグファイルの調査。
x セキュリティーアップデートのHookの導入を考える。
x 各インスタンスの設定は、bastion server の公開鍵を~/.ssh/autolizeation に追加する。
x 構築の自動化(Ansible, terraform) -> コンテナ化 -> データベース -> ログメトリクス
x ssm -> ssh_key
x ALB + ログの設定

2021-10-11

x ssh - o -> bastion-test-access  の確認。
x ssh -i basetion.pem bastion-template にアクセスして設定を書く。ssh-keygen で鍵作成
x ssh -i bastion.pem bastion-test-access インスタンスにssh して鍵を配置する。
x setuped host name alias
x tmux 入れとく
x geth command  についての学習。
x memos/ ディレクトリの構造変更、リポジトリの分断化。 -> memos/category/adadf.md, ex: business/
~ Logrotate ~/.zsh_history
x Auto-scaling group の修正。
x AWS Backup EC2 の調査。
~ EC2の権限を特定のインスタンスに絞りたい。
~ zennの記事をtwitterにかっこよく投稿する。 -> 動的OGPとバックエンド。
x 公開鍵認証。SSH 周りの設定ファイル群を抑える。
x [Ethereum(Geth) RPiC リクエスト Invalid host specified」対処法](https://tech.gootablog.com/article/geth-rpc-error/)
x [雄みを感じるとどうなるか知ってるか - 雑記帳](https://zawariatlas.hatenablog.com/entry/2019/05/31/223302)
x [勝手に世間のために生きている人たち - Neo's World](https://neos21.net/blog/2021/10/11-01.html)
~ [既存EC2をベースに起動テンプレートを作る | Oji-Cloud](https://oji-cloud.net/2019/08/05/post-2597/)
- AMI の開発方法を調べる。 AMIとEC2 template の更新用のパッチ。シェルスクリプト。
- 自動起動と停止のterraform EC2 + CloudWatch + SSM. - https://dev.classmethod.jp/articles/tsnote-ec2-ssm-automation/, https://agohack.com/scheduled-start-and-stop-ec2-with-aws-cloudwatch-event/

2021-10-10

x 詳細Bitcoin の購入
x 詳細Bitcoin の index を整理する
x 1 read bitcoin-cli section
~ 読む ssh-fzf を作ってみる/*{{{*/
```
function ssh-peco() {
  local user="ec2-user"
  local host=$(aws ec2 describe-instances \
                 --region ap-northeast-1 \
                 --output json \
                 --filters "Name=instance-state-code,Values=16" | \
               jq -r '.Reservations[].Instances[] | [.Tags[] | select(.Key == "Name").Value][] + "\t" + .InstanceType + "\t" + .PrivateIpAddress + "\t" + .State.Name' |\
               awk '{printf "%-30s %-15s %-15s %-10s\n",$1,$2,$3,$4}' |\
               sort |\
               peco | awk '{print $3}')
  ssh -i ~/.ssh/key/auth-dev.pem \
      -o StrictHostKeyChecking=no \
      -o UserKnownHostsFile=/dev/null \
      "$user@$host"
}
```
/*}}}*/
x vim-gtd の ハイライトの無効化、DONE, STOP の時。
x 髭をソル JK を拾わない。
x Chef と Ansible を比較する。
x 開発、アウトプット支援用のインスタンス -> dev1, domain: dev1.kis9b.com.
x 基本的な構成から, EC2インスタンスのデプロイ with terraform.
x 基本的な構成から
x (1) freee のプロフィールの情報登録。 必要なもの振込先口座, 社保対応,基礎年金,現住所,住民票住所,雇用保険番号,484806770
x wa1 のインスタンスをオートスケールさせる。スケジュール停止、起動。
x ec2 スケジュール停止、起動に関しての投稿 -> [diodonfrost/terraform-aws-lambda-scheduler-stop-start を使って、EC2インスタンスの起動、停止スケジュールを管理。](https://zenn.dev/kis9a/scraps/988fbe1b495821)
x dev1 インスタンスの要件を整理する -> <https://gist.github.com/kis9a/07a95ff4291fd06e9492987c741af251>
~ update-ami.bash -> get instance-template id and create image -> output ami-id.json
~ update-template.bash -> read ami-id.json -> update template ami field.
~ leetcode-vim, leetcode-vscode 等, エディタのインテグレーションを学習プロセスに含める。 -> leetcode 標準が最適解。
x ELM もキャッチアップしとくか？ https://github.com/phenax/esbuild-plugin-elm https://qiita.com/niso1985/items/c4084d996b89582aaf1c https://qiita.com/IzumiSy -> プライベートリポジトリの作成、まだインプットしない。

2021-10-09

x xssm login のIaC 化
x alb の https 化の IaC。
~ cv を description で共有。
~ terraform-dev-instance 開発用のインスタンスのIAC. -> auto-scaling, AMI. -> 開発用インスタンスは、運用見合わせ
x 社内のtimes に通知する。
x wa1 のインスタンスをssm ログインできるようにする。
x alb のhttps化 zenn に ポストする。-> [EC2 + ALB + Route53 ... 構成を terraform で適当に管理してみる。](https://zenn.dev/kis9a/scraps/ffbe3f8ebfc43f)
x ssm login に関して zenn にポストする -> [SSM で EC2 インスタンスにログインできるようにする。](https://zenn.dev/kis9a/scraps/72f205eed406ce)
x 動作確認 & 投稿 [diodonfrost/terraform-aws-lambda-scheduler-stop-start を使って、EC2インスタンスの起動、停止スケジュールを管理。](https://zenn.dev/kis9a/scraps/988fbe1b495821)
/* provisioner "remote-exec" { *//*{{{*/
/*   inline = [ */
/*     "sudo su -", */
/*     "apt update", */
/*     "apt install lighttpd -y", */
/*     "service lighttpd start" */
/*   ] */

/*   connection { */
/*     type        = "ssh" */
/*     host        = self.public_ip */
/*     user        = "ubuntu" */
/*     private_key = file("./wa1.pem") */
/*   } */
/* } */
/*}}}*/
x [CloudFront+ALB+S3でリダイレクト+静的サイトホスティングする環境をTerraformで作ってみた - Qiita](https://qiita.com/t-okibayashi/items/49b3968e5b686af663ba)

2021-10-08

x ec2 auto-scaling の設定。
x AMIアタッチ用の権限調査。 -> PassRole add to IAM Policy.
x テンプレートに AMI ロールを設定。
x auto-scaling の動作確認。test-in, test-out schedule.
x 不要なインスタンスの終了, アクセステスト用のinstance の作成。
x AMIの開発用のインスタンス。
~ AMIイメージの更新フロー, 保存される状態を動作を確認する。 -> shell scirpt 化。
x LB HTTPS化　検証用ドメインの証明書の発行。
x LB HTTPS 化 -> 関連性の整理。

2021-10-07

x clean up tasks yesterday.
x data extract script and task.
x setup aws SSM login.
x ssm 接続用ローカルプラグイン等の導入。
x global ip を調べて、アクセス制限。 curl ifconfig.io
x インスタンスにsshエージェント等の設定。ロール割り当て。
~ terraform-inventory を試す。
x 名刺の肩書きをどのようにするか。 -> ...事業部、エンジニアポジション
x provider のprofile 有効範囲を調べる。-> 他のアカウントにIaCしてしまった。
x ssm のコード化。

/*
TerraformのprovisionerにはAnsibleがないが terraform-inventory が 
.tfstateファイルからdynamic inventoryを生成しAnsibleでのterraformリソースの構成管理を可能にしてくれるようなので試してみた。 

https://7me.nobiki.com/2020/04/02/sar-command-memo/
*/

2021-10-06

x ALB の導入。
~ monit と system.d に関して見る。
x Watch List [くろかわこうへいのAWS講座VPC編](https://www.youtube.com/watch?v=mHi2yFWLz9M) -> /memos/vpc.md
x scp local and docker remote.
x Go I/O の抽象性 見る -> [Goから学ぶI/O](https://zenn.dev/hsaki/books/golang-io-package)
x fs pacakge のコードリーディング
x fs pushed tag:v0.1.0
x ALB とドメインの紐付け。
~ scheme fs extends for embed and media.
~ testnet の中身をみる。プロセスとかサービスとかログとかみる。
~ vs command embed statics and build to binary and distribute.

2021-10-05

~ 個人ルートアカウント add MFA for the root user to improve security for this account.
x youtube-dlで情報集め -> 通勤時ぐいおん用
x watch [エンジニアとおカネの話【M3 Tech Talk 第156回】 - YouTube](https://t.co/ICpYhcU919?amp=1)
x terraform VPC 作成, alb の設定。
x terraform init for
x Satoshi Nakamoto https://bitcoin.org/bitcoin.pdf -> kindleに送る。
x 個人AWSアカウントの設定,認証。
x blockchain の用語を整理してメモにまとめる。
~ kindle に送るを自動化、github リポジトリと連携。
x freee のプロフィール編集。
/* o 冗長な構成でVPCからAWSコンソールからマニュアルでアプリケーションを組んでみる。 */
//  https://techblog.blockchain.bitflyer.com/entry/2020/04/22/190025
// ffmpeg -i test.mp4 -vframes 1 -vf "scale=360:-1" small_thumnail.png

2021-10-04

~ 単純なテキストファイルのフォーマッターの追加。 -> ない
x elm examples の収集。
~ 読む 20:00 ~ https://tech.fressets.com/2289/ -> わからん
x https://github.com/budougumi0617/leetgode を試す。 -> generate 問題文の整形が必要。使わない。
x vim-gtd の syntax-hilight の match pattern の fix と追加。
x sysstat について調べる。
x 社 GitHub リポジトリの概要の把握といくつかのプロジェクトのローカル環境の構築。
x テストインスタンスにログインしていろいろ見る。
x scp command について調べる -> local での検証。TODO: how to scp client.
x プラットフォームと情報発信の関連性。
x rabbit-mqって何？ SQS -> [ Documentation: Table of Contents](https://www.rabbitmq.com/documentation.html)
// [いいねが欲しけりゃコードを書くな - Qiita](https://qiita.com/fmfm_mdk/items/61d86fef2ed26656369d)
// Zenn Books と知名度、わかりやすい記事を書くという幅の狭さ。好きなトピックに振れるか？
// プラットフォームならではの圧力。拡散リスク。 -> 自分のブログ等 -> の集客の流れがいいかも。
// articlesを自分のサイトに載せる scrap-box 的な UI インターフェースも。

~ research [GitHub - skygragon/leetcode-cli: A cli tool to enjoy leetcode!](https://github.com/skygragon/leetcode-cli)
~ 社 インフラ ~ バックエンドの構成の理解 -> 情報が少ないので、後で。
x grpc のロードバランシングについてみる - [gRPCアプリをAWS ELBで負荷分散してみた | DevelopersIO](https://dev.classmethod.jp/articles/balancing-grpc-app-by-elb/)
x Load balancer 概要復習 -> https://docs.aws.amazon.com/ja_jp/elasticloadbalancing/latest/application/introduction.html
x OSI model のメモ, tcp/ip model.
x leave home AM: 7:30

// service --status-all
// タスクターゲットは，ある特定のファイルを作るためではなく，作業を行うコマンドとして利用したい場合に用いられます． 
// .PHONYは，タスクターゲットを宣言するためのターゲットです

2021-10-03

~ (1) leetcode-vim research. -> ~https://github.com/skygragon/leetcode-cli~
x (1) イーサリアム、ビットコインの違い、エクスプローラーとは。
x (1) ブロックチェーンのトランザクションについて詳しく。
x (1) freee login and 勤怠申請。
x (1) hp mail-check and reply.
x GitHub follow topic の整理
x pc change to light mode.
x syntax hilight の色変更、追加.
x 交通情報の整理 -> screen shot.
x block-chain系の書籍の整理. -> kindleで読めるやつがいい, Mastering bitcoin.
x leetcode の問題の整理. -> 問題のリスト化. -> GitHub gist. ref solution: https://github.com/austingebauer/go-leetcode
x minecraft build basic homes and gauge.


2021-10-02

x money schemed. 20 -> ipad 8, next_funds 8. -> 見える化
x cleanup subscriptions.
x changed main pc ops.
x research for block-chain roadmap. -> https://github.com/OffcierCia/DeFi-Developer-Road-Map
x バリデーションの重複処理に関して, frontend, backend. -> https://qiita.com/isaaac/items/4ca28057a45dddb14a64
x repository visibility. -> 一年以上前のプロトタイププライベートやフォークはリサイクル or 消す運用。
x minecreaft command listed.
x 情報発信に関しての整理. -> Go, JavaScript, IaC, block-chain で続行
x 情報発信の種類、技術記事の種類について調べる。 -> やってみた、できた、tips, なぜか？、翻訳、推奨。

2021-10-01

x tasks for eip
x first time to go
