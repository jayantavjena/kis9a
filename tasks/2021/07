[できた！S3 オリジンへの直接アクセス制限と、インデックスドキュメント機能を共存させる方法 | DevelopersIO](https://dev.classmethod.jp/articles/directory-indexes-in-s3-origin-backed-cloudfront/)
https://github.com/twstewart42/terraform-aws-cloudfront-s3-website-lambda-edge
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXUOTVVU94CF8"
            },
            "Action": "s3:GetObject",
 
        }
    ]
}

- [CloudFront + S3 で静的サイトを運用する際の注意点 - Qiita](https://qiita.com/ooxif/items/d28b7caf72bf5290588c)
https://re-engines.com/2020/03/02/go%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFgin%E3%81%A7%E3%83%9F%E3%83%89%E3%83%AB%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%AD%E3%82%B0%E3%82%A4/
- [ginを最速でマスターしよう - Qiita](https://qiita.com/Syoitu/items/8e7e3215fb7ac9dabc3a)
- [Future Corp · GitHub](https://github.com/future-architect)
- go-migrate
- Encode処理をすると次のような形で出力されます。
- $2a$10$8sKUrdvJn7gpWmMH2qfRduF.vhe2n3diyzf8CvY8GtTsmNJ6HRnBe
- この中に
- アルゴリズム
- アルゴリズムの詳細(回数とか)
- Salt
- Hashed Password

cros origin golang

- [【HTTPヘッダー】CORSの仕組みとGo+GinによるCors設定の実践 - Qiita](https://qiita.com/ichi_zamurai/items/97e7e93bf398f98e719e)
- [Webアプリ初心者がGo言語でサーバサイド（2. パスワード認証機能の実装） - Qiita](https://qiita.com/wsuzume/items/8b282d553a4185cbac5c)
また、サーバ側で受け取ったパスワードは決して平文で保管してはいけません。通信路上でパスワードを盗み見ることができないと分かれば、悪い人は必ず空き巣に入って鍵を盗みに来ます。要するにデータベースへの不正侵入を試みるわけで、マズいことにそれはときどき成功してしまいます。絶対無敵の防壁を作ることは不可能ですし、仮に作れたとしてもぶっちゃけ内部犯やスパイは原理的に防ぎようがないので、現実的には「盗み見られても構わないようにパスワードを加工する」という手段が用いられます。これにはbcryptという方式のハッシュが使われます。
bcrypt は計算量の大きい一方向ハッシュです。ここでSHA256などの高速なハッシュ関数を使ってしまうと、ありがちなパスワードに対するレインボーテーブル（逆引き辞書のようなもの）を作成されて破られてしまう可能性がありますが、bcrypt はわざと計算に時間をかけているため、レインボーテーブルによる攻撃に耐性があります。
[    スタートアップが「GAE/Go」を採用する上で知っておきたいこと　Next Currencyが語る導入までの道](https://logmi.jp/tech/articles/304030)
[](https://qiita.com/butterv/items/ca330d27fe51a6bf7a3d[coc-explorer]-1-コストの指定)
- [【bcrypt】ユーザーパスワードを本当に安全に保存する方法 | 株式会社LIG](https://liginc.co.jp/377191)

GenerateFromPassword
CompareHashAndPassword

brew install sequel-ace
[Building a REST API With Go Gin - Part 2: Login/Register/Authentication - YouTube](https://www.youtube.com/watch?v=XxCr4QOD5Hs)
https://www.postgresql.org/ftp/pgadmin/pgadmin4/v5.4/macos/
alias curld="curl -X DELETE "
alias curlt="curl -X PUT -H "Content-Type: application/json" -d "
alias curlp="curl -X PUT -H "Content-Type: application/json" -d "
- [curl-to-Go: Convert curl commands to Go code](https://mholt.github.io/curl-to-go/)

[Go で作る SPA 用バックエンド - l12a](https://lnly.hatenablog.com/entry/2020/02/26/225722)
- [【Go】ginを使った一連の認証実装をまとめる](https://zenn.dev/someone7140/articles/02181927acd040)
[404 File Not Found](https://note.crohaco.net/2019/golang-gin/tasks/2021/07preparing)

func sessionCheck() gin.HandlerFunc {
    return func(c *gin.Context) {

        session := sessions.Default(c)
        LoginInfo.UserId = session.Get("UserId")

        // セッションがない場合、ログインフォームをだす
        if LoginInfo.UserId == nil {
            log.Println("ログインしていません")
            c.Redirect(http.StatusMovedPermanently, "/login")
            c.Abort() // これがないと続けて処理されてしまう
        } else {
            c.Set("UserId", LoginInfo.UserId) // ユーザidをセット
            c.Next()
        }
        log.Println("ログインチェック終わり")
    }
}
- [GitHub - x-color/tools](https://github.com/x-color/tools)
axios https://qiita.com/melty_go/items/1432da74804a9dca112a
- [Go Code Samples &nbsp;|&nbsp; YouTube Data API &nbsp;|&nbsp; Google Developers](https://developers.google.com/youtube/v3/code_samples/go)
ログイン済みであれば、ログイン画面にアクセスしてもホーム画面にリダイレクトされる
ログイン済みでなければ、どのページにアクセスしてもログイン画面にリダイレクトされる
ログイン済みでない場合、アクセスしたページがレンダリングされる前にリダイレクトされる
操作中にログインが切れた場合、ログイン画面にリダイレクトされる。

	// // ユーザー登録画面
	// router.GET("/signup", func(c *gin.Context) {
	// 	c.HTML(200, "signup.html", gin.H{})
	// })

	// // ユーザー登録
	// router.POST("/signup", func(c *gin.Context) {
	// 	var form User
	// 	// バリデーション処理
	// 	if err := c.Bind(&form); err != nil {
	// 		c.HTML(http.StatusBadRequest, "signup.html", gin.H{"err": err})
	// 		c.Abort()
	// 	} else {
	// 		username := c.PostForm("username")
	// 		password := c.PostForm("password")
	// 		// 登録ユーザーが重複していた場合にはじく処理
	// 		if err := createUser(username, password); err != nil {
	// 			c.HTML(http.StatusBadRequest, "signup.html", gin.H{"err": err})
	// 		}
	// 		c.Redirect(302, "/")
	// 	}
	// })


GitHub - herusdianto/gorm_crud_example: GoLang, GORM &amp; Gin CRUD Example](https://github.com/herusdianto/gorm_crud_example)
- [glide - パッケージ管理のお困りの方へ - - Qiita](https://qiita.com/usk81/items/8e192e68d6b18bec3b4a)

password関数で変更しようとした
rootのpasswordを変更に関する多くの解説記事ではpassword関数で変更しようとしていますが、

mysql> update user set password=password('********') where user = 'root';
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '('********') where user = 'root'' at line 1
password関数は廃止されていた
MySQL8でユーザーのパスワードの変更 / リセット方法
はい、ありがとうございます。
ver. 5.6.7時点でどうやら廃止されたようでした。

mysql> set password for 'root'@'localhost' = '********';
Query OK, 0 rows affected (0.02 sec)

sequel pro caching_sha2_password fail
sudo mysqld_safe –skip-grant-tables

mysql> set password for 'root'@'localhost' = '****';
Query OK, 0 rows affected (0.00 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)

```
#! /bin/bash

function rec {
    for FILE in `ls ${2}`
        do
           local FULL=${2}/${FILE}
           if [ -f $FULL ]; then $1 $FULL
           elif [ -d $FULL ]; then rec $1 $FULL
           fi
        done
}

rec $1 `pwd`/${2}
```
tput
- [GitHub - jandelgado/golang-ci-template-github-actions: example for golang project using github actions](https://github.com/jandelgado/golang-ci-template-github-actions)
redirect te.kis9a.com/
git clone alias function -u kis9a/some, without https://
cat kis9a/kis9a/path/file

provider "aws" {
  profile                = "kis9a-src"
  skip_region_validation = true
  alias                  = "us-east-1"
}

terraform {
  backend "s3" {
    region                 = "ap-northeast-1"
    encrypt                = true
    key                    = "kis9a-src.tfstate"
    bucket                 = "kis9a-terraform-states"
    skip_region_validation = true
  }
}



https://github.com/lucheholdings/terraform_static_site
https://github.com/users/kis9a/projects/1?fullscreen=true
<https://qiita.com/greenteabiscuit/items/282ae184b3aad7edf92f>
- [](https://medium.com/wesionary-team/create-your-first-rest-api-with-golang-using-gin-gorm-and-mysql-d439bcc6f987)
https://yhidetoshi.hatenablog.com/entry/2019/12/08/162853#ECRに登録するGoコンテナを作成する
[go-ginでサクッとRESTAPIを構築する - Qiita](https://qiita.com/shiei_kawa/items/eddf48287455380f618f)
https://github.com/riboseinc/terraform-aws-s3-cloudfront-website
https://github.com/cloudmaniac/terraform-aws-static-website
/.github/workflows/terraform.yml :on change sources/terraform/ - creaet aws resources
/.github/workflows/deploy.yml :on change dist branch/ -> upload s3 files
https://dev.classmethod.jp/articles/static-web-with-cf-s3-tf/
migreate site to s3+cloudfront 
because can't caching assets in website served from GitHub pages
> [Caching assets in website served from GitHub pages - Web Applications Stack Exchange](https://webapps.stackexchange.com/questions/119286/caching-assets-in-website-served-from-github-pages)
[S3にアップロードされた画像にCache-Controlを付ける方法3選 - Qiita](https://qiita.com/KeitaMoromizato/items/b3fef6a2c9bc87662740)
最近ISRをしていたサイトをSSR + FastlyのSWRキャッシュに切り替えましたがISRのときとほぼ変わらずに動いています。一つ懸念点があるとすればNextjsはSSRにするとprefetchがされなくなるので、キャッシュヒットしない場合のページ遷移が遅くなります。
- [高専生が一人でWebサービスを開発したのでリリースまでのストーリーを書きました！](https://zenn.dev/makiart/articles/6b9c25ba40af1c955c87)
[lambda@edge上でwasmを使用した画像リサイズにおける速度](https://zenn.dev/takenokogohan/articles/4d9d1c4d3a5b26)
[GitHub - flowchartsman/swaggerui: Embedded, self-hosted swagger-ui for go servers](https://github.com/flowchartsman/swaggerui)
[GitHub - flowchartsman/shttp: A stronger, better net/http server with sane defaults](https://github.com/flowchartsman/shttp)
https://github.com/wricardo/gomux
```

jobs:
  zenn:
    runs-on: ubuntu-20.04
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
    steps:
      - name: install go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: version
        run: go version
      - name: go get aws-services
        run: go get github.com/kis9a/aws-services
      - name: checkout
        uses: actions/checkout@v2
        with:
          repository: kis9a/kis9a
          path: kis9a
      - name: update zenn article
        run: |
          cd kis9a/
          git config user.name "kis9a"
          git config user.email "kis9ax@gmail.com"
          aws-services jp -t zenn/articles/aws-services.template -o zenn/articles/aws-services.md
          ls -la zenn/articles
          git add zenn/articles/aws-services.md
          git commit -m "zenn: update aws-services"
          git push -f -q https://kis9a:$REPO_TOKEN@github.com/kis9a/kis9a.git
```

                    git clone https://kis9a:$REPO_TOKEN@github.com/kis9a/kis9a

          # git checkout -b api-version-$COMMIT
          # touch new-file.sh
          # git add new-file.sh
          # git commit -m "Add new file"
          # git remote -v # Prints:
          # # origin ***github.com/owner/my-repo.git (fetch)
          # # origin ***github.com/owner/my-repo.git (push)
          # git push --set-upstream origin api-version-$COMMIT # This does not work
          # git push --set-upstream httpset//user:$GITHUB_TOKEN@github.com/owner/my-repo api-version-$COMMIT # This does not work either

github project export to tasks/2021/*.md

- [GitHub Actionsのワークフロー構文 - GitHub Docs](https://docs.github.com/ja/enterprise-server@2.22/actions/reference/workflow-syntax-for-github-actions)
- [golangでgitのサブコマンドを作ろう - Qiita](https://qiita.com/mziyut/items/73be60dd39020c3507fc)
https://github.com/tj/git-extras
- [歴史の長いプロダクトでAmazon Linux 2への移行をやり遂げた話 | 株式会社ヌーラボ(Nulab inc.)](https://nulab.com/ja/blog/backlog/amazon-linux-2-migration/)
- [[Go]画像をリサイズして、dataサイズを圧縮する](https://zenn.dev/a_ichi1/articles/c2c86b3e8017e7)
- [PMMとは？ PdMとどう違う？ SmartHR 重松さんが徹底解説【2021年最新Ver】 | キャリアハック](https://careerhack.en-japan.com/report/detail/1450)
- [Go で使う Makefile の育て方](https://zenn.dev/rosylilly/articles/202105-go-makefile)
- [Aduca &mdash; a dull canvas](https://aduca.org/)

  connection {
    type        = "ssh"
    user        = "centos"
    private_key = file(local.private_key_file)
    host        = self.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install ansible2 -y",
      "sudo yum install git -y",
    ]
  }

incremental ssg with pure js
Claire de Luns
https://oji.netlify.app/
https://www.nippehome-online.jp/diypaint/it_2kg.html
- [ページが見つかりませんでした &#8211; 壁紙屋本舗](https://kabegamiyahonpo.com/blog/howto/howto-paint/chintai_painting.htmltasks/2021/07paintable)
```
package costexplorer

import (
    "github.com/aws/aws-sdk-go/aws"
    "github.com/aws/aws-sdk-go/service/costexplorer"
    "github.com/aws/aws-sdk-go/service/costexplorer/costexploreriface"
)

type CostExplorer struct {
    session costexploreriface.CostExplorerAPI
}

func NewCostExplorer(session costexploreriface.CostExplorerAPI) CostExplorer {
    return CostExplorer{
        session: session,
    }

}

func (c CostExplorer) GetCostForDaily(time_start string, time_end string, metrics []string) (*costexplorer.GetCostAndUsageOutput, error) {
    granularity := aws.String("DAILY")
    metric := aws.StringSlice(metrics)
    resp, err := c.session.GetCostAndUsage(&costexplorer.GetCostAndUsageInput{Metrics: metric, Granularity: granularity, TimePeriod: &costexplorer.DateInterval{Start: aws.String(time_start), End: aws.String(time_end)}})
    if err != nil {
        return nil, err
    }
    return resp, nil
}
func (c CostExplorer) GetCostDetail(time_start string, time_end string, metrics []string) (*costexplorer.GetCostAndUsageOutput, error) {
    granularity := aws.String("DAILY")
    metric := aws.StringSlice(metrics)
    group := costexplorer.GroupDefinition{Key: aws.String("SERVICE"), Type: aws.String("DIMENSION")}
    resp, err := c.session.GetCostAndUsage(&costexplorer.GetCostAndUsageInput{GroupBy: []*costexplorer.GroupDefinition{&group}, Metrics: metric, Granularity: granularity, TimePeriod: &costexplorer.DateInterval{Start: aws.String(time_start), End: aws.String(time_end)}})
    if err != nil {
        return nil, err
    }
    return resp, nil
}
```
https://techblog.zozo.com/entry/aws-billing-bot

プロビジョニングツール：CloudFormation(CFn)、Serverless Application Model(SAM)

作成されたアプリケーションはLambda上で動作しており、CloudWatch Eventsでcronを平日10時に設定してLambdaを動かしています。また、AWSの料金の取得はAWSのCost Explorer APIを使って取得しています。

Go言語ではAWS SDKが提供されているのでGetCostAndUsage

https://github.com/mercari/tfnotify
<https://zenn.dev/ryo_kawamata/articles/improve-dependabot-pr>
@dependabot ignore this minor version
- [Go 1.16以降はGitHub版Dependabotを使った方がよさそう - くりにっき](https://sue445.hatenablog.com/entry/2021/03/20/075551)
- https://aws.amazon.com/jp/cdp/ec-container/
- github actions can checkt terraform state on infra.bonp.me.
- [現代的なウェブアプリケーションの構築](https://aws.amazon.com/jp/getting-started/hands-on/build-modern-app-fargate-lambda-dynamodb-python/?sc_icampaign=acq_jp_getting-started-handson-202010-build-modern-app-fargate-lambda-dynamodb-python&sc_language=jp&sc_icontent=awssm-6350&sc_iplace=ribbon&trk=ha_ribbon_acq_jp_getting-started-handson-202010-build-modern-app-fargate-lambda-dynamodb-python)

- [【docker buildのマニアックすぎる狂宴】Container Build Meetup #1に参加してきた #container_build | DevelopersIO](https://dev.classmethod.jp/articles/docker-build-meetup-1/)

- [2019年1月にAWS Fargateが大幅値下げしたのでEC2との価格比を確認してみた | DevelopersIO](https://dev.classmethod.jp/articles/compare-fees-for-fargat-and-ec2-2019-1/)

- https://docs.google.com/forms/d/e/1FAIpQLSfl4UH7DHiU2uZkj45Z-Pd3TTDgQ_B252bsGDbB5EFnvGsk3w/viewform

- Amazon ECS では、アプリケーション、サービス、バッチ処理を実行する Docker コンテナを簡単にデプロイ、管理、スケーリングできます。Amazon ECS は、リソースのニーズに基づいてクラスター全体にコンテナを配置し、Elastic Load Balancing、EC2 セキュリティグループ、EBS ボリューム、IAM のロールなどの使い慣れた機能と統合されます。

FROM 
https://future-architect.github.io/articles/20210408/
https://future-architect.github.io/articles/20210409/
https://future-architect.github.io/articles/20210617a/
https://future-architect.github.io/articles/20200327/
https://future-architect.github.io/articles/20210604a/
https://future-architect.github.io/articles/20200207/
https://github.com/9sako6/imgcmp
go get golang.org/x/tools/cmd/godoc

Client    Response   ResponseWriter
Response  Header     HandlerFunc
          Cookie     ServerMux

unicode.go
serverless
<https://github.com/apex/up-examples/blob/master/oss/golang-api/main.go> <https://apex.sh/docs/up/links/>
vCPU: 2
Intel(R) Xeon(R) Platinum 8175M CPU @ 2.50GHz (最大3.1GHz)
メモリ: 8 GiB
ストレージ: 1 x 75 GiB NVMe SSD
OS: Amazon Linux 2
　今回、m5d.large インスタンスを採用したのは次の理由からです:

汎用ワークロード向けインスタンスである
Docker Composeを使うため、メモリに余裕をもたせて8GB用意する
MySQLでストレージがボトルネックになることを少しでも抑えるため、NVMe SSD を使う

```diff

-    print('平均秒数：%f' % svg)
+    # 標準偏差を計算
+    sdev = 0.0
+    for t in times:
+        sdev += (t - svg) ** 2
+    sdev = math.sqrt(sdev / len(times))
+    print('平均秒数：%f, 標準偏差: %.1f' % (svg, sdev))

ユーザー空間で実行されてる時間（user time)
カーネル空間で実行されている時間（system time）
ファイルやネットワークなどの入出力結果を待っている時間（idle time）
```

https://github.com/heppu/gkill
https://github.com/apex
https://github.com/b4b4r07/go-finder
https://nojov.kou-pg.com/
//go:embed message.txt

```
func Filter[T any](a []T, f func(T) bool) []T {
    var n []T
    for _, e := range a {
        if f(e) {
            n = append(n, e)
        }
    }
    return n
}

func Map[T any, M any](a []T, f func(T) M) []M {
    n := make([]M, len(a), cap(a))
    for i, e := range a {
        n[i] = f(e)
    }
    return n
}
```
https://go.googlesource.com/go https://go2goplay.golang.org/
「TLS」をつけたhttp.ListenAndServeTLSを実践では使うことになるかもしれません。こちらはセキュリティーの話
try watch https://esbuild.github.io/api/#watch
https://zenn.dev/mohira/scraps/f99095d2fd74da
https://github.com/nitaking/gitmoji-c
https://github.com/BrightLocal/FrontBuilder/
http://ghv.artzub.com/
- onclick import javascript
- [JavaScript の静的インポートと動的インポート &#8211; ラボラジアン](https://laboradian.com/js-static-and-dynamic-import/)
- [全モダンブラウザで使えるJavaScriptのdynamic import（動的読み込み） - Qiita](https://qiita.com/tonkotsuboy_com/items/f672de5fdd402be6f065)
- random images/ align
- tools/ pages initialize
- fix pop out styles and images raito
- create stroybook and confirm pages

python.ms/rust-or-go/#_2-用途

https://github.com/mattn/vim-filewatcher
- [Go で Vim プラグインを書く - haya14busa](http://haya14busa.com/vim-go-client/)
mkup replace
```
au *.md notifyEnterMarkdown

function notifyEnterMarkdown()
  getbuffer()
  cmd("binray update")
endfunction

----

func binrayUpdate(current string, paths []string) {
forr p paths {
http.update(parseMarkdown(p))
}
}

func parseMarkdown(path string) string {
return to_markdown(path)
}
```

- when #base + #match = type file, 
- https://okdyy75.github.io/freelance-chart
- ignore dot folders
- [GitHub Actions で別のリポジトリに git push する](https://3nan3.github.io/post/2019122201_github_actions/)
- kis9a watch pages/ with .sar.toml
- [golang-test-port/test-port.go at master · coolaj86/golang-test-port · GitHub](https://github.com/coolaj86/golang-test-port/blob/master/test-port.go)
