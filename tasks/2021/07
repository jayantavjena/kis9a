https://www.nippehome-online.jp/diypaint/it_2kg.html
- [ページが見つかりませんでした &#8211; 壁紙屋本舗](https://kabegamiyahonpo.com/blog/howto/howto-paint/chintai_painting.htmltasks/2021/07paintable)
```
package costexplorer

import (
    "github.com/aws/aws-sdk-go/aws"
    "github.com/aws/aws-sdk-go/service/costexplorer"
    "github.com/aws/aws-sdk-go/service/costexplorer/costexploreriface"
)

type CostExplorer struct {
    session costexploreriface.CostExplorerAPI
}

func NewCostExplorer(session costexploreriface.CostExplorerAPI) CostExplorer {
    return CostExplorer{
        session: session,
    }

}

func (c CostExplorer) GetCostForDaily(time_start string, time_end string, metrics []string) (*costexplorer.GetCostAndUsageOutput, error) {
    granularity := aws.String("DAILY")
    metric := aws.StringSlice(metrics)
    resp, err := c.session.GetCostAndUsage(&costexplorer.GetCostAndUsageInput{Metrics: metric, Granularity: granularity, TimePeriod: &costexplorer.DateInterval{Start: aws.String(time_start), End: aws.String(time_end)}})
    if err != nil {
        return nil, err
    }
    return resp, nil
}
func (c CostExplorer) GetCostDetail(time_start string, time_end string, metrics []string) (*costexplorer.GetCostAndUsageOutput, error) {
    granularity := aws.String("DAILY")
    metric := aws.StringSlice(metrics)
    group := costexplorer.GroupDefinition{Key: aws.String("SERVICE"), Type: aws.String("DIMENSION")}
    resp, err := c.session.GetCostAndUsage(&costexplorer.GetCostAndUsageInput{GroupBy: []*costexplorer.GroupDefinition{&group}, Metrics: metric, Granularity: granularity, TimePeriod: &costexplorer.DateInterval{Start: aws.String(time_start), End: aws.String(time_end)}})
    if err != nil {
        return nil, err
    }
    return resp, nil
}
```
https://techblog.zozo.com/entry/aws-billing-bot

プロビジョニングツール：CloudFormation(CFn)、Serverless Application Model(SAM)

作成されたアプリケーションはLambda上で動作しており、CloudWatch Eventsでcronを平日10時に設定してLambdaを動かしています。また、AWSの料金の取得はAWSのCost Explorer APIを使って取得しています。

Go言語ではAWS SDKが提供されているのでGetCostAndUsage

https://github.com/mercari/tfnotify
<https://zenn.dev/ryo_kawamata/articles/improve-dependabot-pr>
@dependabot ignore this minor version
- [Go 1.16以降はGitHub版Dependabotを使った方がよさそう - くりにっき](https://sue445.hatenablog.com/entry/2021/03/20/075551)
- https://aws.amazon.com/jp/cdp/ec-container/
- github actions can checkt terraform state on infra.bonp.me.
- [現代的なウェブアプリケーションの構築](https://aws.amazon.com/jp/getting-started/hands-on/build-modern-app-fargate-lambda-dynamodb-python/?sc_icampaign=acq_jp_getting-started-handson-202010-build-modern-app-fargate-lambda-dynamodb-python&sc_language=jp&sc_icontent=awssm-6350&sc_iplace=ribbon&trk=ha_ribbon_acq_jp_getting-started-handson-202010-build-modern-app-fargate-lambda-dynamodb-python)

- [【docker buildのマニアックすぎる狂宴】Container Build Meetup #1に参加してきた #container_build | DevelopersIO](https://dev.classmethod.jp/articles/docker-build-meetup-1/)

- [2019年1月にAWS Fargateが大幅値下げしたのでEC2との価格比を確認してみた | DevelopersIO](https://dev.classmethod.jp/articles/compare-fees-for-fargat-and-ec2-2019-1/)

- https://docs.google.com/forms/d/e/1FAIpQLSfl4UH7DHiU2uZkj45Z-Pd3TTDgQ_B252bsGDbB5EFnvGsk3w/viewform

- Amazon ECS では、アプリケーション、サービス、バッチ処理を実行する Docker コンテナを簡単にデプロイ、管理、スケーリングできます。Amazon ECS は、リソースのニーズに基づいてクラスター全体にコンテナを配置し、Elastic Load Balancing、EC2 セキュリティグループ、EBS ボリューム、IAM のロールなどの使い慣れた機能と統合されます。

FROM 
https://future-architect.github.io/articles/20210408/
https://future-architect.github.io/articles/20210409/
https://future-architect.github.io/articles/20210617a/
https://future-architect.github.io/articles/20200327/
https://future-architect.github.io/articles/20210604a/
https://future-architect.github.io/articles/20200207/
https://github.com/9sako6/imgcmp
go get golang.org/x/tools/cmd/godoc

Client    Response   ResponseWriter
Response  Header     HandlerFunc
          Cookie     ServerMux

unicode.go
serverless
<https://github.com/apex/up-examples/blob/master/oss/golang-api/main.go> <https://apex.sh/docs/up/links/>
vCPU: 2
Intel(R) Xeon(R) Platinum 8175M CPU @ 2.50GHz (最大3.1GHz)
メモリ: 8 GiB
ストレージ: 1 x 75 GiB NVMe SSD
OS: Amazon Linux 2
　今回、m5d.large インスタンスを採用したのは次の理由からです:

汎用ワークロード向けインスタンスである
Docker Composeを使うため、メモリに余裕をもたせて8GB用意する
MySQLでストレージがボトルネックになることを少しでも抑えるため、NVMe SSD を使う

```diff

-    print('平均秒数：%f' % svg)
+    # 標準偏差を計算
+    sdev = 0.0
+    for t in times:
+        sdev += (t - svg) ** 2
+    sdev = math.sqrt(sdev / len(times))
+    print('平均秒数：%f, 標準偏差: %.1f' % (svg, sdev))

ユーザー空間で実行されてる時間（user time)
カーネル空間で実行されている時間（system time）
ファイルやネットワークなどの入出力結果を待っている時間（idle time）
```

https://github.com/heppu/gkill
https://github.com/apex
https://github.com/b4b4r07/go-finder
https://nojov.kou-pg.com/
//go:embed message.txt

```
func Filter[T any](a []T, f func(T) bool) []T {
    var n []T
    for _, e := range a {
        if f(e) {
            n = append(n, e)
        }
    }
    return n
}

func Map[T any, M any](a []T, f func(T) M) []M {
    n := make([]M, len(a), cap(a))
    for i, e := range a {
        n[i] = f(e)
    }
    return n
}
```
https://go.googlesource.com/go https://go2goplay.golang.org/
「TLS」をつけたhttp.ListenAndServeTLSを実践では使うことになるかもしれません。こちらはセキュリティーの話
try watch https://esbuild.github.io/api/#watch
https://zenn.dev/mohira/scraps/f99095d2fd74da
https://github.com/nitaking/gitmoji-c
https://github.com/BrightLocal/FrontBuilder/
http://ghv.artzub.com/
- onclick import javascript
- [JavaScript の静的インポートと動的インポート &#8211; ラボラジアン](https://laboradian.com/js-static-and-dynamic-import/)
- [全モダンブラウザで使えるJavaScriptのdynamic import（動的読み込み） - Qiita](https://qiita.com/tonkotsuboy_com/items/f672de5fdd402be6f065)
- random images/ align
- tools/ pages initialize
- fix pop out styles and images raito
- create stroybook and confirm pages

python.ms/rust-or-go/#_2-用途

https://github.com/mattn/vim-filewatcher
- [Go で Vim プラグインを書く - haya14busa](http://haya14busa.com/vim-go-client/)
mkup replace
```
au *.md notifyEnterMarkdown

function notifyEnterMarkdown()
  getbuffer()
  cmd("binray update")
endfunction

----

func binrayUpdate(current string, paths []string) {
forr p paths {
http.update(parseMarkdown(p))
}
}

func parseMarkdown(path string) string {
return to_markdown(path)
}
```

- when #base + #match = type file, 
- https://okdyy75.github.io/freelance-chart
- ignore dot folders
- [GitHub Actions で別のリポジトリに git push する](https://3nan3.github.io/post/2019122201_github_actions/)
- kis9a watch pages/ with .sar.toml
- [golang-test-port/test-port.go at master · coolaj86/golang-test-port · GitHub](https://github.com/coolaj86/golang-test-port/blob/master/test-port.go)
