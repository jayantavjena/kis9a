Boreal - Build color schemes!
partially persistent headers footer

package main

import (
	"fmt"
	"log"

	"github.com/PuerkitoBio/goquery"
	"github.com/ktr0731/go-fuzzyfinder"
)

type Item struct {
	Title string
	Link  string
}

func main() {
	items, err := getTrends()
	if err != nil {
		log.Fatal(err)
	}
	getInput(items)
}

func getInput(items []Item) {
	idx, err := fuzzyfinder.FindMulti(
		items,
		func(i int) string {
			return items[i].Name
		},
		fuzzyfinder.WithPreviewWindow(func(i, w, h int) string {
			if i == -1 {
				return ""
			}
			return fmt.Sprintf("Track: %s (%s)\nAlbum: %s",
				tracks[i].Name,
				tracks[i].Artist,
				tracks[i].AlbumName)
		}))
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("selected: %v\n", idx)

func getTrends() ([]Item, error) {
	res := []Item{}
	url := "https://qiita.com/"
	doc, err := goquery.NewDocument(url)
	if err != nil {
		return res, err
	}
	fmt.Println(doc)
	items := doc.Find(".p-home_main")
	fmt.Println(items)
	items.Each(func(_ int, item *goquery.Selection) {
		h2 := item.Find("h2")
		title := h2.Text()
		link, _ := h2.Attr("href")
		res = append(res, Item{Title: title, Link: link})
	})
	return res, err
}

// type Track struct {
// 	Name      string
// 	AlbumName string
// 	Artist    string
// }

// tracks := []Track{
// 	{"foo", "album1", "artist1"},
// 	{"bar", "album1", "artist1"},
// 	{"foo", "album2", "artist1"},
// 	{"baz", "album2", "artist2"},
// 	{"baz", "album3", "artist2"},
// }

// idx, err := fuzzyfinder.FindMulti(
// 	tracks,
// 	func(i int) string {
// 		return tracks[i].Name
// 	},
// 	fuzzyfinder.WithPreviewWindow(func(i, w, h int) string {
// 		if i == -1 {
// 			return ""
// 		}
// 		return fmt.Sprintf("Track: %s (%s)\nAlbum: %s",
// 			tracks[i].Name,
// 			tracks[i].Artist,
// 			tracks[i].AlbumName)
// 	}))
// if err != nil {
// 	log.Fatal(err)
// }
// fmt.Printf("selected: %v\n", idx)



- [Terraformをしばらく書いて覚えた個人的なTipsについて | DevelopersIO](https://dev.classmethod.jp/articles/my-terraform-tips/)
 [ecs-terraform/modules at main · machamp0714/ecs-terraform · GitHub](https://github.com/machamp0714/ecs-terraform/tree/main/modules)

resource "google_compute_instance" "instance" {
  name         = "sample-instance"
  machine_type = "n1-standard-1"
  zone         = "asia-northeast1-a"
  tags         = []

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
    }
  }

  network_interface {
    network = "default"
  }

  metadata = {
    ssh-keys = "ansible:${file("./ansible/sshkey/id_rsa.pub")}"
  }

  service_account {
    scopes = ["cloud-platform"]
  }

  provisioner "local-exec" {
    working_dir = "./ansible/"
    command     = "ansible-playbook -i inventory nginx.yaml"
  }
}

Version 管理したい、

勉強会、名刺。

下記解答例のi % 15 == 0はi % 3 == 0 and i % 5 == 0と書いても良い。

for i in range(1, 101):
    if i % 15 == 0:
        print("FizzBuzz")
    elif i % 3 == 0:
        print("Fizz")
    elif i % 5 == 0:
        print("Buzz")
    else:
        print(i)


まず前提として、GitHubへのpushやpullがパスワードで認証できなくなるということが公式で発表されている(参考)。これは2021年8月13日から実施される。

Usage: gh-pages [options]

Options:
  -V, --version            output the version number
  -d, --dist <dist>        Base directory for all source files
  -s, --src <src>          Pattern used to select which files to publish (default: "**/*")
  -b, --branch <branch>    Name of the branch you are pushing to (default: "gh-pages")
  -e, --dest <dest>        Target directory within the destination branch (relative to the root) (default: ".")
  -a, --add                Only add, and never remove existing files
  -x, --silent             Do not output the repository url
  -m, --message <message>  commit message (default: "Updates")
  -g, --tag <tag>          add tag to commit
  --git <git>              Path to git executable (default: "git")
  -t, --dotfiles           Include dotfiles
  -r, --repo <repo>        URL of the repository you are pushing to
  -p, --depth <depth>      depth for clone (default: 1)
  -o, --remote <name>      The name of the remote (default: "origin")
  -u, --user <address>     The name and email of the user (defaults to the git config).  Format is "Your Name <email@example.com>".
  -v, --remove <pattern>   Remove files that match the given pattern (ignored if used together with --add). (default: ".")
  -n, --no-push            Commit only (with no push)
  -f, --no-history         Push force new commit without parent history
  --before-add <file>      Execute the function exported by <file> before "git add"
  -h, --help               output usage information




- [Plugins | Drone](http://plugins.drone.io/)

C++ is the best language for not only competitive but also using to solve the algorithm and data structure problems . C++ use increases the computational level of thinking in memory , time complexity and data flow level. Going with C++ is the most efficient language that teaches you the memory management skills, time complexity of codes and instruction, which will already excel you from the crowd by far and see the real beauty of the language. You will far level above than others if you use this language, it increase you brain capacity to think and solve in terms of memory management level.

// ファイブラリのインポート
importScripts('https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js');

// ファイルのキャッシュ
workbox.precaching.precacheAndRoute([
  {
    url: '/index.html',
    revision: '20210714'
  },
  {
    url: '/app.css',
    revision: '20210714'
  },
  {
  url: '/app.js',
    revision: '20210714'
  },
])

name: destroy

on:
  pull_request:
    branches:
      - main

jobs:
  main:
    runs-on: ubuntu-20.04
    # if: "!contains(github.event.head_commit.message, 'action-destory')"
    # steps:
    # - uses: hashicorp/setup-terraform@v1.2.1
    #   with:
    #     terraform_version: 0.15.3
    # if pull request_branch format destroy-{{.env}}
    # checkout {{env}}
    # on open pull_request: terraform plan --destroy
    # on merge pull_request: terraform destroy {{env}}
    # on merged remove resources workflows/env-{{env}}.yml
    # client auto - git pull.


AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY

  backend "s3" {
    {{- range . }}
      {{- $is_str := eq .Type "string" }}
      {{ .Name }} = {{ if $is_str -}}
        "{{- .Default -}}"
      {{- else -}}
        {{- .Default -}}
      {{- end }}
    {{- end }}
  }



terraform {
  backend "remote" {
    organization = "evolany-infra"

    workspaces {
      name = "workspace"
    }
  }
}

- [Write Blog Every Week](https://write-blog-every-week.netlify.app/)
- [GitHub - machamp0714/info_app](https://github.com/machamp0714/info_app)
- [GitHub - laster18/1chan: GoのGinとNext.jsを使った掲示板サンプルアプリ](https://github.com/laster18/1chan)
- [GitHub - JonSteinn/Web-Paint: Simple web drawing application (to learn javascript...)](https://github.com/JonSteinn/Web-Paint)
- [GitHub - karrybit/ggc](https://github.com/karrybit/ggc)
- [【Terraform 再入門】EC2 + RDS によるミニマム構成な AWS 環境をコマンドライン一発で構築してみよう &#8211; PSYENCE:MEDIA](https://tech.recruit-mp.co.jp/infrastructure/post-10665/)
- [【Terraform】ECS自動デプロイ - Terraform編 -](https://zenn.dev/endo/articles/2419490e74cc3e8d54c5)
- [Amazon S3 - react/axiosとgolang/ginを使ってS3に画像をアップロードしたいです｜teratail](https://teratail.com/questions/201168)
[docker-composeでgin+reactの開発環境を作る - forza alex](https://ybalexdp.hatenablog.com/entry/2019/03/17/docker-compose-for-gin-and-react)

- [GitHub - aesrael/go-postgres-jwt-react-starter: A go, gin, and postgres API with jwt auth, complete with a react frontend](https://github.com/aesrael/go-postgres-jwt-react-starter)
- [Keeping Users Logged In with gorilla/sessions - Golang Web Dev - YouTube](https://www.youtube.com/watch?v=jibxRSllvvE)

- [React and Golang JWT Authentication - Tutorial - YouTube](https://www.youtube.com/watch?v=d4Y2DkKbxM0&t=231s)
  - [GitHub - scalablescripts/react-auth](https://github.com/scalablescripts/react-auth)
  - [GitHub - scalablescripts/go-auth](https://github.com/scalablescripts/go-auth)
- [GitHub - mixj93/react-gin-starter: Full stack web starter template using React and Gin](https://github.com/mixj93/react-gin-starter)


- [React Typescript &amp; Go w/ Gin Backend JWT Auth Part 1 - YouTube](https://www.youtube.com/watch?v=QD2BCikYCyc)
- [React Typescript Auth App w/ React Bootstrap, Router, Fetch, &amp; Hooks - YouTube](https://www.youtube.com/watch?v=ZZA96UPl_o0)


- [React + Go Todo App Part 2 - YouTube](https://www.youtube.com/watch?v=0xKGdMCYtvw)

https://kis9a.github.io/esbuild-hyperapp-starter/

router function to navigate url

component system and catarog,
spa mode ssg mode to create website faster.
relaod issue.


  // setTimeout(() => findRoute(), 10000);


func remove3(arr []int, i int) []int {
	arr[i] = arr[len(arr)-1]
	return arr[:len(arr)-1]
}



let NAVIGATE_EVENT = "hyperway-navigate";

              onmouseover: () => [tooltip, "clear: ctrl-x"],
              onmouseout: removeTooltip,
HTML
<body>
  ~
  <img decoding="async" src="img/photo1.webp">
  <img decoding="async" src="img/photo2.webp">
  ...
Chrome76(75?)で実装予定と噂されたloading属性(loading="lazy"・Lazy Load)は現状実装されていない → 後日、76で追加実装された模様 (2019/8/15記)

// | tab                                 | 9                         |
// | enter                               | 13                        |
// | arrow left                          | 37                        |
// | arrow up                            | 38                        |
// | arrow right                         | 39                        |
// | arrow down                          | 40                        |
// | comma                               | 188                       |

// const keyDownSubscription = [
//   (dispatch, { onup, ondown }) => {
//     let handler = (ev) => {
//       if (ev.key === "ArrowUp") dispatch(onup);
//       if (ev.key === "ArrowDown") dispatch(ondown);
//     };
//     window.addEventListener("keydown", handler);
//     return () => window.removeEventListener("keydown", handler);
//   },
// ];


const KeyDownSubscription = (dispatch, { onup, ondown }) => {
  let handler = (ev) => {
    if (ev.key === "ArrowUp") dispatch(onup);
    if (ev.key === "ArrowDown") dispatch(ondown);
  };
  window.addEventListener("keydown", handler);
  return () => window.removeEventListener("keydown", handler);
};

const keydownSubscriber = (dispatch, options) => {
  const handler = (ev) => {
    if (ev.key !== options.key) return;
    dispatch(options.action);
  };
  addEventListener("keydown", handler);
  return () => removeEventListener("keydown", handler);
};

const someDispatch = (dispatch, options) => {
  dispatch(options.action);
  return () => console.log("hello");
};

const onKeyDown = (key, action) => [keydownSubscriber, { key, action }];
const onSome = (key, action) => [someDispatch, { key, action }];

const SelectUp = (state) => {
  if (state.selected === null) return state;
  return [Select, state.selected - 1];
};

const SelectDown = (state) => {
  if (state.selected === null) return state;
  return [Select, state.selected + 1];
};

const Response = (state, payload) => ({ ...state, payload });
const listenToEvent = (dispatch, props) => {
  const listener = (event) =>
    requestAnimationFrame(() => dispatch(props.action, event.detail));

  addEventListener(props.type, listener);
  return () => removeEventListener(props.type, listener);
};

const tickRunner = (dispatch, { action }) => {
  return () => {};
};
const onChangeUri = (action, {}) => [tickRunner, { action }];
const action = (state) => ({ ...state });

const listen = (type, action) => [listenToEvent, { type, action }];

https://developers.google.com/speed/pagespeed/insights/?hl=ja&url=naberhausj.com/woodworking/bedroom-set/page.html&tab=desktop
https://developers.google.com/speed/pagespeed/insights/?hl=ja&?url=http%3A%2F%2Fme.kis9a.com%2Fimages%2F&tab=desktop
- [The Why of Go - YouTube](https://www.youtube.com/watch?v=bmZNaUcwBt4)
- [Dockerビルドを分離してデプロイを高速化した話](https://zenn.dev/cumet04/articles/separete-frontend-docker-build)
- [GitHub - Diwamoto/yource: A service that allows you to create a blog like slack.](https://github.com/Diwamoto/yource/)
- [GitHub - gdamore/tcell: Tcell is an alternate terminal package, similar in some ways to termbox, but better in others.](https://github.com/gdamore/tcell)
- [Go言語で理解するJWT認証 実装ハンズオン - Qiita](https://qiita.com/po3rin/items/740445d21487dfcb5d9f)
- [NegipoyoChannel](https://negipoyoc.com/)
- [GitHub - linzhengen/gin-admin-with-frontend-sample: A gin-admin with frontend sample Project](https://github.com/linzhengen/gin-admin-with-frontend-sample)
```
      const res = await fetch(`${apiURl}/login`, {
        method: 'POST',
        body: JSON.stringify({
          email,
          password,
        }),
        headers: {
          'Content-Type': 'application/json',
        },
      }).then(res => res.json())
```

- [GhostをCloudFront+Nginxでキャッシュする](https://takipone.com/ghost-with-cloudfront/)
- [microservicesはじめました (2) - 朝日ネット　技術者ブログ](https://techblog.asahi-net.co.jp/entry/2018/08/03/182218)
Geolocation APIを使ってJavaScriptでクライアントの位置情報を取得して、その位置に関連する情報を表示する、というものを考えます。
位置情報からの情報取得はYahoo! Open Local Platform (YOLP)を利用することにします。

[GitHub - aesrael/go-postgres-jwt-react-starter: A go, gin, and postgres API with jwt auth, complete with a react frontend](https://github.com/aesrael/go-postgres-jwt-react-starter)

- [GitHub - glromeo/esbuild-sass-plugin: esbuild plugin for sass](https://github.com/glromeo/esbuild-sass-plugin)
- [GitHub - egoist/esbuild-service: esbuild as a service. bundle any npm package on the fly as you request.](https://github.com/egoist/esbuild-service)
https://blog.icttoracon.net/2020/03/01/%E9%81%A9%E5%BD%93%E3%81%AB%E4%BF%B3%E5%8F%A5%E6%8A%95%E7%A8%BF%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%89xsrf%E8%84%86%E5%BC%B1%E6%80%A7%E5%AD%95%E3%82%93%E3%81%A7/
適当に俳句投稿サービス作ったらXSRF脆弱性孕んでた件。
https://github.com/utrack/gin-csrf
import images as base64
- [我が家の BigQuery による台所事情分析 - nownab.log](https://blog.nownabe.com/2020/12/13/home-finance-with-bigquery/)
- [Gogs: A painless self-hosted Git service](https://gogs.io/)

- [GitHub - getify/moduloze: Convert CommonJS (CJS) modules to UMD and ESM formats](https://github.com/getify/moduloze)
- [要素をフェードイン・フェードアウトする | JavaScript逆引き | Webサイト制作支援 | ShanaBrian Website](https://shanabrian.com/web/javascript/element-fade-in-fade-out.php)

var mediaQuery = matchMedia('(max-width: 798px)');

// ページが読み込まれた時に実行
handle(mediaQuery);

// ウィンドウサイズが変更されても実行されるように
mediaQuery.addListener(handle);

function handle(mq) {
  if (mq.matches) {
    // ウィンドウサイズが798px以下のとき
  } else {
    // それ以外
  }
}

const viewContent = (content, rawMode) => {
  switch (content.name) {
    case "memo":
      return h("div", { class: "tab-memo" }, [
        h("textarea", {
          rows: 15,
          value: content.content || "",
          oninput: setInputContent,
          class: "content tab-memo-input",
        }),
      ]);
    default:
      return h("div", {
        class: `tab-content ${content.content ? "" : "no-content"}`,
        innerHTML: rawMode ? content.content : snarkdown(content.content),
      });
  }
};
- [cgoでGoのコードからCの関数を利用する - EagleLand](https://1000ch.net/posts/2014/c-in-golang-with-cgo.html)
- [](jpegoptimをGoでラップしたい)
-  [](https://www.youtube.com/hashtag/devio_showcase)
- [AWSのコストやセキュリティを最適化する「クラウド最適化アセスメント」とは？ #devio_showcase - YouTube](https://www.youtube.com/watch?v=htrR_p-LacM)

```
<!DOCTYPE HTML>
<html>
<head>
<style>
#div1, #div2 {
  float: left;
  width: 100px;
  height: 35px;
  margin: 10px;
  padding: 10px;
  border: 1px solid black;
}
</style>
<script>
function allowDrop(ev) {
  ev.preventDefault();
}

function drag(ev) {
  ev.dataTransfer.setData("text", ev.target.id);
}

function drop(ev) {
  ev.preventDefault();
  var data = ev.dataTransfer.getData("text");
  ev.target.appendChild(document.getElementById(data));
}
</script>
</head>
<body>

<h2>Drag and Drop</h2>
<p>Drag the image back and forth between the two div elements.</p>

<div id="div1" ondrop="drop(event)" ondragover="allowDrop(event)">
  <img src="img_w3slogo.gif" draggable="true" ondragstart="drag(event)" id="drag1" width="88" height="31">
</div>

<div id="div2" ondrop="drop(event)" ondragover="allowDrop(event)"></div>

</body>
</html>
```

- [GitHub - go-cmd/cmd: Non-blocking external commands in Go with and streaming output and concurrent-safe access](https://github.com/go-cmd/cmd)
tput library golang
JavaScript div サイズ変更 ドラッグ
[できた！S3 オリジンへの直接アクセス制限と、インデックスドキュメント機能を共存させる方法 | DevelopersIO](https://dev.classmethod.jp/articles/directory-indexes-in-s3-origin-backed-cloudfront/)
https://github.com/twstewart42/terraform-aws-cloudfront-s3-website-lambda-edge
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EXUOTVVU94CF8"
            },
            "Action": "s3:GetObject",
 
        }
    ]
}

- [CloudFront + S3 で静的サイトを運用する際の注意点 - Qiita](https://qiita.com/ooxif/items/d28b7caf72bf5290588c)
https://re-engines.com/2020/03/02/go%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AFgin%E3%81%A7%E3%83%9F%E3%83%89%E3%83%AB%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%AD%E3%82%B0%E3%82%A4/
- [ginを最速でマスターしよう - Qiita](https://qiita.com/Syoitu/items/8e7e3215fb7ac9dabc3a)
- [Future Corp · GitHub](https://github.com/future-architect)
- go-migrate
- Encode処理をすると次のような形で出力されます。
- $2a$10$8sKUrdvJn7gpWmMH2qfRduF.vhe2n3diyzf8CvY8GtTsmNJ6HRnBe
- この中に
- アルゴリズム
- アルゴリズムの詳細(回数とか)
- Salt
- Hashed Password

cros origin golang

- [【HTTPヘッダー】CORSの仕組みとGo+GinによるCors設定の実践 - Qiita](https://qiita.com/ichi_zamurai/items/97e7e93bf398f98e719e)
- [Webアプリ初心者がGo言語でサーバサイド（2. パスワード認証機能の実装） - Qiita](https://qiita.com/wsuzume/items/8b282d553a4185cbac5c)
また、サーバ側で受け取ったパスワードは決して平文で保管してはいけません。通信路上でパスワードを盗み見ることができないと分かれば、悪い人は必ず空き巣に入って鍵を盗みに来ます。要するにデータベースへの不正侵入を試みるわけで、マズいことにそれはときどき成功してしまいます。絶対無敵の防壁を作ることは不可能ですし、仮に作れたとしてもぶっちゃけ内部犯やスパイは原理的に防ぎようがないので、現実的には「盗み見られても構わないようにパスワードを加工する」という手段が用いられます。これにはbcryptという方式のハッシュが使われます。
bcrypt は計算量の大きい一方向ハッシュです。ここでSHA256などの高速なハッシュ関数を使ってしまうと、ありがちなパスワードに対するレインボーテーブル（逆引き辞書のようなもの）を作成されて破られてしまう可能性がありますが、bcrypt はわざと計算に時間をかけているため、レインボーテーブルによる攻撃に耐性があります。
[    スタートアップが「GAE/Go」を採用する上で知っておきたいこと　Next Currencyが語る導入までの道](https://logmi.jp/tech/articles/304030)
[](https://qiita.com/butterv/items/ca330d27fe51a6bf7a3d[coc-explorer]-1-コストの指定)
- [【bcrypt】ユーザーパスワードを本当に安全に保存する方法 | 株式会社LIG](https://liginc.co.jp/377191)

GenerateFromPassword
CompareHashAndPassword

brew install sequel-ace
[Building a REST API With Go Gin - Part 2: Login/Register/Authentication - YouTube](https://www.youtube.com/watch?v=XxCr4QOD5Hs)
https://www.postgresql.org/ftp/pgadmin/pgadmin4/v5.4/macos/
alias curld="curl -X DELETE "
alias curlt="curl -X PUT -H "Content-Type: application/json" -d "
alias curlp="curl -X PUT -H "Content-Type: application/json" -d "
- [curl-to-Go: Convert curl commands to Go code](https://mholt.github.io/curl-to-go/)

[Go で作る SPA 用バックエンド - l12a](https://lnly.hatenablog.com/entry/2020/02/26/225722)
- [【Go】ginを使った一連の認証実装をまとめる](https://zenn.dev/someone7140/articles/02181927acd040)
[404 File Not Found](https://note.crohaco.net/2019/golang-gin/tasks/2021/07preparing)

func sessionCheck() gin.HandlerFunc {
    return func(c *gin.Context) {

        session := sessions.Default(c)
        LoginInfo.UserId = session.Get("UserId")

        // セッションがない場合、ログインフォームをだす
        if LoginInfo.UserId == nil {
            log.Println("ログインしていません")
            c.Redirect(http.StatusMovedPermanently, "/login")
            c.Abort() // これがないと続けて処理されてしまう
        } else {
            c.Set("UserId", LoginInfo.UserId) // ユーザidをセット
            c.Next()
        }
        log.Println("ログインチェック終わり")
    }
}
- [GitHub - x-color/tools](https://github.com/x-color/tools)
axios https://qiita.com/melty_go/items/1432da74804a9dca112a
- [Go Code Samples &nbsp;|&nbsp; YouTube Data API &nbsp;|&nbsp; Google Developers](https://developers.google.com/youtube/v3/code_samples/go)
ログイン済みであれば、ログイン画面にアクセスしてもホーム画面にリダイレクトされる
ログイン済みでなければ、どのページにアクセスしてもログイン画面にリダイレクトされる
ログイン済みでない場合、アクセスしたページがレンダリングされる前にリダイレクトされる
操作中にログインが切れた場合、ログイン画面にリダイレクトされる。

	// // ユーザー登録画面
	// router.GET("/signup", func(c *gin.Context) {
	// 	c.HTML(200, "signup.html", gin.H{})
	// })

	// // ユーザー登録
	// router.POST("/signup", func(c *gin.Context) {
	// 	var form User
	// 	// バリデーション処理
	// 	if err := c.Bind(&form); err != nil {
	// 		c.HTML(http.StatusBadRequest, "signup.html", gin.H{"err": err})
	// 		c.Abort()
	// 	} else {
	// 		username := c.PostForm("username")
	// 		password := c.PostForm("password")
	// 		// 登録ユーザーが重複していた場合にはじく処理
	// 		if err := createUser(username, password); err != nil {
	// 			c.HTML(http.StatusBadRequest, "signup.html", gin.H{"err": err})
	// 		}
	// 		c.Redirect(302, "/")
	// 	}
	// })


GitHub - herusdianto/gorm_crud_example: GoLang, GORM &amp; Gin CRUD Example](https://github.com/herusdianto/gorm_crud_example)
- [glide - パッケージ管理のお困りの方へ - - Qiita](https://qiita.com/usk81/items/8e192e68d6b18bec3b4a)

password関数で変更しようとした
rootのpasswordを変更に関する多くの解説記事ではpassword関数で変更しようとしていますが、

mysql> update user set password=password('********') where user = 'root';
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '('********') where user = 'root'' at line 1
password関数は廃止されていた
MySQL8でユーザーのパスワードの変更 / リセット方法
はい、ありがとうございます。
ver. 5.6.7時点でどうやら廃止されたようでした。

mysql> set password for 'root'@'localhost' = '********';
Query OK, 0 rows affected (0.02 sec)

sequel pro caching_sha2_password fail
sudo mysqld_safe –skip-grant-tables

mysql> set password for 'root'@'localhost' = '****';
Query OK, 0 rows affected (0.00 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)

```
#! /bin/bash

function rec {
    for FILE in `ls ${2}`
        do
           local FULL=${2}/${FILE}
           if [ -f $FULL ]; then $1 $FULL
           elif [ -d $FULL ]; then rec $1 $FULL
           fi
        done
}

rec $1 `pwd`/${2}
```
tput
- [GitHub - jandelgado/golang-ci-template-github-actions: example for golang project using github actions](https://github.com/jandelgado/golang-ci-template-github-actions)
redirect te.kis9a.com/
git clone alias function -u kis9a/some, without https://
cat kis9a/kis9a/path/file

provider "aws" {
  profile                = "kis9a-src"
  skip_region_validation = true
  alias                  = "us-east-1"
}

terraform {
  backend "s3" {
    region                 = "ap-northeast-1"
    encrypt                = true
    key                    = "kis9a-src.tfstate"
    bucket                 = "kis9a-terraform-states"
    skip_region_validation = true
  }
}



https://github.com/lucheholdings/terraform_static_site
https://github.com/users/kis9a/projects/1?fullscreen=true
<https://qiita.com/greenteabiscuit/items/282ae184b3aad7edf92f>
- [](https://medium.com/wesionary-team/create-your-first-rest-api-with-golang-using-gin-gorm-and-mysql-d439bcc6f987)
https://yhidetoshi.hatenablog.com/entry/2019/12/08/162853#ECRに登録するGoコンテナを作成する
[go-ginでサクッとRESTAPIを構築する - Qiita](https://qiita.com/shiei_kawa/items/eddf48287455380f618f)
https://github.com/riboseinc/terraform-aws-s3-cloudfront-website
https://github.com/cloudmaniac/terraform-aws-static-website
/.github/workflows/terraform.yml :on change sources/terraform/ - creaet aws resources
/.github/workflows/deploy.yml :on change dist branch/ -> upload s3 files
https://dev.classmethod.jp/articles/static-web-with-cf-s3-tf/
migreate site to s3+cloudfront 
because can't caching assets in website served from GitHub pages
> [Caching assets in website served from GitHub pages - Web Applications Stack Exchange](https://webapps.stackexchange.com/questions/119286/caching-assets-in-website-served-from-github-pages)
[S3にアップロードされた画像にCache-Controlを付ける方法3選 - Qiita](https://qiita.com/KeitaMoromizato/items/b3fef6a2c9bc87662740)
最近ISRをしていたサイトをSSR + FastlyのSWRキャッシュに切り替えましたがISRのときとほぼ変わらずに動いています。一つ懸念点があるとすればNextjsはSSRにするとprefetchがされなくなるので、キャッシュヒットしない場合のページ遷移が遅くなります。
- [高専生が一人でWebサービスを開発したのでリリースまでのストーリーを書きました！](https://zenn.dev/makiart/articles/6b9c25ba40af1c955c87)
[lambda@edge上でwasmを使用した画像リサイズにおける速度](https://zenn.dev/takenokogohan/articles/4d9d1c4d3a5b26)
[GitHub - flowchartsman/swaggerui: Embedded, self-hosted swagger-ui for go servers](https://github.com/flowchartsman/swaggerui)
[GitHub - flowchartsman/shttp: A stronger, better net/http server with sane defaults](https://github.com/flowchartsman/shttp)
https://github.com/wricardo/gomux
```

jobs:
  zenn:
    runs-on: ubuntu-20.04
    env:
      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
    steps:
      - name: install go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.16
      - name: version
        run: go version
      - name: go get aws-services
        run: go get github.com/kis9a/aws-services
      - name: checkout
        uses: actions/checkout@v2
        with:
          repository: kis9a/kis9a
          path: kis9a
      - name: update zenn article
        run: |
          cd kis9a/
          git config user.name "kis9a"
          git config user.email "kis9ax@gmail.com"
          aws-services jp -t zenn/articles/aws-services.template -o zenn/articles/aws-services.md
          ls -la zenn/articles
          git add zenn/articles/aws-services.md
          git commit -m "zenn: update aws-services"
          git push -f -q https://kis9a:$REPO_TOKEN@github.com/kis9a/kis9a.git
```

                    git clone https://kis9a:$REPO_TOKEN@github.com/kis9a/kis9a

          # git checkout -b api-version-$COMMIT
          # touch new-file.sh
          # git add new-file.sh
          # git commit -m "Add new file"
          # git remote -v # Prints:
          # # origin ***github.com/owner/my-repo.git (fetch)
          # # origin ***github.com/owner/my-repo.git (push)
          # git push --set-upstream origin api-version-$COMMIT # This does not work
          # git push --set-upstream httpset//user:$GITHUB_TOKEN@github.com/owner/my-repo api-version-$COMMIT # This does not work either

github project export to tasks/2021/*.md

- [GitHub Actionsのワークフロー構文 - GitHub Docs](https://docs.github.com/ja/enterprise-server@2.22/actions/reference/workflow-syntax-for-github-actions)
- [golangでgitのサブコマンドを作ろう - Qiita](https://qiita.com/mziyut/items/73be60dd39020c3507fc)
https://github.com/tj/git-extras
- [歴史の長いプロダクトでAmazon Linux 2への移行をやり遂げた話 | 株式会社ヌーラボ(Nulab inc.)](https://nulab.com/ja/blog/backlog/amazon-linux-2-migration/)
- [[Go]画像をリサイズして、dataサイズを圧縮する](https://zenn.dev/a_ichi1/articles/c2c86b3e8017e7)
- [PMMとは？ PdMとどう違う？ SmartHR 重松さんが徹底解説【2021年最新Ver】 | キャリアハック](https://careerhack.en-japan.com/report/detail/1450)
- [Go で使う Makefile の育て方](https://zenn.dev/rosylilly/articles/202105-go-makefile)
- [Aduca &mdash; a dull canvas](https://aduca.org/)

  connection {
    type        = "ssh"
    user        = "centos"
    private_key = file(local.private_key_file)
    host        = self.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install ansible2 -y",
      "sudo yum install git -y",
    ]
  }

incremental ssg with pure js
Claire de Luns
https://oji.netlify.app/
https://www.nippehome-online.jp/diypaint/it_2kg.html
- [ページが見つかりませんでした &#8211; 壁紙屋本舗](https://kabegamiyahonpo.com/blog/howto/howto-paint/chintai_painting.htmltasks/2021/07paintable)
```
package costexplorer

import (
    "github.com/aws/aws-sdk-go/aws"
    "github.com/aws/aws-sdk-go/service/costexplorer"
    "github.com/aws/aws-sdk-go/service/costexplorer/costexploreriface"
)

type CostExplorer struct {
    session costexploreriface.CostExplorerAPI
}

func NewCostExplorer(session costexploreriface.CostExplorerAPI) CostExplorer {
    return CostExplorer{
        session: session,
    }

}

func (c CostExplorer) GetCostForDaily(time_start string, time_end string, metrics []string) (*costexplorer.GetCostAndUsageOutput, error) {
    granularity := aws.String("DAILY")
    metric := aws.StringSlice(metrics)
    resp, err := c.session.GetCostAndUsage(&costexplorer.GetCostAndUsageInput{Metrics: metric, Granularity: granularity, TimePeriod: &costexplorer.DateInterval{Start: aws.String(time_start), End: aws.String(time_end)}})
    if err != nil {
        return nil, err
    }
    return resp, nil
}
func (c CostExplorer) GetCostDetail(time_start string, time_end string, metrics []string) (*costexplorer.GetCostAndUsageOutput, error) {
    granularity := aws.String("DAILY")
    metric := aws.StringSlice(metrics)
    group := costexplorer.GroupDefinition{Key: aws.String("SERVICE"), Type: aws.String("DIMENSION")}
    resp, err := c.session.GetCostAndUsage(&costexplorer.GetCostAndUsageInput{GroupBy: []*costexplorer.GroupDefinition{&group}, Metrics: metric, Granularity: granularity, TimePeriod: &costexplorer.DateInterval{Start: aws.String(time_start), End: aws.String(time_end)}})
    if err != nil {
        return nil, err
    }
    return resp, nil
}
```
https://techblog.zozo.com/entry/aws-billing-bot

プロビジョニングツール：CloudFormation(CFn)、Serverless Application Model(SAM)

作成されたアプリケーションはLambda上で動作しており、CloudWatch Eventsでcronを平日10時に設定してLambdaを動かしています。また、AWSの料金の取得はAWSのCost Explorer APIを使って取得しています。

Go言語ではAWS SDKが提供されているのでGetCostAndUsage

https://github.com/mercari/tfnotify
<https://zenn.dev/ryo_kawamata/articles/improve-dependabot-pr>
@dependabot ignore this minor version
- [Go 1.16以降はGitHub版Dependabotを使った方がよさそう - くりにっき](https://sue445.hatenablog.com/entry/2021/03/20/075551)
- https://aws.amazon.com/jp/cdp/ec-container/
- github actions can checkt terraform state on infra.bonp.me.
- [現代的なウェブアプリケーションの構築](https://aws.amazon.com/jp/getting-started/hands-on/build-modern-app-fargate-lambda-dynamodb-python/?sc_icampaign=acq_jp_getting-started-handson-202010-build-modern-app-fargate-lambda-dynamodb-python&sc_language=jp&sc_icontent=awssm-6350&sc_iplace=ribbon&trk=ha_ribbon_acq_jp_getting-started-handson-202010-build-modern-app-fargate-lambda-dynamodb-python)

- [【docker buildのマニアックすぎる狂宴】Container Build Meetup #1に参加してきた #container_build | DevelopersIO](https://dev.classmethod.jp/articles/docker-build-meetup-1/)

- [2019年1月にAWS Fargateが大幅値下げしたのでEC2との価格比を確認してみた | DevelopersIO](https://dev.classmethod.jp/articles/compare-fees-for-fargat-and-ec2-2019-1/)

- https://docs.google.com/forms/d/e/1FAIpQLSfl4UH7DHiU2uZkj45Z-Pd3TTDgQ_B252bsGDbB5EFnvGsk3w/viewform

- Amazon ECS では、アプリケーション、サービス、バッチ処理を実行する Docker コンテナを簡単にデプロイ、管理、スケーリングできます。Amazon ECS は、リソースのニーズに基づいてクラスター全体にコンテナを配置し、Elastic Load Balancing、EC2 セキュリティグループ、EBS ボリューム、IAM のロールなどの使い慣れた機能と統合されます。

FROM 
https://future-architect.github.io/articles/20210408/
https://future-architect.github.io/articles/20210409/
https://future-architect.github.io/articles/20210617a/
https://future-architect.github.io/articles/20200327/
https://future-architect.github.io/articles/20210604a/
https://future-architect.github.io/articles/20200207/
https://github.com/9sako6/imgcmp
go get golang.org/x/tools/cmd/godoc

Client    Response   ResponseWriter
Response  Header     HandlerFunc
          Cookie     ServerMux

unicode.go
serverless
<https://github.com/apex/up-examples/blob/master/oss/golang-api/main.go> <https://apex.sh/docs/up/links/>
vCPU: 2
Intel(R) Xeon(R) Platinum 8175M CPU @ 2.50GHz (最大3.1GHz)
メモリ: 8 GiB
ストレージ: 1 x 75 GiB NVMe SSD
OS: Amazon Linux 2
　今回、m5d.large インスタンスを採用したのは次の理由からです:

汎用ワークロード向けインスタンスである
Docker Composeを使うため、メモリに余裕をもたせて8GB用意する
MySQLでストレージがボトルネックになることを少しでも抑えるため、NVMe SSD を使う

```diff

-    print('平均秒数：%f' % svg)
+    # 標準偏差を計算
+    sdev = 0.0
+    for t in times:
+        sdev += (t - svg) ** 2
+    sdev = math.sqrt(sdev / len(times))
+    print('平均秒数：%f, 標準偏差: %.1f' % (svg, sdev))

ユーザー空間で実行されてる時間（user time)
カーネル空間で実行されている時間（system time）
ファイルやネットワークなどの入出力結果を待っている時間（idle time）
```

https://github.com/heppu/gkill
https://github.com/apex
https://github.com/b4b4r07/go-finder
https://nojov.kou-pg.com/
//go:embed message.txt

```
func Filter[T any](a []T, f func(T) bool) []T {
    var n []T
    for _, e := range a {
        if f(e) {
            n = append(n, e)
        }
    }
    return n
}

func Map[T any, M any](a []T, f func(T) M) []M {
    n := make([]M, len(a), cap(a))
    for i, e := range a {
        n[i] = f(e)
    }
    return n
}
```
https://go.googlesource.com/go https://go2goplay.golang.org/
「TLS」をつけたhttp.ListenAndServeTLSを実践では使うことになるかもしれません。こちらはセキュリティーの話
try watch https://esbuild.github.io/api/#watch
https://zenn.dev/mohira/scraps/f99095d2fd74da
https://github.com/nitaking/gitmoji-c
https://github.com/BrightLocal/FrontBuilder/
http://ghv.artzub.com/
- onclick import javascript
- [JavaScript の静的インポートと動的インポート &#8211; ラボラジアン](https://laboradian.com/js-static-and-dynamic-import/)
- [全モダンブラウザで使えるJavaScriptのdynamic import（動的読み込み） - Qiita](https://qiita.com/tonkotsuboy_com/items/f672de5fdd402be6f065)
- random images/ align
- tools/ pages initialize
- fix pop out styles and images raito
- create stroybook and confirm pages

python.ms/rust-or-go/#_2-用途

https://github.com/mattn/vim-filewatcher
- [Go で Vim プラグインを書く - haya14busa](http://haya14busa.com/vim-go-client/)
mkup replace
```
au *.md notifyEnterMarkdown

function notifyEnterMarkdown()
  getbuffer()
  cmd("binray update")
endfunction

----

func binrayUpdate(current string, paths []string) {
forr p paths {
http.update(parseMarkdown(p))
}
}

func parseMarkdown(path string) string {
return to_markdown(path)
}
```

- when #base + #match = type file, 
- https://okdyy75.github.io/freelance-chart
- ignore dot folders
- [GitHub Actions で別のリポジトリに git push する](https://3nan3.github.io/post/2019122201_github_actions/)
- kis9a watch pages/ with .sar.toml
- [golang-test-port/test-port.go at master · coolaj86/golang-test-port · GitHub](https://github.com/coolaj86/golang-test-port/blob/master/test-port.go)
