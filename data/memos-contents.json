[{"name":"ajail.md","content":"## スクラム- 反復増加型のソフトウェア開発プロジェクトを管理するためのフレームワークです。- 開発技術を必要とする活動はありません。- 反復期間内に開発する機能は、反復ごとに決定されます。- 反復期間中、チームは外部（顧客やビジネスサイド）からの干渉を全く受けません。- プロジェクト管理の権限はチームに委譲され、開発手法や利用技術もチームが決定します。- スプリントプランニング- デイリースクラム- スプリントレビュー- スプリントレトロスペクティブ- プロダクトオーナー（PO）- スクラムマスター（SM）- 開発チーム## エクストリームプログラミング- 開発に関わるすべての人が互いに尊重し、働きかけ、協力し合うことが重視されています。- 状況の変化を歓迎し、受け入れ、それにすばやく追従することができます。- 顧客はチームメンバーの一員です。オンサイト顧客と呼ばれチームと常に同席し、技術者と協働してソフトウェアを開発します。- 開発プロセスはチームにより新たにつくられ、よりよいものに改良され、合わなくなったものは捨て去られます。- 開発技術を必要とする活動が多くあります。- 計画ゲーム- イテレーション- リリース- 全員同席- ストーリー- ペアプログラミング- 継続的インテグレーション- コードの共同所有- コーチ- トラッカー- 顧客## カンバン- 作業の可視化- WIP 制限- 流れの管理・測定- 明確なポリシーを作る- カンバンからのフィードバック- 常態的な改善・進化かんばんは、リーン原則に基づいた継続的デリバリーを重視します。作業の流れとジャストインタイムデリバリー、プロセス改善の促進を基礎としています。かんばんのねらいは、無駄の排除、生産性と効率の向上、生産における柔軟性の確保です。主要な目標は、仕掛り作業（WIP）を制限し、マルチタスクを避け、ボトルネックを把握することです。|                    | ### スクラム                                   | ### カンバン                    || ------------------ | ---------------------------------------------- | ------------------------------- || 期間               | 長さが固定された定期的スプリント (2 週間)      | 継続的なフロー                  || リリース方法       | 各スプリントの終了時                           | 継続的デリバリー                || 役割               | プロダクト所有者、スクラムマスター、開発チーム | 役割不要                        || 主要指標           | ベロシティ                                     | リードタイム、サイクル期間、WIP || 変更に関する考え方 | チームはスプリント中に変更を加えない。         | 変更は随時発生する可能性あり    |"},{"name":"ajax.md","content":"JavaScript で非同期通信"},{"name":"amethyst.md","content":"```{  \"mod1\": [    \"command\",    \"control\"  ],  \"mod2\": [    \"command\",    \"control\"    \"shift\"  ],  \"layouts\": [    \"tall\",    \"fullscreen\",    \"wide\"  ],  \"floating\": [    \"com.adiumX.adiumX\",    \"com.agilebits.onepassword-osx\",    \"com.apple.Aperture\",    \"com.apple.DiskUtility\",    \"com.apple.ScreenSharing\",    \"com.apple.appstore\",    \"com.apple.backup.launcher\",    \"com.apple.bootcampassistant\",    \"com.apple.iTunes\",    \"com.apple.systempreferences\",    \"com.apple.systempreferences\",    \"com.blacktree.Quicksilver\",    \"com.cockos.LICEcap\",    \"com.derlien.DiskInventoryX\",    \"com.foxnsox.Howler\",    \"com.intel.nw\",    \"com.pixelmatorteam.pixelmator\",    \"com.skitch.skitch\",    \"com.twitter.twitter-mac\",    \"fr.handbrake.HandBrake\",    \"net.projectmagma.myth2\",    \"org.virtualbox.app.VirtualBoxVM\",    \"org.wesnoth.Wesnoth\"  ]}``````{    \"layouts\": [        \"tall\",        \"wide\",        \"fullscreen\",        \"column\"    ],    \"Valid modifiers are\": [        \"option\",        \"shift\",        \"control\",        \"command\"    ],    \"mod1\": [        \"option\",        \"shift\"    ],    \"mod2\": [        \"option\",        \"shift\",        \"control\"    ],    \"screens\": 4,    \"cycle-layout\": {        \"mod\": \"mod1\",        \"key\": \"space\"    },    \"cycle-layout-backward\": {        \"mod\": \"mod2\",        \"key\": \"space\"    },    \"select-tall-layout\": {        \"mod\": \"mod1\",        \"key\": \"a\"    },    \"select-wide-layout\": {        \"mod\": \"mod1\",        \"key\": \"s\"    },    \"select-fullscreen-layout\": {        \"mod\": \"mod1\",        \"key\": \"d\"    },    \"select-column-layout\": {        \"mod\": \"mod1\",        \"key\": \"f\"    },    \"focus-screen-ccw\": {        \"mod\": \"mod1\",        \"key\": \"p\"    },    \"focus-screen-cw\": {        \"mod\": \"mod1\",        \"key\": \"n\"    },    \"focus-screen-1\": {        \"mod\": \"mod1\",        \"key\": \"w\"    },    \"focus-screen-2\": {        \"mod\": \"mod1\",        \"key\": \"e\"    },    \"focus-screen-3\": {        \"mod\": \"mod1\",        \"key\": \"r\"    },    \"focus-screen-4\": {        \"mod\": \"mod1\",        \"key\": \"q\"    },    \"throw-screen-1\": {        \"mod\": \"mod2\",        \"key\": \"w\"    },    \"throw-screen-2\": {        \"mod\": \"mod2\",        \"key\": \"e\"    },    \"throw-screen-3\": {        \"mod\": \"mod2\",        \"key\": \"r\"    },    \"throw-screen-4\": {        \"mod\": \"mod2\",        \"key\": \"q\"    },    \"shrink-main\": {        \"mod\": \"mod1\",        \"key\": \"h\"    },    \"expand-main\": {        \"mod\": \"mod1\",        \"key\": \"l\"    },    \"increase-main\": {        \"mod\": \"mod1\",        \"key\": \",\"    },    \"decrease-main\": {        \"mod\": \"mod1\",        \"key\": \".\"    },    \"focus-ccw\": {        \"mod\": \"mod1\",        \"key\": \"j\"    },    \"focus-cw\": {        \"mod\": \"mod1\",        \"key\": \"k\"    },    \"focus-main\": {        \"mod\": \"mod1\",        \"key\": \"m\"    },    \"swap-screen-ccw\": {        \"mod\": \"mod2\",        \"key\": \"h\"    },    \"swap-screen-cw\": {        \"mod\": \"mod2\",        \"key\": \"l\"    },    \"swap-ccw\": {        \"mod\": \"mod2\",        \"key\": \"j\"    },    \"swap-cw\": {        \"mod\": \"mod2\",        \"key\": \"k\"    },    \"swap-main\": {        \"mod\": \"mod1\",        \"key\": \"enter\"    },    \"throw-space-1\": {        \"mod\": \"mod2\",        \"key\": \"1\"    },    \"throw-space-2\": {        \"mod\": \"mod2\",        \"key\": \"2\"    },    \"throw-space-3\": {        \"mod\": \"mod2\",        \"key\": \"3\"    },    \"throw-space-4\": {        \"mod\": \"mod2\",        \"key\": \"4\"    },    \"throw-space-5\": {        \"mod\": \"mod2\",        \"key\": \"5\"    },    \"throw-space-6\": {        \"mod\": \"mod2\",        \"key\": \"6\"    },    \"throw-space-7\": {        \"mod\": \"mod2\",        \"key\": \"7\"    },    \"throw-space-8\": {        \"mod\": \"mod2\",        \"key\": \"8\"    },    \"throw-space-9\": {        \"mod\": \"mod2\",        \"key\": \"9\"    },    \"throw-space-10\": {        \"mod\": \"mod2\",        \"key\": \"0\"    },    \"throw-space-left\": {        \"mod\": \"mod2\",        \"key\": \"left\"    },    \"throw-space-right\": {        \"mod\": \"mod2\",        \"key\": \"right\"    },    \"toggle-float\": {        \"mod\": \"mod1\",        \"key\": \"t\"    },    \"toggle-tiling\": {        \"mod\": \"mod2\",        \"key\": \"t\"    },    \"display-current-layout\": {        \"mod\": \"mod1\",        \"key\": \"i\"    },    \"reevaluate-windows\": {        \"mod\": \"mod1\",        \"key\": \"z\"    },    \"toggle-focus-follows-mouse\": {        \"mod\": \"mod2\",        \"key\": \"x\"    },    \"relaunch-amethyst\": {        \"mod\": \"mod2\",        \"key\": \"z\"    },    \"floating\": [],    \"floating-is-blacklist\": true,    \"float-small-windows\": true,    \"mouse-follows-focus\": false,    \"focus-follows-mouse\": false,    \"enables-layout-hud\": true,    \"enables-layout-hud-on-space-change\": true,    \"window-margin-size\": 0,    \"window-resize-step\": 5,    \"window-margins\": false,    \"window-minimum-height\": 0,    \"window-minimum-width\": 0,    \"ignore-menu-bar\": false,    \"use-canary-build\": false,    \"new-windows-to-main\": false,    \"follow-space-thrown-windows\": true,    \"send-crash-reports\": false,    \"screen-padding-top\": 0,    \"screen-padding-bottom\": 0,    \"screen-padding-left\": 0,    \"screen-padding-right\": 0,    \"debug-layout-info\": false,    \"restore-layouts-on-launch\": true}```"},{"name":"amplify.md","content":"```tsimport Amplify from '@aws-amplify/core';import PubSub from '@aws-amplify/pubsub';import API, { graphqlOperation } from '@aws-amplify/api';import awsmobile from '../aws-exports';Amplify.configure(awsmobile);API.configure(awsmobile);PubSub.configure(awsmobile);``````tsimport { createTodo, deleteTodo, updateTodo } from '../graphql/mutations';import { getTodo, listTodos } from '../graphql/queries';import { onCreateTodo, onUpdateTodo, onDeleteTodo } from '../graphql/subscriptions';```昨日\tCRUD\tgraphql作成\tCREATE\tMutation取得\tREAD\tQuery更新\tUPDATE\tMutation削除\tDELETE\tMutation加えてgraphqlではSubscription（購読）というものがあります。これは、端的にいうとサーバー側からのPushのようなものexport const getTodo = `query GetTodo($id: ID!) {  getTodo(id: $id) {    id    description    isDone  }}`;- amplify auth snshttps://qiita.com/takeshi_hirosue/items/1c32e43816ea1d6a204d#step2-3-%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E8%A8%AD%E5%AE%9A- amplify AWS Amplify（Cognito）でGoogleソーシャルログインする【爆速】React+Amplify+AppSyncでリアルタイム掲示板アプリhttps://qiita.com/G-awa/items/a5b2cc7017b1eceeb002https://aws-amplify.github.io/amplify-js/api/https://qiita.com/nagym/items/638974a3a5aaa63841c8GraphQL API開発スピードを爆上げするAWS Amplify Mockingことはじめ- [How to allow guest users to access web applications?  (Amplify, AWS AppSync, Cognito  IAM) - YouTube](https://www.youtube.com/watch?v=ZRJbosMAWU4\u0026ab_channel=EnlearAcademy)"},{"name":"animation.md","content":"- [GitHub - michalsnik/aos: Animate on scroll library](https://github.com/michalsnik/aos)- [2020 年中期の Web アニメーション実装の全容と方法 70 選 - Qiita](https://qiita.com/ryokkkke/items/42ae2a661d64036285d2)- [troisjs.github.io/](https://troisjs.github.io/)- [GitHub - freshfork/p5.EasyCam: A p5.js library for easy 3D camera control.](https://github.com/freshfork/p5.EasyCam)"},{"name":"ansible.md","content":"[色んなプロジェクトを跨いだ Ansible のベストプラクティスについて改めて考えてみる - Qiita](https://qiita.com/t-okibayashi/items/2dd340dfd16c2d2e4ca1)- [Ansible の基本 ① - Ansible の概要](https://zenn.dev/kudloid/articles/6b7e1584f204d6)- [Ansible 勉強＆実践結果（随時更新） - Qiita](https://qiita.com/comefigo/items/d749001da5637e09cb1b)- [[随時更新]ansible でよく使うコマンド・モジュールまとめ - Qiita](https://qiita.com/uzresk/items/1aa391eef232766bf817)- [検索 | Zenn](https://zenn.dev/search?q=ansible)Python 製非エージェント型の構成管理ツールプラットフォーム問わずに利用できる（Linux、Windows、Docker、Iaas、ベアメタル、ネットワーク機器、HW ベンダーのマネージド機器）yml、json で構成定義ファイル（Playbook）を書けるため、学習コストが低いRed Hat 社がメインで開発している OSSRed Hat がバックについているので、長期的な開発が見込める各ベンダーを巻き込んだ取り組みをしていることもあり、対応プラットフォームが多いNASA、NEC、HP、Juniper、CISCO、EA、CocaCola など名だたる大企業が使っているAnsible Core ･･･ Ansible の本体部分Ansible Tower ･･･ Red Hat 社が提供する Web GUI ベースの Ansible 管理ツール（AWX の特定のバージョンから切り出したバージョン）Ansible Engine ･･･ Red Hat 社がエンタープライズ向けに有償保証を加えた商品（コアモジュールも保証対象）AWX ･･･ Ansible Tower の開発版で Apache v2 ライセンスで運用されているAnsible 本体Inventory ･･･ 操作対象のマシン(ホスト)の管理ファイルModule ･･･ 操作対象のマシンを操作するコアモジュールと有志モジュールが多数（13000？）自作モジュールも簡単に作れるPlaybook ･･･ どの Inventory にどの Module でどのように操作するかを定義する定義ファイル（手順書）InventoryInventory(静的)INI 形式、YAML 形式でホスト情報を記述ホストの接続情報があらかじめわかっているDynamic Inventory(動的)ホスト情報を json に出力するスクリプトansible コマンド実行時にリアルタイムでスクリプトが実行されるスクリプト経由で動的にホスト情報を取得できるansible-playbook -vTerraform and Ansible is a powerful combo that I use for provisioning cloud infrastructure. For basic cloud instances setup, I invoke Ansible with local-exec and later I invoke Ansible separately with dynamic inventory.You can find an example of how I do it at c10k/infrastructureThanks! Until next time!プッシュベース操作を行いたいタイミングでクライアント（開発用 PC）からホスト（サーバー）に必要なスクリプトやコードを送信し、ホスト上で操作を実行します。対義語のプルベースの設定管理システムは、ホスト上にエージェントをインストールし、リポジトリの変更やタイマーなどの何らかのイベントをきっかけにしてリポジトリから必要なスクリプトやコードをプルし、ホスト上で操作を実行します。Ansible はプルベースの設定管理システムに比べ、ホスト上に余計なソフトウェアをインストールする必要がないため、サーバーの構成はシンプルとなり保守性が高まります。宣言的ホストで何をするか（手続き的）ではなく、ホストがどういう状態であるかを記述します。つまり開発者は具体的な操作やその手順をあまり意識しなくてもホストを望んだ状態に設定することができます。冪等性ホストが既に playbook によって指定された状態にある場合、Ansible は何もしません。つまり Ansible を何度実行してもホストは同じ状態になります。間違って複数回実行してもホストの環境を破壊することはありません。"},{"name":"anynight.md","content":"\" #fffcf5\" #e93c00\" #f4f8fb\" #ffffff\" #f5f7f8\" #222222\" #777777\" #888888\" #f2f2f2\" #bbbbbb\" #68c39f\" #449bb5\" #ffc60e\" #ff96d4\" #562fc3\" #5f5bff\" #1abc9c\" #16a085\" #2ecc71\" #27ae60\" #3498db\" #2980b9\" #9b59b6\" #8e44ad\" #34495e\" #2c3e50\" #f1c40f\" #f39c12\" #e67e22\" #d35400\" #e74c3c\" #c0392b\" #e93c00\" #db1a1a\" #ecf0f1\" #bdc3c7\" #95a5a6\" #7f8c8d\" #34495e\" #2c3e50"},{"name":"apollo.md","content":"- [apollo-client/static-typing.md at main · apollographql/apollo-client · GitHub](https://github.com/apollographql/apollo-client/blob/main/docs/source/development-testing/static-typing.md)- [Dashboard - Build Integrations 10x-100x Faster](https://www.onegraph.com/)"},{"name":"architecture.md","content":"アプリケーション全般クラウド: GCP言語: golang実行基盤: GAEインタフェースと認証認証基盤: Firebase AuthenticationWEB API: protocol buffers on HTTP 1.1ルーティング FW: EchoDB 周りDB: Cloud SQL for MySQLORM: sqlboilerER 図生成ツール: schemaspyマイグレーション: golang-migrateCI/CD 基盤 \u0026 テストCI・CD: Github Actionsアサーション・モック: testifyデータ生成ツール: testfixturesコード診断: gosec \u0026 reviewdogログ周り収集基盤: Cloud Loggingログライブラリ: zerolog監視: Cloud Monitoring分析: BigQuery- [少人数での爆速開発を目指して golang×GCP の技術選定をした話](https://zenn.dev/sh_komine/articles/35527f84a2be3a)Next.jsstyled-components：毎回迷いつつもなんだかんだで採用することになる CSS in JS。今後パフォーマンスの問題があれば置き換えるかも。twemoji：Apple の OS 以外の絵文字が Zenn のテイストにマッチしなかったため使用。markdown-it：マークダウンを HTML へ変換するために使用。などGoogle App Engine（GAE）Cloud Build：CI ツール。自動テストと自動デプロイを実行。KMS：秘匿情報の管理。Cloud Build でのビルド時に暗号化された秘匿情報を復号。Cloud Storage：ユーザーがアップロードする画像の保存先。Cloud SQL：DB。PostgreSQL を利用。Google Analytics Reporting API：各コンテンツの PV や滞在時間などの統計情報を取得するため。Stripe：決済のため。SendGrid：メール配信のため。GitHub Apps：ユーザーが連携したリポジトリからコンテンツを同期するため。Cloudinary：OGP 画像を動的に生成するため。- [Zenn を支える技術とサービス構成](https://zenn.dev/catnose99/articles/zenn-dev-stack)"},{"name":"ascii-challenge.md","content":"asciihttps://github.com/joelibaceta/video-to-asciihttps://github.com/topics/ascii-diagramhttps://www.npmjs.com/package/ascii-videohttps://stackoverflow.com/questions/6235785/run-a-shell-script-with-an-html-buttonhttps://www.youtube.com/watch?v=HOzHG581G8Y\u0026ab_channel=KrisOcchipintihttps://www.youtube.com/watch?v=V9cRLasYC_Y\u0026ab_channel=CreativeCodingNYCnext terminalhttps://www.youtube.com/watch?v=rnMXH_K8hz4\u0026t=22shttps://www.brow.sh/``` _________________________________________/ muda muda muda muda muda muda muda muda \\\\ muda                                    / -----------------------------------------        \\   ^__^         \\  (oo)\\_______            (__)\\       )\\/\\                ||----w |                ||     || _____________( I feel lost ) -------------        o   ^__^         o  (oo)\\_______            (__)\\       )\\/\\                ||----w |                ||     ||＿人人人人人人＿＞　突然の死　＜￣Y^Y^Y^Y^Y^Y^￣``````oooo                  oooo  oooo`888                  `888  `888 888 .oo.    .ooooo.   888   888   .ooooo. 888P\"Y88b  d88' `88b  888   888  d88' `88b 888   888  888ooo888  888   888  888   888 888   888  888    .o  888   888  888   888o888o o888o `Y8bod8P' o888o o888o `Y8bod8P'vim /[^\\x01-\\x7e]/ src/pages/contact/_.vue | cwvim /[^\\x01-\\x7e]/ src/components/contact/_/\\*.vue | cwbrew install boxesboxes -l | morels | boxestablehttps://unix.stackexchange.com/questions/126630/creating-diagrams-in-asciihttps://stackoverflow.com/questions/15215326/how-can-i-create-table-using-ascii-in-a-consoleecho \"[ Bonn ] -- car --\u003e [ Berlin ], [ Ulm ]\" | graph-easy"},{"name":"ascii-text.md","content":"- [コマンド入力一撃で端末を大量に分割してタスクを瞬殺する tmux-xpanes - Qiita](https://qiita.com/greymd/items/8744d1c4b0b2b3004147)```figlet -f kban'||      '|| ||  ..   || ...   ....   .. ... || .'    ||'  || '' .||   ||  || ||'|.    ||    | .|' ||   ||  ||.||. ||.  '|...'  '|..'|' .||. ||.figlet -f flaktur kis9a      ..         .       .x+=:.\u003c .z@8\"`        @88\u003e    z`    ^% !@88E          %8P        .   \u003ck   .xn!~%x. '888E   u       .       .@8Ned8\"  x888   888.         u  888E u@8NL   .@88u   .@^%8888\"  X8888   8888:     us888u.  888E`\"88*\"  ''888E` x88:  `)8b. 88888   X8888  .@88 \"8888\"  888E .dN.     888E  8888N=*8888 88888   88888\u003e 9888  9888  888E~8888     888E   %8\"    R88 `8888  :88888X 9888  9888  888E '888\u0026    888E    @8Wou 9%    `\"**~ 88888\u003e 9888  9888  888E  9888.   888\u0026  .888888P`    .xx.   88888  9888  9888'\"888*\" 4888\"   R888\" `   ^\"F     '8888\u003e  8888~  \"888*\"\"888\"   \"\"    \"\"      \"\"                888\"  :88%     ^Y\"   ^Y'                                    ^\"===\"\"figlet -f larry3d kis9a __                     __/\\ \\      __          /'_ `\\\\ \\ \\/'\\ /\\_\\    ____/\\ \\L\\ \\     __ \\ \\ , \u003c \\/\\ \\  /',__\\ \\___, \\  /'__`\\  \\ \\ \\\\`\\\\ \\ \\/\\__, `\\/__,/\\ \\/\\ \\L\\.\\_   \\ \\_\\ \\_\\ \\_\\/\\____/    \\ \\_\\ \\__/.\\_\\    \\/_/\\/_/\\/_/\\/___/      \\/_/\\/__/\\/_/ _______  _______ _________ _______(  ____ \\(  ____ )\\__   __/(  ____ \\| (    \\/| (    )|   ) (   | (    \\/| (__    | (____)|   | |   | ||  __)   |  _____)   | |   | || (      | (         | |   | || (____/\\| )      ___) (___| (____/\\(_______/|/       \\_______/(_______/ .|';                     ||` ||                       ||'||'  .|''|, `||''|,  .|''||  .|''|, '||''| ||   ||..||  ||  ||  ||  ||  ||..||  ||.||.  `|...  .||  ||. `|..||. `|...  .||.#   #  ###   #### #   #  ###  #   ### ## #   # #     #   # #   # # # ## # # #   # #      #### #   # # # ##   # #   # #         # #   # # # ##   #  ###   ####     #  ###   ###       __                 __.----.|  |--.--.--.-----.|  |--.--.--.|  __||     |  |  |     ||    \u003c|  |  ||____||__|__|_____|__|__||__|__|___  |                               |_____|```"},{"name":"atcoder.md","content":"- [AtCoder に登録したら次にやること ～ これだけ解けば十分闘える！過去問精選 10 問 ～ - Qiita](https://qiita.com/drken/items/fd4e5e3630d0f5859067)- [何か色々な - AtCoder に登録したら解くべき精選過去問 10 問を Lua で解いてみた](https://sites.google.com/view/nobuyuki1097/programming/atcoder-by-lua)- [AtCoder に登録したら解くべき精選過去問 10 問 を Go で解いてみた - Qiita](https://qiita.com/ktateish/items/afdda77497c8e2ee0742)- [AtCoder に登録したら解くべき精選過去問 10 問を AWK で解いてみた - Qiita](https://qiita.com/kotatsugame/items/2619398606b30aaf097b)- [AtCoder 精選過去問 10 問を JS ワンライナー で挑戦 - Qiita](https://qiita.com/dsudo/items/e1abbd27b178ec8a4605)- [AtCoder に登録したら解くべき精選過去問 10 問を Bash で解いてみた](https://qiita.com/cympfh/items/b860ecb5f5415b15f3c9javascript_reference-ed0a9eabc29a068454c8)"},{"name":"auth.md","content":"| 種別     | 説明                                                                || -------- | ------------------------------------------------------------------- || htpasswd | MD5 や SHA1、Bcrypt でパスワードがエンコードされたファイル。        || OSIAM    | REST で使用できる認証管理サーバ。                                   || Simple   | 引数でユーザとパスワードを指定。                                    || OAuth2   | ご存じ OAuth2。現在は組み込みプロバイダとして GitHub のみサポート。 |JWT- header, payload, signature,authentication stepauthorization stepdesiisions steptoken validationHTTP Basic と HTTP Digest 認証サードパーティ認証：QQ、weibo、doubian、OPENID、google、github、facebook および twitterカスタム定義のユーザログイン、サインアップ、ログアウトは一般的に session、cookie 認証にもとづいています。"},{"name":"awk.md","content":"ユーザ毎の CPU 使用率を見る$ ps aux | awk '{ if(NR\u003e1){p[$1] += $3; n[$1]++ }}END{for(i in p) print p[i], n[i], i}'# 文字数カウント(wc -c)$ awk '{n+=length($0)} END{print n}' filename# 単語数カウント(wc -w)$ awk '{n+=NF} END{print n}' filename# 行数カウント(wc -l)$ awk 'END{print NR}' filename指定行から指定行まで表示$ awk 'NR==10,NR==20'# 奇数行$ awk 'NR%2' filename# 偶数行$ awk 'NR%2==0' filename``` FS        入力フィールドセパレータ(空白とタブ) CNVFMT        数値を文字列に変換するフォーマット OFMT          数字の出力フォーマット(%.6g) OFS           出力フィールドセパレータ（空白） ORS           出力レコードセパレータ（\\n） RS        入力レコードセパレータ（\\n） SUBSEP        配列添字セパレータ(\\034) ARGC          コマンド行の引数の数+1 ARGV          コマンド行の引数の配列 ENVIRON[\"...\"] 環境変数の値 FILENAME       入力ファイル名 FNR           入力ファイルの通算レコード NF        入力レコードのフィールド数 NR        入力レコード総数 RLENGTH       matchで適合した文字列の長さ RSTART        matchで適合した文字列の開始位置printf(\"%d\\n\",x)               #整数として出力printf(\"%5d\\n\",x)              #5桁で右詰の整数として出力printf(\"%e\\n\",x)               #浮動小数点数(eの後の数字は10の累乗を表す)printf(\"%7.2f\\n\",x)            #浮動小数点数、7桁で小数第2位までprintf(\"%6.2f\\n\",x)            #浮動小数点数、6桁で小数第2位までprintf(\"%5.2f\\n\",x)            #浮動小数点数、5桁で小数第2位までprintf(\"%4.2f\\n\",x)            #浮動小数点数、4桁で小数第2位までprintf(\"%o\\n\",x)               #8進数として出力printf(\"%x\\n\",x)               #16進数として出力printf(\"%c\\n\",x)               #文字コードして対応するアルファベットを出力printf(\"%s\\n\",x)               #そのまま文字列として出力printf(\"%10s\\n\",x)             #右詰で10桁のスペースに出力printf(\"%-10s\\n\",x)            #左詰で10桁のスペースに出力printf(\"%.3s\\n\",x)             #左詰で3文字のみ出力printf(\"%10.3s\\n\",x)           #右詰で10桁のスペースに3文字を出力printf(\"%-10.3s\\n\",x)          #左詰で10桁のスペースに3文字を出力#ワンライナーで使う場合は以下のように置き換えればOKecho 12345 | awk '{ printf(\"%-10.3s\\n\",$0) }'```[awk コマンド（テキストの加工やパターン処理をする） : JP1/Advanced Shell](http://itdoc.hitachi.co.jp/manuals/3021/3021313320/JPAS0315.HTM)| 制御文                            | 構文                                                                                     | 内容                                                                                                                                           || --------------------------------- | ---------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- || if 文                             | if (条件式) 処理 [else 処理]                                                             | 条件分岐します。                                                                                                                               || if (変数 in 配列) 処理[else 処理] | 変数に指定した添え字の配列要素が配列に存在するかどうかを判定します。                     || while 文                          | while (条件式) 処理                                                                      | 条件が成立している間，繰り返します。                                                                                                           || for 文                            | for (初期化式; 継続条件式; 再初期化式) 処理                                              | 繰り返し実行します。                                                                                                                           || for (変数 in 配列) 処理           | 各配列要素の添え字の値を順次取り出しながら処理します。添え字の値の取り出しは順不同です。 || do 文                             | do 処理 while (継続条件式)                                                               | 後判定によって条件が成立している間，繰り返します。                                                                                             || break 文                          | break                                                                                    | 繰り返し処理を抜けます。                                                                                                                       || continue 文                       | continue                                                                                 | 繰り返し処理を中断して，繰り返し処理の先頭に戻ります。                                                                                         || next 文                           | next                                                                                     | 処理中の入力レコードに対して，この制御文以降の処理を停止し，次の入力レコードの処理を開始します。                                               || nextfile 文                       | nextfile                                                                                 | 処理中の入力ファイルに対して，この制御文以降の処理を停止し，次の入力ファイルの処理を開始します。                                               || return 文                         | return [expr]                                                                            | ユーザー定義関数を終了します。式 expr で指定した値を呼び出し元に返します。式 expr を指定しない場合は，0 がユーザー定義関数の戻り値となります。 || delete 文                         | delete 配列                                                                              | 配列を削除します。                                                                                                                             || delete 配列[要素]                 | 配列の要素を削除します。                                                                 || exit 文                           | exit [expr]                                                                              | 処理中のスクリプトの実行を停止します。                                                                                                         || 関数名        | 内容                                                                                                                                || ------------- | ----------------------------------------------------------------------------------------------------------------------------------- || atan2(y,x)    | y/x の逆正接を返します。単位はラジアンです。引数が不足している場合は 1 を返し，警告メッセージを出力します。                         || cos(x)        | x の余弦を返します。単位はラジアンです。                                                                                            || exp(x)        | x の指数関数を返します。結果がオーバーフローまたはアンダーフローする場合は 1 を返し，警告メッセージを出力します。                   || int(x)        | x の小数点以下を切り捨てて整数を返します。                                                                                          || log(x)        | x の自然対数を返します。x が 0 または負の場合は 1 を返し，警告メッセージを出力します。                                              || rand()        | 乱数 n を返します（0≦n ＜ 1 の範囲）。srand 関数でシード値を設定しない場合は，コマンドを実行するたびに同じ値を返します。            || sin(x)        | x の正弦を返します。単位はラジアンです。                                                                                            || sqrt(x)       | x の平方根を返します。x が負の場合は 1 を返し，警告メッセージを出力します。                                                         || srand([expr]) | 式 expr を rand 関数用のシード値を設定して，設定したシード値を返します。expr を省略した場合は，時刻を基にしたシード値を設定します。 || 関数名                    | 内容                                                                                                                                                                                                                                                                                                  || ------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || gsub(r, t[, s])           | 文字列 s 中のすべての正規表現 r を t に置き換えます。s を省略した場合，$0（レコード全体が格納されているフィールド変数）を置き換え対象とします。t に\u0026を指定した場合は，\u0026が一致した文字列に置き換えられます。返り値として置き換えた回数を返します。                                                     || index(s,t)                | 文字列 s 中の文字列 t の位置を返します。文字列 t がなかった場合は 0 を返します。                                                                                                                                                                                                                      || length[([s])]             | 文字列 s の文字数を返します。s を指定しなかった場合は，$0（レコード全体が格納されているフィールド変数）の文字数を返します。                                                                                                                                                                           || match(s, r)               | 文字列 s 中の正規表現 r が現れる位置を返します。正規表現 r がなかった場合には 0 を返します。また，RSTART 組み込み変数には正規表現 r に一致した文字列の位置が設定されます。不一致時は 0 になります。RLENGTH 組み込み変数には正規表現 r に一致した文字列の長さが設定されます。不一致時は-1 になります。 || sprintf(書式, 式[, ... ]) | 書式に従って，式を整形した結果の文字列を返します。書式については出力書式の説明を参照してください。                                                                                                                                                                                                    || split(s, array[, fs])     | 文字列 s をフィールドセパレータ fs によってフィールド分割し，配列 array に格納します。戻り値として配列の要素数を返します。分割した各フィールドの値は，配列 array に，array[1]，array[2]，…，array[戻り値]の順に格納されます。                                                                         |フィールドセパレータ fs の指定を省略した場合は，フィールドセパレータとして組み込み変数 FS の値が使用されます。フィールドセパレータ fs には文字列および正規表現を指定できます。また，フィールドセパレータ fs に文字指定なしを示す「\"\"」を指定した場合は，1 文字ずつ分割されます。 || sub(r, t[, s]) | 文字列 s 中に最初にあった正規表現 r を t に置き換えます。s を省略した場合，$0（レコード全体が格納されているフィールド変数）を置き換え対象とします。t に\u0026を指定した場合は，\u0026が一致した文字列に置き換えられます。返り値として正規表現 r があった場合は 1 を返します。正規表現 r がなかった場合は 0 を返します。 || substr(s, m[, n]) | 文字列 s の m 番目の文字から最大 n 文字の部分文字列を返します。n を省略した場合は，m 番目以降のすべての文字列を返します。 || tolower(str) | 文字列 str 中のすべての英大文字を英小文字に変換した文字列を返します。 || toupper(str) | 文字列 str 中のすべての英小文字を英大文字に変換した文字列を返します。 || 関数名       | 内容                                                                                                                                                       || ------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------- || compl(x)     | 整数 x の 1 の補数を返します。                                                                                                                             || and(x, y)    | 整数 x と整数 y のビットごとの論理積を返します。                                                                                                           || or(x, y)     | 整数 x と整数 y のビットごとの論理和を返します。                                                                                                           || xor(x, y)    | 整数 x と整数 y のビットごとの排他的論理和を返します。                                                                                                     || lshift(x, n) | 整数 x をビット数 n 分，左にシフトした値を返します。ビットのシフトは算術シフトで行われるため，符号部分もシフト対象となります。                             || rshift(x, n) | 整数 x をビット数 n 分，右にシフトした値を返します。ビットのシフトは算術シフトで行われるため，符号部分は右にシフトした時に補てんする符号として扱われます。 || 関数名             | 内容                                                                               || ------------------ | ---------------------------------------------------------------------------------- || system(コマンド名) | コマンド名に指定したプログラムを実行し，実行したプログラムのステータスを返します。 |コマンド名は，実行するプログラムの名称とその引数の値を\"（ダブルクォーテーション）で囲んで，コマンドライン形式で記述します。コマンド名の代わりにコマンド名を代入した変数の名称も指定できます。UNIX の場合，実行したプログラムのステータスは，プログラムが返す終了コードの下位 8 ビットの値となります。 || 変数名    | 内容                                                           || --------- | -------------------------------------------------------------- || $0        | 入力ファイルから現在読み込んでいるレコードの内容を設定します。 || $1,$2,... | 現在読み込んでいるレコードの内容を順に設定します。             |組み込み変数 FS の値によって分割された各フィールド値が，レコードの最初のフィールドに$1 変数，2 番目のフィールドに$2 変数というように設定されます。 || $変数名 | 変数にフィールド番号を設定することで，$0 や$1 など直接フィールド番号を記述した場合と同じようにフィールドを参照できます。※関数や制御文で使用する場合，使用する前に変数にフィールド番号を設定する必要があります。 || $(式) | フィールド番号を求める式（変数名+1 など）を式に指定することで，$0 や$1 など直接フィールド番号を記述した場合と同じようにフィールドを参照できます。 || 変数名 | 内容                                                                                                                                                                                                                    || ------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || ARGC   | コマンドライン引数の個数です。オプション値およびスクリプト指定値は含みません。スクリプトおよび-v オプションで変更できます。-v オプションで ARGC に 0 を設定した場合，引数に対象パス名が指定されていない状態になります。 || ARGV   | コマンドライン引数の配列です。スクリプトで変更できます。引数に指定した対象パス名が格納されている要素に NULL を設定すると，入力ファイルからレコードの入力が行われません。-v オプションで指定した値は上書きされます。     || CONVFMT※ | 数値を変換するときに使用する変換書式です。デフォルトは%.6g です。数値に小数部分がある場合に有効となります。 || ENVIRON | 実行時の環境変数の配列です。添字は環境変数名です。環境変数名は\"（ダブルクォーテーション）で囲んで指定します。環境変数名の代わりに環境変数名を代入した変数の名称も指定できます。 || FILENAME | 現在の入力ファイル名です。標準入力からの入力の場合はファイル名に「-」が設定されます。 || FNR | 現在の入力ファイルの入力レコード数です。対象パス名で指定したファイルから 1 レコードを入力するたびに更新されます。また，「getline [変数名]」でレコードを入力するときにも更新されます。複数の対象パス名を指定した場合，次の入力ファイルから入力を開始するときに 0 で初期化されます。 || FS | フィールドセパレータです。デフォルトは 1 バイトのスペースです。正規表現を使用できます。フィールドセパレータを変更する場合，指定する文字列の長さは 99 バイト以下にしてください。また，フィールドセパレータ値が 1 バイトのスペースの場合は，1 バイトのスペースとタブ(\\t)によってフィールド分割されます。フィールドセパレータに値を設定しない場合は，1 文字ずつフィールド分割されます。複数の文字を指定する場合は，正規表現となるため，\\はエスケープ文字として扱われます。-F オプションと同時に使用した場合は，この変数の値が優先されます。 || NF | 現在の入力レコードのフィールド数です。対象パス名で指定したファイルからレコードを入力すると格納されます。また，getline 関数でフィールド変数$0 にレコードを入力したときにも格納されます。$NF と記述すると，現在の入力レコードの最終フィールドの値を参照できます。 || NR | 現在までに読み込んだ入力レコード数です。対象パス名で指定したファイルから 1 レコードを入力するたびに更新されます。また，「getline [変数名]」で次のレコードを入力するときにも更新されます。複数の対象パス名を指定した場合は，レコードの入力が終了したファイルのレコード数も含まれます。 || OFMT※ | 数値の出力書式です。デフォルトは%.6g です。数値に小数部分がある場合に有効となります。 || OFS | 出力フィールドセパレータです。デフォルトは 1 バイトのスペースです。 || ORS | 出力レコードセパレータです。デフォルトは改行文字（\\n）です。Windows の場合，改行文字（\\n）は［CR］+［LF］で出力されます。 || RLENGTH | match 関数で一致した文字列の長さです。一致しなかった場合は-1 が設定されます。 || RS | 入力レコードセパレータです。デフォルトは改行文字です。値を変更する場合，1 バイトの文字だけ設定できます。文字列やマルチバイト文字を指定した場合は，先頭 1 バイトを使用します。改行文字（\\n）を設定した場合，Windows は，入力ファイル中の［CR］+［LF］または［LF］が対象となります。UNIX は，入力ファイル中の［LF］が対象となります。改行文字以外の値を設定した場合，Windows は，入力レコードに含まれる改行文字は［LF］です。UNIX は，入力ファイル中の改行文字が［CR］+［LF］の場合は［CR］も含まれます。 || RSTART | match 関数で一致した文字列の開始位置です。一致しなかった場合は 0 が設定されます。 || SUBSEP | 多次元配列のセパレータです。デフォルトは 0x1C です。 || 演算子 | 説明 || ------ | ---- || =，+=，-=，\\*=，/=，%=，^=，\\*\\*= | 代入演算子です。 || ?: | 三項演算子です。 || \\|\\| | 論理 OR です。 || \u0026\u0026 | 論理 AND です。 || ~，!~ | 正規表現の一致(~)と不一致(!~)です。 || \u003c，\u003c=，\u003e，\u003e=，!=，== | 関係演算子です。 || スペース | 文字列連結です。 || +，- | 加算および減算です。 || \\*，/，% | 乗算，除算および剰余です。 || +，-，! | 単項および論理否定です。 || ^，\\*\\* | 累乗です。 || ++，-- | インクリメントおよびデクリメントです。 || 文字 | 説明                                                                                                                                  || ---- | ------------------------------------------------------------------------------------------------------------------------------------- || c    | 1 バイト文字です。                                                                                                                    || s    | 文字列です。                                                                                                                          || d    | 符号付き 10 進整数です。                                                                                                              || i    || o    | 符号なし 8 進整数です。                                                                                                               || x    | 符号なし 16 進整数です。10〜15 の値には「abcdef」を使用します。                                                                       || X    | 符号なし 16 進整数です。10〜15 の値には「ABCDEF」を使用します。                                                                       || u    | 符号なし 10 進整数です。                                                                                                              || f    | 浮動小数点数です。[-]dddd.dddd 形式に変換します。                                                                                     || e    | 浮動小数点数です。[-]d.dddde[+-]dd[d]形式に変換します。                                                                               || g    | 変換指定子 e または f で出力される符号付きの値のうち，指定された値および精度を表現できる短い方の書式です。末尾の 0 は出力されません。 || E    | 浮動小数点数です。[-]d.ddddE[+-]dd[d]形式に変換します。                                                                               || G    | 変換指定子 E または f で出力される符号付きの値のうち，指定された値および精度を表現できる短い方の書式です。末尾の 0 は出力されません。 || %    | %の文字です。                                                                                                                         || 文字コード種別 | 指定できる値（16 進数値）       || -------------- | ------------------------------- || シフト JIS     | 0x01-0x80，0xA0-0xDF，0xFD-0xFF || UTF-8          | 0x01-0xBF，0xFE-0xFF            || EUC            | 0x01-0x8D，0x90-0xA0，0xFF      || C              | 0x01-0xFF                       || 特殊ファイル名 | 意味           || -------------- | -------------- || /dev/stdin     | 標準入力       || /dev/stdout    | 標準出力       || /dev/stderr    | 標準エラー出力 || 終了コード          | 意味                                           || ------------------- | ---------------------------------------------- || 0                   | 正常終了                                       || 1 以上              | エラー終了                                     || exit 文で指定した値 | 制御文の exit 文で指定したコマンドの終了コード |"},{"name":"aws-cloudfront.md","content":"HTTP Error Code : 403 Forbiddenオリジン（今回は S3）が返却するステータスコード を入力します。S3 の場合は前述の通り、存在しないファイルでも 403 を返します。Error Caching Minum TTL（Seconds) : 300「Response Page Path」で指定するファイルのキャッシュ時間です。任意値で設定します。Customize Error Response : Yesカスタムファイルである error.html を表示させたいので「Yes」を選択します。Response Page Path : /error.htmlカスタムファイルの Path を指定します。/error.html とした場合、アクセス URL は https://domain/error.html となります。HTTP Response Code : 404 NotFound条件に合致して「Response Page Path」のファイルを表示した際に、「CloudFront がクライアントに返却するステータスコード」を指定します。"},{"name":"aws-elb.md","content":"- [AWS 入門 ELB を使った負荷分散（ロードバランサー） - Qiita](https://qiita.com/tseno/items/2041e82a7f2f8e721a18)[Elastic Load Balancing（複数のターゲットにわたる着信トラフィックの分配）| AWS](https://aws.amazon.com/jp/elasticloadbalancing/?whats-new-cards-elb.sort-by=item.additionalFields.postDateTime\u0026whats-new-cards-elb.sort-order=desc)- Application Load Balancer（ALB） L7 レイヤーでの負荷分散を行う。CLB より後に登場。"},{"name":"aws-pricing.md","content":"[GitHub - nishinoshake/aws-rough: ざっくり AWS](https://github.com/nishinoshake/aws-rough)[Amazon Web Services Simple Monthly Calculator](https://calculator.s3.amazonaws.com/index.html)[ざっくり AWS | AWS の料金を日本円でざっくり計算](https://aws-rough.cc)"},{"name":"aws-records.md","content":"| ラベル             | TTL                     | クラス                                         | タイプ                 | リソースデータ || ------------------ | ----------------------- | ---------------------------------------------- | ---------------------- | -------------- || ドメインの名前など | キャッシュする時間(sec) | いくつか種類はあるが基本的に IN しか使われない | リソースレコードの種類 | 値             || ラベル        | TTL | クラス | タイプ | リソースデータ || ------------- | --- | ------ | ------ | -------------- || example.co.jp | 60  | IN     | A      | 192.168.0.1    || 種類        | 意味                                   || ----------- | -------------------------------------- || A レコード  | ドメインに紐づく IP アドレス           || NS レコード | ドメインのゾーンを管理するネームサーバ || MX レコード | ドメインに紐づくメール受信サーバ       || TXT(SPF)    | このドメインのメール送信元サーバ       || SOA         | ドメインのゾーンの管理情報             || CNAME       | このドメインの別名でリソースの参照先   || 名前           | 住所                       || -------------- | -------------------------- || 東京駅         | 東京都千代田区丸の内１丁目 || 東京国際展示場 | 東京都江東区有明３丁目     || ドメイン      | IP アドレス || ------------- | ----------- || example.co.jp | 192.168.0.1 || example.jp    | 192.168.1.1 || 名前           | 住所                   || -------------- | ---------------------- || 東京国際展示場 | 東京都江東区有明３丁目 || 愛称（別名）     | 名前           || ---------------- | -------------- || 東京ビックサイト | 東京国際展示場 || ドメイン                                      | 参照先ドメイン || --------------------------------------------- | -------------- || [www.example.co.jp](http://www.example.co.jp) | example.co.jp  || ドメイン                                      | IP アドレス || --------------------------------------------- | ----------- || example.co.jp                                 | 192.168.0.1 || [www.example.co.jp](http://www.example.co.jp) | 192.168.0.1 || ドメイン      | IP アドレス || ------------- | ----------- || example.co.jp | 192.168.0.1 || ドメイン                                      | 参照先ドメイン || --------------------------------------------- | -------------- || [www.example.co.jp](http://www.example.co.jp) | example.co.jp  |"},{"name":"aws-services.md","content":"| サービス名                                                                                            | 説明                                                                 || ----------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- || [Amazon Athena](https://aws.amazon.com/jp/athena/?hp=tile\u0026so-exp=below)                               | SQL を使用して S3 でデータをクエリ                                   || [Amazon CloudSearch](https://aws.amazon.com/jp/cloudsearch/?hp=tile\u0026so-exp=below)                     | マネージド型検索サービス                                             || [Amazon Elasticsearch Service](https://aws.amazon.com/jp/elasticsearch-service/?hp=tile\u0026so-exp=below) | Elasticsearch クラスターを実行およびスケール                         || [Amazon EMR](https://aws.amazon.com/jp/elasticmapreduce/?hp=tile\u0026so-exp=below)                        | ホストされた Hadoop フレームワーク                                   || [Amazon Kinesis](https://aws.amazon.com/jp/kinesis/?hp=tile\u0026so-exp=below)                             | リアルタイムのビデオとデータストリームを分析                         || [Amazon Managed Streaming for Apache Kafka](https://aws.amazon.com/jp/msk/?hp=tile\u0026so-exp=below)      | フルマネージド型 Apache Kafka サービス                               || [Amazon Redshift](https://aws.amazon.com/jp/redshift/?hp=tile\u0026so-exp=below)                           | 高速、シンプル、費用対効果の高いデータウェアハウジングサービス       || [Amazon QuickSight](https://aws.amazon.com/jp/quicksight/?hp=tile\u0026so-exp=below)                       | 高速ビジネス分析サービス                                             || [AWS Data Exchange](https://aws.amazon.com/jp/data-exchange/?hp=tile\u0026so-exp=below)                    | クラウド内サードパーティのデータを検索、購読、および使用             || [AWS Data Pipeline](https://aws.amazon.com/jp/datapipeline/?hp=tile\u0026so-exp=below)                     | 定期的なデータ駆動型ワークフローに対するオーケストレーションサービス || [AWS Glue](https://aws.amazon.com/jp/glue/?hp=tile\u0026so-exp=below)                                      | データを準備およびロード                                             || [AWS Lake Formation](https://aws.amazon.com/jp/lake-formation/?hp=tile\u0026so-exp=below)                  | 安全なデータレイクを数日で構築                                       || サービス名                                                                                                                          | 説明                                                               || ----------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------ || [AWS Step Functions](https://aws.amazon.com/jp/step-functions/?hp=tile\u0026so-exp=below)                                                | 分散型アプリケーションの調整                                       || [Amazon AppFlow](https://aws.amazon.com/jp/appflow/?hp=tile\u0026so-exp=below)                                                           | SaaS アプリケーションと AWS のサービス向けのコード統合が不要       || [Amazon EventBridge](https://aws.amazon.com/jp/eventbridge/?hp=tile\u0026so-exp=below)                                                   | SaaS アプリと AWS のサービス向けサーバーレスイベントバス           || [Amazon Managed Workflows for Apache Airflow](https://aws.amazon.com/jp/managed-workflows-for-apache-airflow/?hp=tile\u0026so-exp=below) | 可用性に優れたセキュアなマネージドワークフローオーケストレーション || [Amazon MQ](https://aws.amazon.com/jp/amazon-mq/?hp=tile\u0026so-exp=below)                                                              | マネージド型メッセージブローカーサービス                           || [Amazon Simple Notification Service (SNS)](https://aws.amazon.com/jp/sns/?hp=tile\u0026so-exp=below)                                     | Pub/sub、SMS、E メール、およびモバイルプッシュ通知                 || [Amazon Simple Queue Service (SQS)](https://aws.amazon.com/jp/sqs/?hp=tile\u0026so-exp=below)                                            | マネージド型メッセージキュー                                       || [AWS AppSync](https://aws.amazon.com/jp/appsync/?hp=tile\u0026so-exp=below)                                                              | 多くのソースから適切なデータを使用して、大規模にアプリを強化       || サービス名                                                                                                                         | 説明                                                        || ---------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------- || [AWS Cost Explorer](https://aws.amazon.com/jp/aws-cost-management/aws-cost-explorer/?hp=tile\u0026so-exp=below)                         | AWS のコストと使用状況を分析                                || [AWS Budgets](https://aws.amazon.com/jp/aws-cost-management/aws-budgets/?hp=tile\u0026so-exp=below)                                     | カスタムコストと使用予算を設定                              || [AWS のコストと使用状況レポート](https://aws.amazon.com/jp/aws-cost-management/aws-cost-and-usage-reporting/?hp=tile\u0026so-exp=below) | 包括的なコストと使用状況の情報にアクセス                    || [リザーブドインスタンスレポート](https://aws.amazon.com/jp/aws-cost-management/reserved-instance-reporting/?hp=tile\u0026so-exp=below)  | リザーブドインスタンス (RI) の詳細を把握する                || [Savings Plans](https://aws.amazon.com/jp/savingsplans/?hp=tile\u0026so-exp=below)                                                      | 柔軟な料金設定でコンピューティング使用コストを最大 72% 節約 || サービス名                                                                                      | 説明                                                       || ----------------------------------------------------------------------------------------------- | ---------------------------------------------------------- || [Amazon Managed Blockchain](https://aws.amazon.com/jp/managed-blockchain/?hp=tile\u0026so-exp=below) | スケーラブルなブロックチェーンネットワークを作成および管理 || [Amazon Quantum Ledger Database (QLDB)](https://aws.amazon.com/jp/qldb/?hp=tile\u0026so-exp=below)   | フルマネージド型台帳データベース                           || サービス名                                                                                                                                                                                                                                                                                             | 説明                                                           || ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------- || [Alexa for Business](https://aws.amazon.com/jp/alexaforbusiness/?hp=tile\u0026so-exp=below)                                                                                                                                                                                                                 | 組織に Alexa の力を                                            || [Amazon Chime](https://aws.amazon.com/jp/chime/?hp=tile\u0026so-exp=below)                                                                                                                                                                                                                                  | フラストレーションフリーの会議、ビデオ電話、チャット           || [Amazon Honeycode (ベータ)](https://www.honeycode.aws/?\u0026trk=el_a134p000003yC6YAAU\u0026trkCampaign=pac-edm-2020-honeycode-homepage\u0026sc_channel=el\u0026sc_campaign=pac-edm-2020-honeycode-website_links-adoption-aws_homepage_products_tile\u0026sc_outcome=Enterprise_Digital_Marketing\u0026sc_geo=NAMER\u0026sc_country=mult) | プログラミングなしでモバイルおよびウェブアプリケーションを構築 || [Amazon WorkDocs](https://aws.amazon.com/jp/workdocs/?hp=tile\u0026so-exp=below)                                                                                                                                                                                                                            | エンタープライズドキュメントの安全なストレージと共有           || [Amazon WorkMail](https://aws.amazon.com/jp/workmail/?hp=tile\u0026so-exp=below)                                                                                                                                                                                                                            | セキュリティに優れた E メールとカレンダー                      || サービス名                                                                                              | 説明                                                                  || ------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------- || [Amazon EC2](https://aws.amazon.com/jp/ec2/?hp=tile\u0026so-exp=below)                                       | クラウド内の仮想サーバー                                              || [Amazon EC2 Auto Scaling](https://aws.amazon.com/jp/ec2/autoscaling/?hp=tile\u0026so-exp=below)              | 需要に合わせてコンピューティング性能をスケール                        || [Amazon Lightsail](https://aws.amazon.com/jp/lightsail/?hp=tile\u0026so-exp=below)                           | 仮想プライベートサーバーを起動および管理                              || [AWS Batch](https://aws.amazon.com/jp/batch/?hp=tile\u0026so-exp=below)                                      | あらゆる規模でバッチジョブを実行                                      || [AWS Elastic Beanstalk](https://aws.amazon.com/jp/elasticbeanstalk/?hp=tile\u0026so-exp=below)               | ウェブアプリケーションを実行および管理                                || [AWS Lambda](https://aws.amazon.com/jp/lambda/?hp=tile\u0026so-exp=below)                                    | サーバーに煩わされずにコードを実行                                    || [AWS Outposts](https://aws.amazon.com/jp/outposts/?hp=tile\u0026so-exp=below)                                | AWS インフラストラクチャをオンプレミスで実行                          || [AWS Serverless Application Repository](https://aws.amazon.com/jp/serverlessrepo/?hp=tile\u0026so-exp=below) | サーバーレスアプリケーションの検索、デプロイと公開                    || [AWS Snow ファミリー](https://aws.amazon.com/jp/snow/?hp=tile\u0026so-exp=below)                             | エッジロケーションでデータを集約および処理して AWS に転送するデバイス || [AWS Wavelength](https://aws.amazon.com/jp/wavelength/?hp=tile\u0026so-exp=below)                            | 5G デバイスのための超低レイテンシーアプリケーションを提供             || [VMware Cloud on AWS](https://aws.amazon.com/jp/vmware/?hp=tile\u0026so-exp=below)                           | カスタムハードウェアを使用せずにハイブリッドクラウドを構築            || サービス名                                                                                                      | 説明                                                           || --------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------- || [Amazon Elastic Container Registry](https://aws.amazon.com/jp/ecr/?hp=tile\u0026so-exp=below)                        | コンテナイメージを簡単に保存、管理、デプロイ                   || [Amazon Elastic Container Service (ECS)](https://aws.amazon.com/jp/ecs/?hp=tile\u0026so-exp=below)                   | コンテナを実行するためのきわめて安全で信頼性と拡張性が高い方法 || [Amazon ECS Anywhere (近日公開)](https://pages.awscloud.com/AmazonECSAnywherePreview.html?hp=tile\u0026so-exp=below) | インフラストラクチャでの ECS                                   || [Amazon Elastic Kubernetes Service (EKS)](https://aws.amazon.com/jp/eks/?hp=tile\u0026so-exp=below)                  | 信頼性が最も高い Kubernetes の実行方法                         || [Amazon EKS Anywhere (近日公開)](https://aws.amazon.com/jp/eks/eks-anywhere/?hp=tile\u0026so-exp=below)              | インフラストラクチャでの Kubernetes                            || [Amazon EKS Distro](https://aws.amazon.com/jp/eks/eks-distro/?hp=tile\u0026so-exp=below)                             | 一貫した Kubernetes クラスターの実行                           || [AWS App2Container](https://aws.amazon.com/jp/app2container/?hp=tile\u0026so-exp=below)                              | 既存のアプリケーションのコンテナ化と移行                       || [AWS Fargate](https://aws.amazon.com/jp/fargate/?hp=tile\u0026so-exp=below)                                          | コンテナ向けサーバーレスコンピューティング                     || [AWS での Red Hat OpenShift](https://aws.amazon.com/jp/rosa/?hp=tile\u0026so-exp=below)                              | マネージド Red Hat OpenShift クラスター                        || サービス名                                                                                              | 説明                                                       || ------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------- || [Amazon Connect](https://aws.amazon.com/jp/connect/?hp=tile\u0026so-exp=below)                               | クラウドベースのコンタクトセンターサービス                 || [Amazon Pinpoint](https://aws.amazon.com/jp/pinpoint/?hp=tile\u0026so-exp=below)                             | チャネル間でのパーソナライズされたユーザーエンゲージメント || [Amazon Simple Email Service (SES)](https://aws.amazon.com/jp/ses/?hp=tile\u0026so-exp=below)                | E メールの送受信                                           || [Contact Lens for Amazon Connect](https://aws.amazon.com/jp/connect/contact-lens/?hp=tile\u0026so-exp=below) | 機械学習駆動型のコンタクトセンター分析                     || サービス名                                                                                                        | 説明                                                                                                || ----------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- || [Amazon Aurora](https://aws.amazon.com/jp/rds/aurora/?hp=tile\u0026so-exp=below)                                       | 高性能マネージド型リレーショナルデータベース                                                        || [Amazon Aurora Serverless v2 (プレビュー)](https://aws.amazon.com/jp/rds/aurora/serverless/?hp=tile\u0026so-exp=below) | 毎秒 100,000 件を超えるトランザクションに瞬時にスケール                                             || [Amazon DynamoDB](https://aws.amazon.com/jp/dynamodb/?hp=tile\u0026so-exp=below)                                       | マネージド型の NoSQL データベース                                                                   || [Amazon DocumentDB (MongoDB 互換)](https://aws.amazon.com/jp/documentdb/?hp=tile\u0026so-exp=below)                    | フルマネージド型ドキュメントデータベース                                                            || [Amazon ElastiCache](https://aws.amazon.com/jp/elasticache/?hp=tile\u0026so-exp=below)                                 | インメモリキャッシングシステム                                                                      || [Amazon Keyspaces (Apache Cassandra 向け)](https://aws.amazon.com/jp/mcs/?hp=tile\u0026so-exp=below)                   | マネージド型の Cassandra 対応データベース                                                           || [Amazon Neptune](https://aws.amazon.com/jp/neptune/?hp=tile\u0026so-exp=below)                                         | フルマネージド型グラフデータベースサービス                                                          || [Amazon Quantum Ledger Database (QLDB)](https://aws.amazon.com/jp/qldb/?hp=tile\u0026so-exp=below)                     | フルマネージド型台帳データベース                                                                    || [Amazon RDS](https://aws.amazon.com/jp/rds/?hp=tile\u0026so-exp=below)                                                 | MySQL、PostgreSQL、Oracle、SQL Server、MariaDB 向けのマネージド型リレーショナルデータベースサービス || [Amazon RDS on VMware](https://aws.amazon.com/jp/rds/vmware/?hp=tile\u0026so-exp=below)                                | オンプレミスデータベースの管理を自動化                                                              || [Amazon Redshift](https://aws.amazon.com/jp/redshift/?hp=tile\u0026so-exp=below)                                       | 高速、シンプル、費用対効果の高いデータウェアハウジングサービス                                      || [Amazon Timestream](https://aws.amazon.com/jp/timestream/?hp=tile\u0026so-exp=below)                                   | フルマネージド型の時系列データベース                                                                || [AWS Database Migration Service](https://aws.amazon.com/jp/dms/?hp=tile\u0026so-exp=below)                             | 最小限のダウンタイムでデータベースを移行できるサービス                                              || サービス名                                                                                      | 説明                                                                                       || ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ || [Amazon Corretto](https://aws.amazon.com/jp/corretto/?hp=tile\u0026so-exp=below)                     | 本番環境に向けて OpenJDK を配信                                                            || [AWS Cloud Development Kit (CDK)](https://aws.amazon.com/jp/cdk/?hp=tile\u0026so-exp=below)          | コードを使用してクラウドインフラストラクチャをモデル化する                                 || [AWS Cloud9](https://aws.amazon.com/jp/cloud9/?hp=tile\u0026so-exp=below)                            | Cloud IDE でコードを記述、実行、デバッグ                                                   || [AWS CloudShell](https://aws.amazon.com/jp/cloudshell/?hp=tile\u0026so-exp=below)                    | ブラウザベースのシェル環境                                                                 || [AWS CodeArtifact](https://aws.amazon.com/jp/codeartifact/?hp=tile\u0026so-exp=below)                | ソフトウェア開発のためのセキュアかつスケーラブルでコスト効率性に優れたアーティファクト管理 || [AWS CodeBuild](https://aws.amazon.com/jp/codebuild/?hp=tile\u0026so-exp=below)                      | コードを構築およびテスト                                                                   || [AWS CodeCommit](https://aws.amazon.com/jp/codecommit/?hp=tile\u0026so-exp=below)                    | プライベート Git リポジトリにコードを保存                                                  || [AWS CodeDeploy](https://aws.amazon.com/jp/codedeploy/?hp=tile\u0026so-exp=below)                    | コードデプロイの自動化                                                                     || [Amazon CodeGuru](https://aws.amazon.com/jp/codeguru/?hp=tile\u0026so-exp=below)                     | 最もコストがかかるコード行を見つける                                                       || [AWS CodePipeline](https://aws.amazon.com/jp/codepipeline/?hp=tile\u0026so-exp=below)                | 継続的デリバリーを使用したソフトウェアのリリース                                           || [AWS CodeStar](https://aws.amazon.com/jp/codestar/?hp=tile\u0026so-exp=below)                        | AWS アプリケーションを開発およびデプロイ                                                   || [AWS コマンドラインインターフェイス](https://aws.amazon.com/jp/cli/?hp=tile\u0026so-exp=below)       | AWS のサービスを管理するための統合ツール                                                   || [AWS Device Farm](https://aws.amazon.com/jp/device-farm/?hp=tile\u0026so-exp=below)                  | AWS クラウド内の実際のデバイスを使った Android、iOS、ウェブアプリケーションのテスト        || [AWS Fault Injection Simulator (近日公開)](https://aws.amazon.com/jp/fis/?hp=tile\u0026so-exp=below) | 完全マネージド型のカオスエンジニアリングサービス                                           || [AWS ツールと SDK](https://aws.amazon.com/jp/getting-started/tools-sdks/?hp=tile\u0026so-exp=below)  | AWS のツールと SDK                                                                         || [AWS X-Ray](https://aws.amazon.com/jp/xray/?hp=tile\u0026so-exp=below)                               | アプリケーションの分析とデバッグ                                                           || サービス名                                                                         | 説明                                                                     || ---------------------------------------------------------------------------------- | ------------------------------------------------------------------------ || [Amazon WorkSpaces](https://aws.amazon.com/jp/workspaces/?hp=tile\u0026so-exp=below)    | クラウド内の仮想デスクトップ                                             || [Amazon AppStream 2.0](https://aws.amazon.com/jp/appstream2/?hp=tile\u0026so-exp=below) | デスクトップアプリケーションを安全にブラウザへストリーミングするサービス || [Amazon WorkLink](https://aws.amazon.com/jp/worklink/?hp=tile\u0026so-exp=below)        | 社内のウェブサイトへのモバイルアクセスを可能にする                       || サービス名                                                                                       | 説明                                                                                || ------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------- || [AWS Amplify](https://aws.amazon.com/jp/amplify/?hp=tile\u0026so-exp=below)                           | モバイルおよびウェブアプリケーションの構築とデプロイ                                || [Amazon API Gateway](https://aws.amazon.com/jp/api-gateway/?hp=tile\u0026so-exp=below)                | API の構築、デプロイ、管理                                                          || [Amazon Location Service (プレビュー)](https://aws.amazon.com/jp/location/?hp=tile\u0026so-exp=below) | アプリケーションにロケーションデータをセキュアかつ簡単に追加                        || [Amazon Pinpoint](https://aws.amazon.com/jp/pinpoint/?hp=tile\u0026so-exp=below)                      | チャネル間でのパーソナライズされたユーザーエンゲージメント                          || [AWS AppSync](https://aws.amazon.com/jp/appsync/?hp=tile\u0026so-exp=below)                           | 多くのソースから適切なデータを使用して、大規模にアプリを強化                        || [AWS Device Farm](https://aws.amazon.com/jp/device-farm/?hp=tile\u0026so-exp=below)                   | AWS クラウド内の実際のデバイスを使った Android、iOS、ウェブアプリケーションのテスト || サービス名                                                                      | 説明                                                                                               || ------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- || [Amazon GameLift](https://aws.amazon.com/jp/gamelift/?hp=tile\u0026so-exp=below)     | シンプルで高速な費用対効果の高い専用ゲームサーバーホスティング                                     || [Amazon Lumberyard](https://aws.amazon.com/jp/lumberyard/?hp=tile\u0026so-exp=below) | AWS や Twitch と統合された完全なソースを利用できる、無料のクロスプラットフォーム 3D ゲームエンジン || サービス名                                                                                         | 説明                                                           || -------------------------------------------------------------------------------------------------- | -------------------------------------------------------------- || [AWS IoT Core](https://aws.amazon.com/jp/iot-core/?hp=tile\u0026so-exp=below)                           | デバイスをクラウドに接続                                       || [AWS Greengrass](https://aws.amazon.com/jp/greengrass/?hp=tile\u0026so-exp=below)                       | デバイスのローカルでのコンピューティング、メッセージング、同期 || [AWS IoT 1-Click](https://aws.amazon.com/jp/iot-1-click/?hp=tile\u0026so-exp=below)                     | AWS Lambda トリガーのワンクリック作成                          || [AWS IoT Analytics](https://aws.amazon.com/jp/iot-analytics/?hp=tile\u0026so-exp=below)                 | IoT デバイスの分析                                             || [AWS IoT ボタン](https://aws.amazon.com/jp/iot/button/?hp=tile\u0026so-exp=below)                       | クラウドのプログラミング可能なダッシュボタン                   || [AWS IoT Device Defender](https://aws.amazon.com/jp/iot-device-defender/?hp=tile\u0026so-exp=below)     | IoT デバイスのセキュリティ管理                                 || [AWS IoT Device Management](https://aws.amazon.com/jp/iot-device-management/?hp=tile\u0026so-exp=below) | IoT デバイスのオンボード、編成、リモート管理                   || [AWS IoT Events](https://aws.amazon.com/jp/iot-events/?hp=tile\u0026so-exp=below)                       | IoT イベントを検出し、対応                                     || [AWS IoT SiteWise](https://aws.amazon.com/jp/iot-sitewise/?hp=tile\u0026so-exp=below)                   | IoT データコレクターおよびインタプリタ                         || [AWS IoT Things Graph](https://aws.amazon.com/jp/iot-things-graph/?hp=tile\u0026so-exp=below)           | デバイスおよびウェブサービスを簡単に接続                       || [AWS Partner Device Catalog](https://devices.amazonaws.com?hp=tile\u0026so-exp=below)                   | AWS 互換の IoT ハードウェアの精選カタログ                      || [FreeRTOS](https://aws.amazon.com/jp/freertos/?hp=tile\u0026so-exp=below)                               | マイクロコントローラ向けリアルタイムオペレーティングシステム   || サービス名                                                                                                         | 説明                                                        || ------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------- || [Amazon SageMaker](https://aws.amazon.com/jp/sagemaker/?hp=tile\u0026so-exp=below)                                      | 機械学習モデルを大規模に構築、トレーニング、デプロイ        || [Amazon Augmented AI](https://aws.amazon.com/jp/augmented-ai/?hp=tile\u0026so-exp=below)                                | ML 予測のヒューマンレビューを簡単に導入                     || [Amazon CodeGuru](https://aws.amazon.com/jp/codeguru/?hp=tile\u0026so-exp=below)                                        | 最もコストがかかるコード行を見つける                        || [Amazon Comprehend](https://aws.amazon.com/jp/comprehend/?hp=tile\u0026so-exp=below)                                    | テキスト内でインサイトや関係性を検出                        || [Amazon DevOps Guru](https://aws.amazon.com/jp/devops-guru/?hp=tile\u0026so-exp=below)                                  | ML 駆動のクラウドオペレーションサービス                     || [Amazon Elastic Inference](https://aws.amazon.com/jp/elastic-inference/?hp=tile\u0026so-exp=below)                      | 深層学習推論の高速化                                        || [Amazon Forecast](https://aws.amazon.com/jp/forecast/?hp=tile\u0026so-exp=below)                                        | 機械学習を使用して予測の精度を向上させる                    || [Amazon Fraud Detector](https://aws.amazon.com/jp/fraud-detector/?hp=tile\u0026so-exp=below)                            | オンライン詐欺をより素早く検知                              || [Amazon Kendra](https://aws.amazon.com/jp/kendra/?hp=tile\u0026so-exp=below)                                            | ML を利用してエンタープライズ検索を改革                     || [Amazon Lex](https://aws.amazon.com/jp/lex/?hp=tile\u0026so-exp=below)                                                  | 音声やテキストに対応するチャットボットを構築                || [Amazon Lookout for Equipment (プレビュー)](https://aws.amazon.com/jp/lookout-for-equipment/?hp=tile\u0026so-exp=below) | センサーデータの分析による異常動作の検知                    || [Amazon Lookout for Metrics (プレビュー)](https://aws.amazon.com/jp/lookout-for-metrics/?hp=tile\u0026so-exp=below)     | メトリクスにおける異常の検知                                || [Amazon Lookout for Vision (プレビュー)](https://aws.amazon.com/jp/lookout-for-vision/?hp=tile\u0026so-exp=below)       | コンピュータビジョンを使用した製品欠陥の検出                || [Amazon Monitron](https://aws.amazon.com/jp/monitron/?hp=tile\u0026so-exp=below)                                        | 機器モニタリングのためのエンドツーエンドシステム            || [Amazon Personalize](https://aws.amazon.com/jp/personalize/?hp=tile\u0026so-exp=below)                                  | アプリケーションへのリアルタイムレコメンデーションの構築    || [Amazon Polly](https://aws.amazon.com/jp/polly/?hp=tile\u0026so-exp=below)                                              | テキストを生きた話し声に変換                                || [Amazon Rekognition](https://aws.amazon.com/jp/rekognition/?hp=tile\u0026so-exp=below)                                  | 画像と動画を分析                                            || [Amazon SageMaker Data Wrangler](https://aws.amazon.com/jp/sagemaker/data-wrangler/?hp=tile\u0026so-exp=below)          | ML 用にデータを準備するための最も速い方法                   || [Amazon SageMaker Ground Truth](https://aws.amazon.com/jp/sagemaker/groundtruth/?hp=tile\u0026so-exp=below)             | 精度の高い機械学習トレーニングデータセットの構築            || [Amazon Textract](https://aws.amazon.com/jp/textract/?hp=tile\u0026so-exp=below)                                        | ドキュメントからテキストやデータを抽出する                  || [Amazon Translate](https://aws.amazon.com/jp/translate/?hp=tile\u0026so-exp=below)                                      | 自然で流ちょうな言語翻訳                                    || [Amazon Transcribe](https://aws.amazon.com/jp/transcribe/?hp=tile\u0026so-exp=below)                                    | 自動音声認識                                                || [AWS 深層学習 AMI](https://aws.amazon.com/jp/machine-learning/amis/?hp=tile\u0026so-exp=below)                          | Amazon EC2 での深層学習                                     || [AWS Deep Learning Containers](https://aws.amazon.com/jp/machine-learning/containers/?hp=tile\u0026so-exp=below)        | 深層学習向け Docker イメージ                                || [AWS DeepComposer](https://aws.amazon.com/jp/deepcomposer/?hp=tile\u0026so-exp=below)                                   | 機械学習が有効化されたミュージカルキーボード                || [AWS DeepLens](https://aws.amazon.com/jp/deeplens/?hp=tile\u0026so-exp=below)                                           | 深層学習に対応したビデオカメラ                              || [AWS DeepRacer](https://aws.amazon.com/jp/deepracer/?hp=tile\u0026so-exp=below)                                         | 機械学習による 18 分の 1 のスケールでの自律走行型レースカー || [AWS Inferentia](https://aws.amazon.com/jp/inferentia/?hp=tile\u0026so-exp=below)                                       | 機械学習インファレンスチップ                                || [AWS Panorama (プレビュー)](https://aws.amazon.com/jp/panorama/?hp=tile\u0026so-exp=below)                              | エッジに設置したコンピュータビジョンによる運営改善          || [AWS での Apache MXNet](https://aws.amazon.com/jp/mxnet/?hp=tile\u0026so-exp=below)                                     | スケーラブルなオープンソースの深層学習フレームワーク        || [AWS での PyTorch](https://aws.amazon.com/jp/pytorch/?hp=tile\u0026so-exp=below)                                        | 柔軟なオープンソースの機械学習フレームワーク                || [AWS での TensorFlow](https://aws.amazon.com/jp/tensorflow/?hp=tile\u0026so-exp=below)                                  | オープンソースのマシンインテリジェンスライブラリ            || サービス名                                                                                                       | 説明                                                                   || ---------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------- || [Amazon CloudWatch](https://aws.amazon.com/jp/cloudwatch/?hp=tile\u0026so-exp=below)                                  | リソースとアプリケーションのモニタリング                               || [AWS Auto Scaling](https://aws.amazon.com/jp/autoscaling/?hp=tile\u0026so-exp=below)                                  | 需要に合わせて複数のリソースをスケール                                 || [AWS Chatbot](https://aws.amazon.com/jp/chatbot/?hp=tile\u0026so-exp=below)                                           | ChatOps for AWS                                                        || [AWS CloudFormation](https://aws.amazon.com/jp/cloudformation/?hp=tile\u0026so-exp=below)                             | テンプレートを使用してリソースを作成および管理                         || [AWS CloudTrail](https://aws.amazon.com/jp/cloudtrail/?hp=tile\u0026so-exp=below)                                     | ユーザーアクティビティと API 使用状況の追跡                            || [AWS コマンドラインインターフェイス](https://aws.amazon.com/jp/cli/?hp=tile\u0026so-exp=below)                        | AWS サービスを管理するための統合ツール                                 || [AWS Compute Optimizer](https://aws.amazon.com/jp/compute-optimizer/?hp=tile\u0026so-exp=below)                       | 最適な AWS コンピューティングリソースを特定                            || [AWS Config](https://aws.amazon.com/jp/config/?hp=tile\u0026so-exp=below)                                             | リソースのインベントリと変更の追跡                                     || [AWS Control Tower](https://aws.amazon.com/jp/controltower/?hp=tile\u0026so-exp=below)                                | 安全かつ基準に準拠した複数のアカウント環境をセットアップおよび管理する || [AWS コンソールモバイルアプリ](https://aws.amazon.com/jp/console/mobile/?hp=tile\u0026so-exp=below)                   | リソースの状態を外出先で確認                                           || [AWS Distro for OpenTelemetry (プレビュー)](https://aws.amazon.com/jp/otel/?hp=tile\u0026so-exp=below)                | 相関するメトリクスとトレースの収集                                     || [AWS License Manager](https://aws.amazon.com/jp/license-manager/?hp=tile\u0026so-exp=below)                           | ライセンスの追跡、管理、制御                                           || [AWS マネジメントコンソール](https://aws.amazon.com/jp/console/?hp=tile\u0026so-exp=below)                            | ウェブベースのユーザーインターフェイス                                 || [AWS Managed Services](https://aws.amazon.com/jp/managed-services/?hp=tile\u0026so-exp=below)                         | AWS のインフラストラクチャ運用管理                                     || [Amazon Managed Service for Grafana (プレビュー)](https://aws.amazon.com/jp/grafana/?hp=tile\u0026so-exp=below)       | 強力でインタラクティブなデータ視覚化                                   || [Amazon Managed Service for Prometheus (プレビュー)](https://aws.amazon.com/jp/prometheus/?hp=tile\u0026so-exp=below) | コンテナのためのセキュアで可用性に優れたモニタリング                   || [AWS OpsWorks](https://aws.amazon.com/jp/opsworks/?hp=tile\u0026so-exp=below)                                         | Chef と Puppet を使って運用を自動化                                    || [AWS Organizations](https://aws.amazon.com/jp/organizations/?hp=tile\u0026so-exp=below)                               | AWS アカウント全体の一元管理                                           || [AWS Personal Health Dashboard](https://aws.amazon.com/jp/premiumsupport/phd/?hp=tile\u0026so-exp=below)              | AWS のサービス状態のパーソナライズされた表示                           || [AWS Proton (プレビュー)](https://aws.amazon.com/jp/proton/?hp=tile\u0026so-exp=below)                                | コンテナとサーバーレスデプロイメントのための自動化された管理           || [AWS Service Catalog](https://aws.amazon.com/jp/servicecatalog/?hp=tile\u0026so-exp=below)                            | 標準化された製品の作成と使用                                           || [AWS Systems Manager](https://aws.amazon.com/jp/systems-manager/?hp=tile\u0026so-exp=below)                           | 運用時のインサイトに基づいて改善する                                   || [AWS Trusted Advisor](https://aws.amazon.com/jp/trustedadvisor/?hp=tile\u0026so-exp=below)                            | パフォーマンスとセキュリティを最適化                                   || [AWS Well-Architected Tool](https://aws.amazon.com/jp/well-architected-tool/?hp=tile\u0026so-exp=below)               | ワークロードの見直しと改善                                             || サービス名                                                                                                                  | 説明                                         || --------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------- || [Amazon Elastic Transcoder](https://aws.amazon.com/jp/elastictranscoder/?hp=tile\u0026so-exp=below)                              | 使いやすいスケーラブルなメディア変換サービス || [Amazon Interactive Video Service](https://aws.amazon.com/jp/ivs/?hp=tile\u0026so-exp=below)                                     | マネージド型のライブ動画ソリューション       || [Amazon Kinesis Video Streams](https://aws.amazon.com/jp/kinesis/video-streams/?hp=tile\u0026so-exp=below)                       | 動画ストリームの処理と分析                   || [AWS Elemental MediaConnect](https://aws.amazon.com/jp/mediaconnect/?hp=tile\u0026so-exp=below)                                  | 高い信頼性を安全性を持つライブ動画転送       || [AWS Elemental MediaConvert](https://aws.amazon.com/jp/mediaconvert/?hp=tile\u0026so-exp=below)                                  | ファイルベースの動画コンテンツを変換         || [AWS Elemental MediaLive](https://aws.amazon.com/jp/medialive/?hp=tile\u0026so-exp=below)                                        | ライブビデオコンテンツを変換                 || [AWS Elemental MediaPackage](https://aws.amazon.com/jp/mediapackage/?hp=tile\u0026so-exp=below)                                  | 動画を発信およびパッケージ化                 || [AWS Elemental MediaStore](https://aws.amazon.com/jp/mediastore/?hp=tile\u0026so-exp=below)                                      | メディアストレージとシンプルな HTTP オリジン || [AWS Elemental MediaTailor](https://aws.amazon.com/jp/mediatailor/?hp=tile\u0026so-exp=below)                                    | 動画のパーソナライズと収益化                 || [AWS Elemental アプライアンスとソフトウェア](https://aws.amazon.com/jp/elemental-appliances-software/?hp=tile\u0026so-exp=below) | オンプレミスメディアソリューション           || サービス名                                                                                                 | 説明                                                   || ---------------------------------------------------------------------------------------------------------- | ------------------------------------------------------ || [AWS Migration Hub](https://aws.amazon.com/jp/migration-hub/?hp=tile\u0026so-exp=below)                         | 複数の移行の追跡を 1 か所から実行                      || [AWS Application Discovery Service](https://aws.amazon.com/jp/application-discovery/?hp=tile\u0026so-exp=below) | オンプレミスのアプリケーションを検出して合理的に移行   || [AWS Database Migration Service](https://aws.amazon.com/jp/dms/?hp=tile\u0026so-exp=below)                      | 最小限のダウンタイムでデータベースを移行できるサービス || [AWS DataSync](https://aws.amazon.com/jp/datasync/?hp=tile\u0026so-exp=below)                                   | シンプルかつ高速なオンラインデータ転送                 || [AWS Server Migration Service](https://aws.amazon.com/jp/server-migration-service/?hp=tile\u0026so-exp=below)   | オンプレミスサーバーを AWS に移行                      || [AWS Snow ファミリー](https://aws.amazon.com/jp/snow/?hp=tile\u0026so-exp=below)                                | AWS との間でデータを移行するためのデバイス             || [AWS Transfer Family](https://aws.amazon.com/jp/aws-transfer-family/?hp=tile\u0026so-exp=below)                 | フルマネージド SFTP、FTPS、および FTP サービス         || [CloudEndure Migration](https://aws.amazon.com/jp/cloudendure-migration/?hp=tile\u0026so-exp=below)             | AWS クラウドへの大規模な移行を自動化                   || [Migration Evaluator（旧 TSO Logic）](https://aws.amazon.com/jp/migration-evaluator/?hp=tile\u0026so-exp=below) | クラウド移行のビジネスケースを作成                     || サービス名                                                                                           | 説明                                             || ---------------------------------------------------------------------------------------------------- | ------------------------------------------------ || [Amazon VPC](https://aws.amazon.com/jp/vpc/?hp=tile\u0026so-exp=below)                                    | 独立したクラウドリソース                         || [Amazon API Gateway](https://aws.amazon.com/jp/api-gateway/?hp=tile\u0026so-exp=below)                    | API の構築、デプロイ、管理                       || [Amazon CloudFront](https://aws.amazon.com/jp/cloudfront/?hp=tile\u0026so-exp=below)                      | グローバルなコンテンツ配信ネットワーク           || [Amazon Route 53](https://aws.amazon.com/jp/route53/?hp=tile\u0026so-exp=below)                           | スケーラブルなドメインネームシステム (DNS)       || [AWS PrivateLink](https://aws.amazon.com/jp/privatelink/?hp=tile\u0026so-exp=below)                       | AWS でホストされているサービスに安全にアクセス   || [AWS App Mesh](https://aws.amazon.com/jp/app-mesh/?hp=tile\u0026so-exp=below)                             | マイクロサービスをモニタリングおよびコントロール || [AWS Cloud Map](https://aws.amazon.com/jp/cloud-map/?hp=tile\u0026so-exp=below)                           | クラウドリソースのサービス検出                   || [AWS Direct Connect](https://aws.amazon.com/jp/directconnect/?hp=tile\u0026so-exp=below)                  | AWS への専用ネットワーク接続                     || [AWS Global Accelerator](https://aws.amazon.com/jp/global-accelerator/?hp=tile\u0026so-exp=below)         | アプリケーションの可用性とパフォーマンスを向上   || [AWS Transit Gateway](https://aws.amazon.com/jp/transit-gateway/?hp=tile\u0026so-exp=below)               | VPC およびアカウント接続を簡単にスケール         || [Elastic Load Balancing (ELB)](https://aws.amazon.com/jp/elasticloadbalancing/?hp=tile\u0026so-exp=below) | 複数のターゲットにわたる着信トラフィックの分配   || サービス名                                                              | 説明                                 || ----------------------------------------------------------------------- | ------------------------------------ || [Amazon Braket](https://aws.amazon.com/jp/braket/?hp=tile\u0026so-exp=below) | 量子コンピューティングを探索して実験 || サービス名                                                                 | 説明                                                 || -------------------------------------------------------------------------- | ---------------------------------------------------- || [AWS RoboMaker](https://aws.amazon.com/jp/robomaker/?hp=tile\u0026so-exp=below) | ロボット工学アプリケーションの開発、テスト、デプロイ || サービス名                                                                           | 説明                                   || ------------------------------------------------------------------------------------ | -------------------------------------- || [AWS Ground Station](https://aws.amazon.com/jp/ground-station/?hp=tile\u0026so-exp=below) | サービスとしてのフルマネージド型地上局 || サービス名                                                                                      | 説明                                                         || ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------ || [AWS Identity and Access Management (IAM)](https://aws.amazon.com/jp/iam/?hp=tile\u0026so-exp=below) | サービスとリソースへのアクセスを安全に管理                   || [Amazon Cognito](https://aws.amazon.com/jp/cognito/?hp=tile\u0026so-exp=below)                       | アプリケーションの ID 管理                                   || [Amazon Detective](https://aws.amazon.com/jp/detective/?hp=tile\u0026so-exp=below)                   | 潜在的なセキュリティ問題を調査                               || [Amazon GuardDuty](https://aws.amazon.com/jp/guardduty/?hp=tile\u0026so-exp=below)                   | マネージド型脅威検出サービス                                 || [Amazon Inspector](https://aws.amazon.com/jp/inspector/?hp=tile\u0026so-exp=below)                   | アプリケーションのセキュリティの分析                         || [Amazon Macie](https://aws.amazon.com/jp/macie/?hp=tile\u0026so-exp=below)                           | 大規模な機密データを検出して保護する                         || [AWS Artifact](https://aws.amazon.com/jp/artifact/?hp=tile\u0026so-exp=below)                        | AWS のコンプライアンスレポートへのオンデマンドアクセス       || [AWS Audit Manager](https://aws.amazon.com/jp/audit-manager/?hp=tile\u0026so-exp=below)              | AWS 利用状況の継続的な監査                                   || [AWS Certificate Manager](https://aws.amazon.com/jp/certificate-manager/?hp=tile\u0026so-exp=below)  | SSL/TLS 証明書のプロビジョニング、管理、およびデプロイメント || [AWS CloudHSM](https://aws.amazon.com/jp/cloudhsm/?hp=tile\u0026so-exp=below)                        | コンプライアンスのためのハードウェアベースキーストレージ     || [AWS Directory Service](https://aws.amazon.com/jp/directoryservice/?hp=tile\u0026so-exp=below)       | Active Directory をホスティングおよび管理                    || [AWS Firewall Manager](https://aws.amazon.com/jp/firewall-manager/?hp=tile\u0026so-exp=below)        | ファイアウォールルールの一元管理                             || [AWS Key Management Service](https://aws.amazon.com/jp/kms/?hp=tile\u0026so-exp=below)               | マネージド型の暗号化キーの作成と管理                         || [AWS Network Firewall](https://aws.amazon.com/jp/network-firewall/?hp=tile\u0026so-exp=below)        | VPC 保護のためのネットワークセキュリティ                     || [AWS Resource Access Manager](https://aws.amazon.com/jp/ram/?hp=tile\u0026so-exp=below)              | AWS のリソースを共有するためのシンプルでセキュアなサービス   || [AWS Secrets Manager](https://aws.amazon.com/jp/secrets-manager/?hp=tile\u0026so-exp=below)          | 機密情報のローテーション、管理、取得                         || [AWS Security Hub](https://aws.amazon.com/jp/security-hub/?hp=tile\u0026so-exp=below)                | 統合された AWS セキュリティ \u0026 コンプライアンスセンター       || [AWS Shield](https://aws.amazon.com/jp/shield/?hp=tile\u0026so-exp=below)                            | DDoS 保護                                                    || [AWS Single Sign-On](https://aws.amazon.com/jp/single-sign-on/?hp=tile\u0026so-exp=below)            | クラウドシングルサインオン (SSO) サービス                    || [AWS WAF](https://aws.amazon.com/jp/waf/?hp=tile\u0026so-exp=below)                                  | 悪意のあるウェブトラフィックのフィルタリング                 || サービス名                                                                                      | 説明                                                         || ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------ || [AWS Lambda](https://aws.amazon.com/jp/lambda/?hp=tile\u0026so-exp=below)                            | サーバーに煩わされずにコードを実行                           || [Amazon API Gateway](https://aws.amazon.com/jp/api-gateway/?hp=tile\u0026so-exp=below)               | API の構築、デプロイ、管理                                   || [Amazon DynamoDB](https://aws.amazon.com/jp/dynamodb/?hp=tile\u0026so-exp=below)                     | マネージド型の NoSQL データベース                            || [Amazon EventBridge](https://aws.amazon.com/jp/eventbridge/?hp=tile\u0026so-exp=below)               | SaaS アプリと AWS のサービス向けサーバーレスイベントバス     || [Amazon Simple Notification Service (SNS)](https://aws.amazon.com/jp/sns/?hp=tile\u0026so-exp=below) | Pub/sub、SMS、E メール、およびモバイルプッシュ通知           || [Amazon Simple Queue Service (SQS)](https://aws.amazon.com/jp/sqs/?hp=tile\u0026so-exp=below)        | マネージド型メッセージキュー                                 || [Amazon Simple Storage Service (S3)](https://aws.amazon.com/jp/s3/?hp=tile\u0026so-exp=below)        | クラウド内のスケーラブルなストレージ                         || [AWS AppSync](https://aws.amazon.com/jp/appsync/?hp=tile\u0026so-exp=below)                          | 多くのソースから適切なデータを使用して、大規模にアプリを強化 || [AWS Fargate](https://aws.amazon.com/jp/fargate/?hp=tile\u0026so-exp=below)                          | コンテナ向けサーバーレスコンピューティング                   || [AWS Step Functions](https://aws.amazon.com/jp/step-functions/?hp=tile\u0026so-exp=below)            | 分散型アプリケーションの調整                                 || サービス名                                                                                                     | 説明                                                                                 || -------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------ || [Amazon Simple Storage Service (S3)](https://aws.amazon.com/jp/s3/?hp=tile\u0026so-exp=below)                       | クラウド内のスケーラブルなストレージ                                                 || [Amazon Elastic Block Store (EBS)](https://aws.amazon.com/jp/ebs/?hp=tile\u0026so-exp=below)                        | EC2 ブロックストレージボリューム                                                     || [Amazon Elastic File System (EFS)](https://aws.amazon.com/jp/efs/?hp=tile\u0026so-exp=below)                        | EC2 用フルマネージド型ファイルシステム                                               || [Amazon FSx for Lustre](https://aws.amazon.com/jp/fsx/lustre/?hp=tile\u0026so-exp=below)                            | S3 と統合されたハイパフォーマンスファイルシステム                                    || [Amazon FSx for Windows File Server](https://aws.amazon.com/jp/fsx/windows/?hp=tile\u0026so-exp=below)              | フルマネージド型 Windows ネイティブのファイルシステム                                || [Amazon S3 Glacier](https://aws.amazon.com/jp/glacier/?hp=tile\u0026so-exp=below)                                   | クラウド内の低コストなアーカイブ向けストレージ                                       || [AWS Backup](https://aws.amazon.com/jp/backup/?hp=tile\u0026so-exp=below)                                           | AWS のサービス全体にわたる一元管理型バックアップ                                     || [AWS Snow ファミリー](https://aws.amazon.com/jp/snow/?hp=tile\u0026so-exp=below)                                    | 厳しい環境や切断された環境向けの物理エッジコンピューティングおよびストレージデバイス || [AWS Storage Gateway](https://aws.amazon.com/jp/storagegateway/?hp=tile\u0026so-exp=below)                          | ハイブリッドストレージの統合                                                         || [CloudEndure Disaster Recovery](https://aws.amazon.com/jp/cloudendure-disaster-recovery/?hp=tile\u0026so-exp=below) | 高度に自動化した災害対策                                                             || サービス名                                                                  | 説明                                      || --------------------------------------------------------------------------- | ----------------------------------------- || [Amazon Sumerian](https://aws.amazon.com/jp/sumerian/?hp=tile\u0026so-exp=below) | VR および AR アプリケーションの構築と実行 |"},{"name":"backend-issue.md","content":"C10K"},{"name":"backend-preformance.md","content":"- [GitHub - wg/wrk: Modern HTTP benchmarking tool](https://github.com/wg/wrk)- [GitHub - tsenart/vegeta: HTTP load testing tool and library. It's over 9000!](https://github.com/tsenart/vegeta)- [Nginx with Go のパフォーマンスを検証した - nakamura244 blog](https://tsuyoshi-nakamura.hatenablog.com/entry/2016/12/25/182946)  connect nginx + golang  Go(net.unix) + Nginx(fastcgi_pass)  fastcgi で TCP 通信  fastcgi で UNIX ドメインソケット通信"},{"name":"bash-export-path.md","content":"How to correctly add a path to PATH?Asked 9 years agoActive 6 months agoViewed 2.6m times1080564I'm wondering where a new path has to be added to the PATH environment variable. I know this can be accomplished by editing .bashrc (for example), but it's not clear how to do this.This way:export PATH=~/opt/bin:$PATHor this?export PATH=$PATH:~/opt/binbashenvironment-variablespathbashrcshare improve this question followedited Sep 17 '15 at 18:27Scott8,78577 gold badges3434 silver badges5959 bronze badgesasked Dec 4 '11 at 20:57Paolo13.5k1010 gold badges2424 silver badges3737 bronze badgesprintf '\\nPATH=$PATH:\"path-to-add\"\\nexport PATH\\n' \u003e\u003e ~/.bashrc – Microsoft Linux TM Nov 7 '14 at 13:043Unix shell function for adding directories to PATH – Sildoreth Apr 30 '15 at 13:591If there are already some paths added, e.g. PATH=$PATH:$HOME/.local/bin:$HOME/bin, another can be added by separating with a : e.g. PATH=$PATH:$HOME/.local/bin:$HOME/bin:/home/ec2-user/pear/bin. – Sandeepan Nath Aug 20 '16 at 18:402Do these answers work for all flavors of linux? – Ungeheuer Nov 20 '16 at 20:581wrote a little utility to help with exactly this. github.com/aalok-sathe/pathin – axolotl May 12 at 13:48show 1 more comment11 Answers1211The simple stuffPATH=$PATH:~/opt/binorPATH=~/opt/bin:$PATHdepending on whether you want to add ~/opt/bin at the end (to be searched after all other directories, in case there is a program by the same name in multiple directories) or at the beginning (to be searched before all other directories).You can add multiple entries at the same time. PATH=$PATH:~/opt/bin:~/opt/node/bin or variations on the ordering work just fine. Don't put export at the beginning of the line as it has additional complications (see below under “Notes on shells other than bash”).If your PATH gets built by many different components, you might end up with duplicate entries. See How to add home directory path to be discovered by Unix which command? and Remove duplicate $PATH entries with awk command to avoid adding duplicates or remove them.Some distributions automatically put ~/bin in your PATH if it exists, by the way.Where to put itPut the line to modify PATH in ~/.profile, or in ~/.bash_profile if that's what you have.Note that ~/.bash_rc is not read by any program, and ~/.bashrc is the configuration file of interactive instances of bash. You should not define environment variables in ~/.bashrc. The right place to define environment variables such as PATH is ~/.profile (or ~/.bash_profile if you don't care about shells other than bash). See What's the difference between them and which one should I use?Don't put it in /etc/environment or ~/.pam_environment: these are not shell files, you can't use substitutions like $PATH in there. In these files, you can only override a variable, not add to it.Potential complications in some system scriptsYou don't need export if the variable is already in the environment: any change of the value of the variable is reflected in the environment.¹ PATH is pretty much always in the environment; all unix systems set it very early on (usually in the very first process, in fact).At login time, you can rely on PATH being already in the environment, and already containing some system directories. If you're writing a script that may be executed early while setting up some kind of virtual environment, you may need to ensure that PATH is non-empty and exported: if PATH is still unset, then something like PATH=$PATH:/some/directory would set PATH to :/some/directory, and the empty component at the beginning means the current directory (like .:/some/directory).if [ -z \"${PATH-}\" ]; then export PATH=/usr/local/bin:/usr/bin:/bin; fiNotes on shells other than bashIn bash, ksh and zsh, export is special syntax, and both PATH=~/opt/bin:$PATH and export PATH=~/opt/bin:$PATH do the right thing even. In other Bourne/POSIX-style shells such as dash (which is /bin/sh on many systems), export is parsed as an ordinary command, which implies two differences:~ is only parsed at the beginning of a word, except in assignments (see How to add home directory path to be discovered by Unix which command? for details);$PATH outside double quotes breaks if PATH contains whitespace or \\[*?.So in shells like dash, export PATH=~/opt/bin:$PATH sets PATH to the literal string ~/opt/bin/: followed by the value of PATH up to the first space. PATH=~/opt/bin:$PATH (a bare assignment) doesn't require quotes and does the right thing. If you want to use export in a portable script, you need to write export PATH=\"$HOME/opt/bin:$PATH\", or PATH=~/opt/bin:$PATH; export PATH (or PATH=$HOME/opt/bin:$PATH; export PATH for portability to even the Bourne shell that didn't accept export var=value and didn't do tilde expansion)."},{"name":"bash.md","content":"[bash tips](http://kodama.fubuki.info/wiki/wiki.cgi/bash/tips?lang=jp)- https://gnu.org/savannah-checkouts/gnu/bash/manual/bash.html- https://github.com/google/styleguide/blob/gh-pages/shellguide.md- https://github.com/josa42/coc-sh- https://github.com/koalaman/shellcheck- https://github.com/lfkdev/bashtemplatebash デバッグ Tips- https://qiita.com/rsooo/items/ef1d036bcc7282a66d7d- https://qiita.com/mashumashu/items/ee436b770806e8b8176f- https://qiita.com/aosho235/items/4e913905a130c0eaf86d[標準出力に出しつつ、パイプ先のコマンドにも繋ぐ | tellme.tokyo](https://tellme.tokyo/post/2020/02/07/tee-command/)その他の演算子ファイルやディレクトリの存在を確認する際に使用できる演算子についてまとめました。演算子 説明-a ファイル ファイルがあれば真-b ファイル ファイルがありブロックス特殊ファイルであれば真-c ファイル ファイルがありキャラクター特殊ファイルであれば真-d ファイル ファイルがありディレクトリであれば真-e ファイル ファイルがあれば真-f ファイル ファイルがあり通常のファイルであれば真-g ファイル ファイルがあり SGID(特殊なアクセス権)であれば真-G ファイル ファイルがあり実行グループ ID による所有者であれば真-h ファイル ファイルがありシンボリックであれば真（-L と同じ）-k ファイル ファイルがありステッキービットが設定されていれば真-L ファイル ファイルがありシンボリックであれば真（-h と同じ）-O ファイル ファイルがあり実行ユーザ ID による所有者であれば真-p ファイル ファイルがあり名前付きパイプ（named pipe）であれば真-r ファイル ファイルがあり読み取り可能であれば真-s ファイル ファイルがありサイズが 0 より大きければ真-S ファイル ファイルがありソケットであれば真-t FD FD（ファイルディスクリプタ）が端末でオープンされていれば真-u ファイル ファイルがあり SUID(特殊なアクセス権)であれば真-w ファイル ファイルがあり書き込み可能であれば真-x ファイル ファイルがあり実行可能であれば真- [bash, zsh で yes/no 判定をするワンライナー - Qiita](https://qiita.com/u1and0/items/a628db9644a72b11584c)- [shell - How do you echo a 4-digit Unicode character in Bash? - Stack Overflow](https://stackoverflow.com/questions/602912/how-do-you-echo-a-4-digit-unicode-character-in-bash)```basha_flag=''b_flag=''files=''verbose='false'print_usage() {  printf \"Usage: ...\"}while getopts 'abf:v' flag; do  case \"${flag}\" in    a) a_flag='true' ;;    b) b_flag='true' ;;    f) files=\"${OPTARG}\" ;;    v) verbose='true' ;;    *) print_usage       exit 1 ;;  esacdone``````-eq    is equal to    if [ \"$a\" -eq \"$b\" ]-ne    is not equal to    if [ \"$a\" -ne \"$b\" ]-gt    is greater than    if [ \"$a\" -gt \"$b\" ]-ge    is greater than or equal to    if [ \"$a\" -ge \"$b\" ]-lt    is less than    if [ \"$a\" -lt \"$b\" ]-le    is less than or equal to    if [ \"$a\" -le \"$b\" ]\u003c    is less than (within double parentheses)    ((\"$a\" \u003c \"$b\"))\u003c=    is less than or equal to (within double parentheses)    ((\"$a\" \u003c= \"$b\"))\u003e    is greater than (within double parentheses)    ((\"$a\" \u003e \"$b\"))\u003e=    is greater than or equal to (within double parentheses)    ((\"$a\" \u003e= \"$b\"))string comparison=    is equal to    if [ \"$a\" = \"$b\" ]    Caution    Note the whitespace framing the =.    if [ \"$a\"=\"$b\" ] is not equivalent to the above.==    is equal to    if [ \"$a\" == \"$b\" ]    This is a synonym for =.    Note    The == comparison operator behaves differently within a double-brackets test than within single brackets.    [[ $a == z* ]]   # True if $a starts with an \"z\" (pattern matching).    [[ $a == \"z*\" ]] # True if $a is equal to z* (literal matching).    [ $a == z* ]     # File globbing and word splitting take place.    [ \"$a\" == \"z*\" ] # True if $a is equal to z* (literal matching).    # Thanks, Stéphane Chazelas!=    is not equal to    if [ \"$a\" != \"$b\" ]    This operator uses pattern matching within a [[ ... ]] construct.\u003c    is less than, in ASCII alphabetical order    if [[ \"$a\" \u003c \"$b\" ]]    if [ \"$a\" \\\u003c \"$b\" ]    Note that the \"\u003c\" needs to be escaped within a [ ] construct.\u003e    is greater than, in ASCII alphabetical order    if [[ \"$a\" \u003e \"$b\" ]]    if [ \"$a\" \\\u003e \"$b\" ]    Note that the \"\u003e\" needs to be escaped within a [ ] construct.    See Example 27-11 for an application of this comparison operator.-z    string is null, that is, has zero length     String=''   # Zero-length (\"null\") string variable.    if [ -z \"$String\" ]    then      echo \"\\$String is null.\"    else      echo \"\\$String is NOT null.\"    fi     # $String is null.-n    string is not null.    Caution    The -n test require``````| オプション | 説明 | 補足 || --- | --- | --- || -eq | 等しければ真 | equal || -ne | 等しくなければ真 | not equal || -lt | より小なら真 | less than || -le | 以下なら真 | less than or equal || -gt | より大なら真 | greater than || -ge | 以上なら真 | greater than or equal || オプション | 説明 || --- | --- || = | 等しければ真 || != | 等しくなければ真 || オプション | 説明 || --- | --- || -d | ディレクトリなら真 || -f | 普通のファイルなら真 || -s | サイズが 0 より大きければ真 || -e | 存在するなら真 || -r | 読み取り可能なら真 || -w | 書き込み可能なら真 || -x | 実行可能なら真 || オプション | 説明 || --- | --- || -z | 文字列長が 0 なら真 || -n | 文字列長が 0 より大なら真 || 変数 | 説明 || --- | --- || $# | 実行時に指定された引数の数 || $1 | 実行時に指定された 1 番目の引数 || $n | 実行時に指定された n 番目の引数 || 変数 | 説明 || --- | --- || $? | 直前のコマンドの実行結果 |シングルクォート　「’」　内容を文字列として出力ダブルクォート 　「”」　変数の内容を文字列として出力バッククォート 　「`」　コマンドとして実行して結果を出力```| Exit Code | 意味                                                        | 例                      | コメント                                               || --------- | ----------------------------------------------------------- | ----------------------- | ------------------------------------------------------ || `1`       | 一般的なエラー全般                                          | `$ let \"var 1 = 1 / 0\"` | ゼロ除算などのコマンドを継続できない雑多なエラー       || `2`       | （Bash のドキュメントによると）シェルビルトインな機能の誤用 | `$ empty_function(){}`  || `126`     | 呼び出したコマンドが実行できなかった時                      | `$ /dev/null`           | パーミッションの問題かコマンドが executable でない時   || `127`     | コマンドが見つからない時                                    | `$ illegal_command`     | `$PATH`                                                || `128`     | `exit` コマンドに不正な引数を渡した時                       | `$ exit 3.14159`        | `exit` コマンドは 0〜255 の整数だけを引数に取る        || `128+n`   | シグナル `n` で致命的なエラー                               | `$ kill -9 $PPID`       | 例では， `$?` は 137（128 + 9）を返す                  || `130`     | スクリプトが Ctrl+C で終了                                  | Ctrl+C                  | Ctrl+C はシグナル 2 で終了する = 128 + 2 = 130（上記） || `255`     | 範囲外の exit status                                        | `$ exit -1`             | `exit`                                                 |"},{"name":"benchmark.md","content":"- [結局、Go 言語をやめる理由はなかった件 - Qiita](https://qiita.com/Maki-Daisuke/items/23c1285500208048de80)  \u003e プログラムの実行時間は次のような時間の合計です：  \u003e ユーザー空間で実行されてる時間（user time)  \u003e カーネル空間で実行されている時間（system time）  \u003e ファイルやネットワークなどの入出力結果を待っている時間（idle time）Go の database/sql（正確にいうと go-sql-driver/mysql）では Exec の SQL 文のパース結果をキャッシュしません。そのため、毎回 SQL 文のパース処理が行われます。Go の場合は、何度も同じ SQL 文を実行するなら明示的に Prepare を使うべきです。- ベンチマークをする時には制約条件を明確にしましょう- 想定するデータの制約- 利用可能なメモリの制約- 利用していい手段の制約（たとえば Cgo とか CFFI を使って C でゴリゴリにチューニングするのはアリか？）- ベンチマークをするときには、何を測定しているのかを明確にしましょう- ネットワーク遅延も含めたワークロード全体？- CPU が仕事をしている時間？- ユーザー空間で CPU を使っている時間？- 自分が書いた部分のコードが CPU を使っている時間？- ベンチマークをするときは、結果を再現可能するための情報を可能な限り記録しましょう- 実行環境（マシンの種類、CPU、RAM 等）- 実行したコード- 実行したコマンドの履歴- ベンチマークをするときは、標準的なツールを使いましょう- Go なら go test -bench、Python なら pytest- ただし、異なる言語間での比較をしたい場合はツールを揃えるのは難しい- でも、time コマンドはほぼすべての UNIX-like 環境で使える- [pprof - The Go Programming Language](https://golang.org/pkg/runtime/pprof/)"},{"name":"bracket.md","content":"```( ) – parentheses, brackets (UK, Ireland, Canada, West Indies, New Zealand, South Africa and Australia), parens, round brackets, first brackets, circle brackets or smooth brackets.{ } – braces[3] (UK and US), curly brackets, definite brackets, swirly brackets, curly braces, birdie brackets, French brackets, Scottish brackets, squirrelly brackets, gullwings, seagulls, squiggly brackets, twirly brackets, Tuborg brackets (DK), accolades (NL), pointy brackets, second brackets, fancy brackets, M Brace, moustache brackets, squiggly parentheses.[ ] – brackets (US), square brackets, closed brackets, hard brackets, third brackets, crotchets.[4]⟨ ⟩ – angle brackets, less-than/greater-than signs (when the ASCII approximation of \u003c \u003e is used), pointy brackets, triangular brackets, diamond brackets, tuples, chevrons, guillemets, broken brackets, brokets.[5]⸤ ⸥ ｢ ｣ – corner brackets⟦ ⟧ – double square brackets, white square brackets, Scott brackets〔 〕 – tortoise shell brackets```記号 英語 日本語 カーチャンでもわかる( ) Parentheses 丸括弧 まるかっこ[ ] Brackets 角括弧 しかくかっこ{ } Braces 波括弧 にょろかっこ\u003c \u003e Angle brackets 山括弧 とんがりかっこ「 」 Angles 鍵括弧 かぎかっこ【 】 隅付き括弧 見出しのかっこ⟦ ⟧ Double brackets"},{"name":"brew.md","content":"brew \"aom\"brew \"apr\"brew \"apr-util\"brew \"archey\"brew \"argon2\"brew \"aspell\"brew \"autoconf\"brew \"awscli\"brew \"bash\"brew \"bat\"brew \"bdw-gc\"brew \"berkeley-db\"brew \"boxes\"brew \"brotli\"brew \"c-ares\"brew \"cairo\"brew \"cask\"brew \"cmake\"brew \"coreutils\"brew \"cowsay\"brew \"csvq\"brew \"curl\"brew \"dav1d\"brew \"dep\"brew \"dnsmasq\"brew \"docbook\"brew \"docbook-xsl\"brew \"docker\"brew \"emacs\"brew \"fd\"brew \"ffmpeg\"brew \"figlet\"brew \"flac\"brew \"fontconfig\"brew \"fortune\"brew \"freetds\"brew \"freetype\"brew \"frei0r\"brew \"fribidi\"brew \"fzf\"brew \"gawk\"brew \"gcc\"brew \"gcc@7\"brew \"gdbm\"brew \"geoip\"brew \"gettext\"brew \"gh\"brew \"ghostscript\"brew \"giflib\"brew \"git\"brew \"git-delta\"brew \"glib\"brew \"gmp\"brew \"gnu-getopt\"brew \"gnu-sed\"brew \"gnu-tar\"brew \"gnutls\"brew \"go\"brew \"gobject-introspection\"brew \"goose\"brew \"graphite2\"brew \"grep\"brew \"guile\"brew \"gzip\"brew \"harfbuzz\"brew \"highlight\"brew \"httpd\"brew \"icu4c\"brew \"ilmbase\"brew \"imagemagick\"brew \"imlib2\"brew \"isl\"brew \"jansson\"brew \"jemalloc\"brew \"jpeg\"brew \"jq\"brew \"krb5\"brew \"lame\"brew \"leptonica\"brew \"libarchive\"brew \"libass\"brew \"libb2\"brew \"libbluray\"brew \"libcaca\"brew \"libde265\"brew \"libev\"brew \"libevent\"brew \"libffi\"brew \"libheif\"brew \"libidn2\"brew \"liblqr\"brew \"libmemcached\"brew \"libmetalink\"brew \"libmpc\"brew \"libogg\"brew \"libomp\"brew \"libpng\"brew \"libpq\"brew \"libpthread-stubs\"brew \"libsamplerate\"brew \"libsndfile\"brew \"libsodium\"brew \"libsoxr\"brew \"libssh2\"brew \"libtasn1\"brew \"libtermkey\"brew \"libtiff\"brew \"libtool\"brew \"libunistring\"brew \"libuv\"brew \"libvidstab\"brew \"libvorbis\"brew \"libvpx\"brew \"libvterm\"brew \"libx11\"brew \"libxau\"brew \"libxcb\"brew \"libxdmcp\"brew \"libxext\"brew \"libxrender\"brew \"libyaml\"brew \"libzip\"brew \"little-cms2\"brew \"llvm\"brew \"lolcat\"brew \"lua\"brew \"luajit-openresty\"brew \"luv\"brew \"lz4\"brew \"lzo\"brew \"m4\"brew \"make\"brew \"mdv\"brew \"memcached\"brew \"mosh\"brew \"mpdecimal\"brew \"mpfr\"brew \"mpv\"brew \"msgpack\"brew \"mujs\"brew \"mysql\"brew \"ncurses\"brew \"neo4j\"brew \"neovim\"brew \"nettle\"brew \"nghttp2\"brew \"node\"brew \"nodebrew\"brew \"oniguruma\"brew \"opencore-amr\"brew \"openexr\"brew \"openjdk\"brew \"openjdk@11\"brew \"openjpeg\"brew \"openldap\"brew \"openresty\"brew \"openresty-openssl111\"brew \"openssl@1.1\"brew \"opus\"brew \"p11-kit\"brew \"pandoc\"brew \"parallel\"brew \"pcre\"brew \"pcre2\"brew \"perl\"brew \"php@7.2\"brew \"phpstan\"brew \"pixman\"brew \"pkg-config\"brew \"postgresql\"brew \"protobuf\"brew \"pup\"brew \"python@3.8\"brew \"python@3.9\"brew \"q\"brew \"rav1e\"brew \"readline\"brew \"reattach-to-user-namespace\"brew \"redis\"brew \"ripgrep\"brew \"rlwrap\"brew \"rtmpdump\"brew \"rubberband\"brew \"ruby\"brew \"ruby@2.4\"brew \"rust\"brew \"sdl2\"brew \"shared-mime-info\"brew \"shellcheck\"brew \"shfmt\"brew \"snappy\"brew \"speex\"brew \"sqlite\"brew \"srt\"brew \"tcl-tk\"brew \"telnet\"brew \"terraform\"brew \"tesseract\"brew \"textql\"brew \"the_silver_searcher\"brew \"thefuck\"brew \"theora\"brew \"tidy-html5\"brew \"tig\"brew \"tmux\"brew \"tmux-xpanes\"brew \"toilet\"brew \"tokei\"brew \"translate-shell\"brew \"tree\"brew \"tree-sitter\"brew \"ttygif\"brew \"ttyrec\"brew \"uchardet\"brew \"unbound\"brew \"unibilium\"brew \"unixodbc\"brew \"utf8proc\"brew \"vapoursynth\"brew \"vim\"brew \"watch\"brew \"watchman\"brew \"webp\"brew \"wget\"brew \"write-good\"brew \"wrk\"brew \"x264\"brew \"x265\"brew \"xmlto\"brew \"xorgproto\"brew \"xsv\"brew \"xvid\"brew \"xz\"brew \"youtube-dl\"brew \"yq\"brew \"z\"brew \"zeromq\"brew \"zig\"brew \"zimg\"brew \"zlib\"brew \"zsh\"brew \"zstd\"brew \"alacritty\"brew \"amethyst\"brew \"docker\"brew \"google-japanese-ime\"brew \"julia\"brew \"keycastr\""},{"name":"cloudfront-s3-lambda-ssg.md","content":"```js'use strict';exports.handler = (event, context, callback) =\u003e {    var request = event.Records[0].cf.request;    var olduri = request.uri;    var newuri = olduri.replace(/\\/$/, '\\/index.html');    request.uri = newuri;    return callback(null, request);};``````jsexports.handler = async (event) =\u003e {    var request = event.Records[0].cf.request;    const olduri = request.uri;    if (olduri.match(/\\/$/)) {        var newuri = olduri.replace(/\\/$/, '\\/index.html');    } else {        var newuri = olduri.replace(/\\/[^.\\/]+$/, '$\u0026\\/index.html');    }    request.uri = newuri;    return request;};```"},{"name":"cmdgorust.md","content":"### ripgrep-t js, include javascript filtype.-T js, exclude javascript filetype.globとファイルの中身への検索を組み合わせてrg foo -g '*.min.js' ./publicとか書けるのがいい。 部分一致でなくパターンマッチングも使えます、rg -e '^foo' -g '*.md'### fdオプション無しでregexパターンを渡します。cd /etc \u0026\u0026 fd '^x.*rc$'末尾でのディレクトリ指定が直感的でいい。 fd '^x.*rc$' /etc-e 拡張子指定。あんま使わないかも、fd 'png$'みたいにパターンマッチを書くことのほうが多い。-d maxDepthのこと。あんま使わないかな。-E excludeパターンマッチを書ける。-iよりこっちのほうがよく使うかも。node_modulesの除外などに。-0 検索結果をNULLでセパレートしてくれる、検索結果をリダイレクトしてxargsへ渡したいときに助かります。### json2csv- [GitHub - jehiah/json2csv: command line tool to convert json to csv](https://github.com/jehiah/json2csv)"},{"name":"coc.md","content":"\" --- coc-explorer entry --- {{{\"augroup MyCocExplorer\"  autocmd!\"  autocmd VimEnter * sil! au! F\"  \" set window status line\"  autocmd FileType coc-explorer setl statusline=File-Explorer\"  \"quit explorer whein it's the last\"  autocmd BufEnter * if (winnr(\"$\") == 1 \u0026\u0026 \u0026filetype == 'coc-explorer') | q | endif\"  \" Make sure nothing opened in coc-explorer buffer\"  autocmd BufEnter * if bufname('#') =~# \"\\[coc-explorer\\]-.\" \u0026\u0026 winnr('$') \u003e 1 | b# | endif\"  \" open if directory specified or if buffer empty\"  autocmd VimEnter * let d = expand('%:p')\"    \\ | if argc() == 0\"      \\ | exe 'CocCommand explorer --quit-on-open --position floating --floating-width=10000 --floating-height=10000 --sources buffer+,file+'\"    \\ | elseif isdirectory(d) || (bufname()=='')\"      \\ | silent! bd\"      \\ | exe 'CocCommand explorer --quit-on-open --position floating --floating-width=10000 --floating-height=10000 --sources buffer+,file+ ' . d\"      \\ | exe 'cd ' . d\"    \\ | else\"      \\ | cd %:p:h\"    \\ | endif\"  \" cd after open\"  autocmd User CocExplorerOpenPost let dir = getcwd() | call CocActionAsync(\"runCommand\", \"explorer.doAction\", \"closest\", {\"name\": \"cd\", \"args\": [dir]})\"augroup END\" }}}\" set shell=zsh\\ -i\" let g:loaded_gzip = 1\" let g:loaded_tar = 1\" let g:loaded_tarPlugin = 1\" let g:loaded_zip = 1\" let g:loaded_zipPlugin = 1\" let g:loaded_rrhelper = 1\" let g:loaded_2html_plugin = 1\" let g:loaded_vimball = 1\" let g:loaded_vimballPlugin = 1\" let g:loaded_getscript = 1\" let g:loaded_getscriptPlugin = 1set -g status-right '[#[fg=colour124] #H %Y-%m-%d %H:%M #[default]]'\" --- tmux entry --- {{{if $TMUX != \"\"  augroup TMUXWINR    autocmd!    autocmd VimEnter * call system(\"tmux rename-window \" . \"'[vim] \" . fnamemodify(getcwd(), ':t') . \"'\")    autocmd VimLeave * call system(\"tmux rename-window zsh\")  augroup ENDendif\"}}}\" --- netrw gx --- {{{if !exists(\"g:netrw_nogx\") if maparg('gx','n') == \"\"  if !hasmapto('\u003cPlug\u003eNetrwBrowseX')   nmap \u003cunique\u003e gx \u003cPlug\u003eNetrwBrowseX  endif  nno \u003csilent\u003e \u003cPlug\u003eNetrwBrowseX :call netrw#BrowseX(expand((exists(\"g:netrw_gx\")? g:netrw_gx : '\u003ccfile\u003e')),netrw#CheckIfRemote())\u003ccr\u003e endif if maparg('gx','v') == \"\"  if !hasmapto('\u003cPlug\u003eNetrwBrowseXVis')   vmap \u003cunique\u003e gx \u003cPlug\u003eNetrwBrowseXVis  endif  vno \u003csilent\u003e \u003cPlug\u003eNetrwBrowseXVis :\u003cc-u\u003ecall netrw#BrowseXVis()\u003ccr\u003e endifendifif exists(\"g:netrw_usetab\") \u0026\u0026 g:netrw_usetab if maparg('\u003cc-tab\u003e','n') == \"\"  nmap \u003cunique\u003e \u003cc-tab\u003e \u003cPlug\u003eNetrwShrink endif nno \u003csilent\u003e \u003cPlug\u003eNetrwShrink :call netrw#Shrink()\u003ccr\u003eendif\"}}}mdlink\u003c!--{{{--\u003e\" function! s:SomeFunc(foo)\" \" let a:requestString=\"r! echo -n '['`curl -s 'https://nav.kis9a.com' | grep -o '\u003ctitle\u003e[^\u003c]*' | tail -c+8`']'; echo -n '(https://nav.kis9a.com)'\"\" \" r! echo -n '['`curl -s `a:foo` | grep -o \"\u003ctitle\u003e[^\u003c]*\" | tail -c+8`']'; echo -n `(a:foo)`\" r! echo -n '['`curl -s 'https://nav.kis9a.com' | grep -o '\u003ctitle\u003e[^\u003c]*' | tail -c+8`']'; echo -n '(https://nav.kis9a.com)'\" \" r! a:requestString\" \" echo a:foo\" endfunction\u003c!--}}}--\u003e**OUTPUTS**notes: [kis9a/notes](https://github.com/kis9a/notes)  zenn: [kis9a/zenn](https://github.com/kis9a/zenn) \u003c [zenn.dev/kis9a](https://zenn./kis9a) \u003e  twitter: \u003c [twitter.com/kis9a](https://twitter.com/kis9a) \u003e  navigation: [kis9a/navigation](https://github.com/kis9a/navigation) \u003c [nav.kis9a.com](https://nav.kis9a.com) \u003e```Software Engineer Beginner. Kaito.M*kis9a, 2001/8(19). 📚 Typescript, Go, and Vim.```\"tabnine.disable_filetypes\": [\"javascript\",\"javascriptreact\",\"typescript\",\"typescriptreact\"],\" nnoremap \u003cc-t\u003e [s1z=\u003cc-o\u003e\"nnoremap cy ce\u003cC-r\u003e0\u003cESC\u003e:let @/=@1\u003cCR\u003e:noh\u003cCR\u003e```vim  \" try  \"   let a_save = @a  \"   silent! normal! gv\"ay  \"   return @a  \" finally  \"   let @a = a_save  \"   echom @a  \" endtry    execute \"normal! `\u003cv`\u003ey\"command! P :call PPngUp()\u003cCR\u003efunction! PPngUp()  execute \"!echo @@ | !curl -s -T - https://ppng.io/kis9a\"endfunction```"},{"name":"commit-message.md","content":"### commonlyfeat: A new featurefix: A bug fixdocs: Documentation only changesreadme: readme only changesstyle: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)refactor: A code change that neither fixes a bug nor adds a featureperf: A code change that improves performancetest: Adding missing or correcting existing testschore: Changes to the build process or auxiliary tools and libraries such as documentation generation### project#### notestasks: tasks/ changesmemos: memos/ changes[【必須】Gitコミットの書き方・作法【prefix/emoji】 ](https://suwaru.tokyo/%E3%80%90%E5%BF%85%E9%A0%88%E3%80%91git%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%83%BB%E4%BD%9C%E6%B3%95%E3%80%90prefix-emoji%E3%80%91/)fix\tバグ修正クリティカルなバグ修正なら hotfixaddfeat\t新規機能・新規ファイル追加feat は feature の略update\tバグではない機能修正change\t仕様変更による機能修正cleanrefactorimprove\t整理 (リファクタリング等)disable\t無効化 (コメントアウト等)removedelete\tファイル削除、コードの一部を取り除くrename\tファイル名の変更move\tファイル移動upgrade\tバージョンアップrevert\t修正取り消しdocs\tドキュメントのみ修正style\t空白、セミコロン、行、コーディングフォーマットなどの修正perf\t性能向上する修正perf は perfomance の略test\tテスト追加や間違っていたテストの修正chore\tビルドツールやライブラリで自動生成されたものをコミットするとき# ==== Format ====# prefix(scope): :emoji: Commit body...## backlog task key# ==== prefix ====# fix: バグやタイポなどの修正# feat: 新しい機能の追加# refactor: リファクタリング# style: スタイリングに関わる変更(css/sass)# chore: 細務(ファイル整備、移動、削除、名前変更など)# test: テストファイルに対する変更や修正# docs: ドキュメントの加筆や修正# breaking: 破壊的変更# build: ビルド周りの設定(主にgulpやwebpack周り)# ci: CIに関わる設定# pref: パフォーマンスの改善# revert: 削除や変更の取り消し# other: その他# ==== scope ====# eslint | eslint の設定を変更# stylelint | stylelint の設定を変更# config | config.json を変更# readme | README.md を変更# gulp | gulp の設定を変更# webpack | webpack の設定を変更# html | htmlファイル変更# php | phpファイル変更# js | jsファイル変更# ==== Emojis ====# 🐛  :bug: バグの修正# 🎉  :tada: 新機能の実装# 👍  :+1: 機能改善# 💊  :pill: 機能修正# 💉  :syringe: linterの設定やエラー修正# 🔥  :fire: 不要ファイルの削除# 🚚  :truck: ファイル移動# 📛  :name: ファイル名変更# 📝  :memo: markdownファイルの変更# 📑  :bookmark: タグ切り(リリース)# 👮  :cop: 認証周り# ✅  :white_check_mark: テストの作成# 💚  :green_heart: テストの修正# 🆙  :up: モジュールのバージョンアップ# 👻  :ghost: 作業途中# ==== 7つのルール ====# 1. タイトルの後は1行空けて本文を書く# 2. タイトルを50字以内におさめる# 3. タイトルの文頭を大文字にする# 4. タイトルの文末にピリオドを付けない# 5. タイトルは命令形で記述する# 6. 本文は1行あたり72字以内におさめる# 7. 本文ではどのようにではなく何をとなぜを説明する## 詳細は https://postd.cc/how-to-write-a-git-commit-message/"},{"name":"console.log.md","content":"console.log('\\x1b[36m%s\\x1b[0m', 'I am cyan'); //cyanconsole.log('\\x1b[33m%s\\x1b[0m', stringToMakeYellow); //yellowReset = \"\\x1b[0m\"Bright = \"\\x1b[1m\"Dim = \"\\x1b[2m\"Underscore = \"\\x1b[4m\"Blink = \"\\x1b[5m\"Reverse = \"\\x1b[7m\"Hidden = \"\\x1b[8m\"FgBlack = \"\\x1b[30m\"FgRed = \"\\x1b[31m\"FgGreen = \"\\x1b[32m\"FgYellow = \"\\x1b[33m\"FgBlue = \"\\x1b[34m\"FgMagenta = \"\\x1b[35m\"FgCyan = \"\\x1b[36m\"FgWhite = \"\\x1b[37m\"BgBlack = \"\\x1b[40m\"BgRed = \"\\x1b[41m\"BgGreen = \"\\x1b[42m\"BgYellow = \"\\x1b[43m\"BgBlue = \"\\x1b[44m\"BgMagenta = \"\\x1b[45m\"BgCyan = \"\\x1b[46m\"B"},{"name":"context.md","content":"コンテキスト：どのような段階を経て現在に至ったかという情報コンテキスト（context）は文脈、前後関係、背景などを意味する英単語です。やや概念的な意味を持つため単語だけでは伝わりにくいかもしれませんが、本質的な意味を理解するとテクノロジーの世界でコンテキストが表現するものをイメージしやすいでしょう。たとえば社会科学の世界にハイコンテキスト文化、ローコンテキスト文化というものがあります。ここでいうコンテキストは共通の価値観や知識などの意味で、前者はお互いに相手の意図を察し合うことで言葉にしなくても通じる傾向の強い文化、後者は具体的な言葉に表現することでコミュニケーションを図ろうとする文化を指します。日本はハイコンテキスト文化的、欧米はローコンテキスト文化的だと表現されることがあります。このように考えるとコンテキストが言葉や事象の背景にある、動機や共通概念・文化的背景などであることがイメージしやすいのではないでしょうか。コンテキストの重要性：データが価値を持つためにはデータ同士を関連づけ、データの意味を理解することが不可欠最近ではさまざまな顧客データを収集できるようになったものの、チャネルや部署、システムなどの都合でデータが分散され、共有されていない企業が多いです。分断されたデータはそのままでは意味を持ちません。データさえあれば何でもできるというようなイメージを持つ人もいますが、データを価値あるものとして活用するためには、データ同士を関連づけ、データの意味を理解することが不可欠です。これはコンテキスト化（Contextualization）と表現されることがあります。データはコンテキスト化されて初めてビジネスにおける価値を生み出すのです。昨今注目されている One to One の概念は、掘り下げていけば顧客を理解すること、すなわち顧客のコンテキストをいかに把握・理解できるか。そしてそれに基づいて顧客の心理を読み、行動や需要に先回りできるかの追求です。これからのマーケティングで求められるのは、データの関連性を見つけ、そこからデータの意味を理解しようとする姿勢です。データは集まっているけれどどう活用すればよいかわからないという場合、まずはデータとデータのつながりや、その背景にある意味を見つけるようにしてみましょう。"},{"name":"cors.md","content":"読み方: コルス or シーオーアールエスCross-Origin Resource Sharing の略、日本語訳すると「オリジン間リソース共有」。- [なんとなく CORS がわかる...はもう終わりにする。 - Qiita](https://qiita.com/att55/items/2154a8aad8bf1409db2b)\u003e Access to fetch at 'http://localhost:8081/register' from origin 'http://localhost:3000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: The 'Access-Control-Allow-Origin' header has a value 'http://localhost:5432' that is not equal to the supplied origin. Have the server send the header with a valid value, or, if an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled."},{"name":"css.md","content":""},{"name":"curry.md","content":"引数の数可変バージョン[JavaScript:カリー化してくれる関数 - Qiita](https://qiita.com/ttatsf/items/cf21381a386c89247200)```jsconst curry = (f) =\u003e {  //関数partの定義。  const part = (...xs) =\u003e    xs.length \u003c f.length ? (y) =\u003e part(...xs, y) : f(...xs);  // partを呼び、返す。  return part;};```"},{"name":"cut.md","content":"cut -f -d\u003e git config --list | grep user.name | cut -f 2 -d \"=\""},{"name":"daemon.md","content":"/etc/systemd/system/\u003c任意の名前\u003e.service```[Unit]Description=\u003c任意の説明\u003eAfter=network.target[Service]Type=simpleWorkingDirectory=/home/ec2-user # ← 作業ディレクトリも指定しておきましょう。ExecStart=/home/ec2-user/main # ←実行パスを指定しますRestart = always[Install]WantedBy=multi-user.target```# 設定ファイルの再読み込みec2-user@\u003cip アドレス\u003e ~]$ sudo systemctl daemon-reload# サービスの自動起動有効化ec2-user@\u003cip アドレス\u003e ~]$ sudo systemctl enable \u003c任意の名前\u003e.service# サービス起動ec2-user@\u003cip アドレス\u003e ~]$ sudo systemctl start \u003c任意の名前\u003e.service# サービスの状態確認"},{"name":"databases.md","content":"|                                                                      |                   |                   || -------------------------------------------------------------------- | ----------------- | ----------------- || **Feature Comparison**                                               | **PostgreSQL 10** | **MySQL 8**       || Common Table Expression (CTE)                                        | Yes               | Yes (Newly Added) || Declarative Partitioning                                             | Yes (Newly Added) | Yes               || Full-text Search                                                     | Yes               | Yes               || Geographic Information System (GIS) / Spatial Reference System (SRS) | Yes               | Yes (Upgraded)    || JSON                                                                 | Yes               | Yes (Upgraded)    || Logical Replication                                                  | Yes (Newly Added) | Yes               || Semi-Synchronous Replication                                         | Yes (Newly Added) | Yes               || Window Functions                                                     | Yes               | Yes (Newly Added) |"},{"name":"ddd.md","content":"- [実際の業務と DDD - スマートロック開発日誌 #2](https://zenn.dev/hsshss/articles/e11efefc7011ab)- [DDD リファレンス 定義とパターン概要 (鋭意修正中, CC-BY)](https://zenn.dev/takahashim/books/fb4cdc32f8e95c)- [ドメイン駆動設計にまつわる概念](https://zenn.dev/imamura_sh/articles/ddd-summary-f85323ffc1b91d82f795)"},{"name":"deno.md","content":"- [GitHub - rbrahul/deno_cron: A cron Job scheduler for Deno that allows you to write human readable cron syntax with tons of flexibility](https://github.com/rbrahul/deno_cron)"},{"name":"design.md","content":"like design site- [Things I find interesting](https://sdorsett.github.io/#menu)"},{"name":"developer-issue.md","content":"1. Getting too much technical debt or over-engineering/over-optimization2. Missing tests or not testing each level of the pyramid"},{"name":"devops.md","content":"DevOps Research and Assesment (DORA) チームが実施した 6 年間の研究で、ソフトウェア開発チームのパフォーマンスを示す 4 つの指標が確立されました。- [Four Keys 〜自分たちの開発レベルを定量化してイケてる DevOps チームになろう〜 - Tech Blog - Recruit Engineer](https://engineer.recruit-lifestyle.co.jp/techblog/2021-03-31-four-keys/)[2019 年の DevOps/MLOps エンジニアの標準的スキルセット - Qiita](https://qiita.com/poly_soft/items/8dd105341869f93b129c)"},{"name":"docker.md","content":"```docker run --name temp_alpine394 -itd alpine:3.9.4 /bin/sh# ordocker pull alpine:3.9.4docker imagesdocker run -itd \u003cimage id\u003e /bin/shdocker exec -it \u003ccontainer id | container name\u003e /bin/shapk updateapk upgradeapk info``````apk add gitapk add curlapk add fzfapk add zshapk add bashapk add makeapk add vim(cd ~/; git clone https://github.com/kis9a/dotfiles; cd ~/dotfiles)```\u003c!--{{{--\u003esetopt no_beepsetopt nolistbeepsetopt auto_cdsetopt auto_pushdsetopt hist_ignore_dupssetopt hist_ignore_all_dupssetopt hist_ignore_spacesetopt hist_reduce_blankssetopt share_historysetopt prompt_substsetopt aliasesunsetopt PROMPT_SPdisable r# zinitif [[! -f $HOME/.zinit/bin/zinit.zsh]]; thencommand mkdir -p \"$HOME/.zinit\" \u0026\u0026 command chmod g-rwX \"$HOME/.zinit\"command git clone https://github.com/zdharma/zinit \"$HOME/.zinit/bin\" \u0026\u0026 print -P \"success\" || print -P \"fail\"fiif [ $DOTFILES/.zshrc -nt ~/.zshrc.zwc ]; thenzcompile ~/.zshrcfisource \"$HOME/.zinit/bin/zinit.zsh\"source \"$HOME/bin/z\"autoload -Uz \\_zinitautoload -Uz add-zsh-hookautoload -Uz colors \u0026\u0026 colorsautoload -Uz compinitautoload -Uz vcs_info(( ${+\\_comps} )) \u0026\u0026 \\_comps[zinit]=\\_zinitzinit ice depth=1# zinit light jeffreytse/zsh-vi-modezinit light zsh-users/zsh-autosuggestionszinit ice wait'!0'; zinit load zsh-users/zsh-syntax-highlightingzinit ice wait'!0'; zinit load zsh-users/zsh-completions# function zvm_after_init() {zinit light zsh-users/zsh-history-substring-searchzinit light zdharma/history-search-multi-word# }zvm_after_init_commands+=(zvm_after_init)# promptzstyle ':vcs*info:git:*' check-for-changes truezstyle ':vcs_info:git:*' stagedstr \"%F{yellow}!\"zstyle ':vcs_info:git:*' unstagedstr \"%F{red}+\"zstyle ':vcs_info:*' formats \"%F{green} %c%u%b%f\"zstyle ':vcs_info:\\*' actionformats '%b|%a'precmd () { vcs_info; precmd() { echo } }\\_vcs_precmd () { vcs_info }add-zsh-hook precmd \\_vcs_precmdPROMPT='%F{142}\u003c %~%f${vcs_info_msg_0*} %F{142}\u003e%f '# bindkeybindkey -vbindkey -s '^v' 'nvim .^M'bindkey -M viins '^K' backward-kill-linebindkey '^F' autosuggest-acceptbindkey '^P' history-substring-search-upbindkey '^N' history-substring-search-downbindkey '^I' expand-cmd-pathbindkey '^I' complete-wordbindkey '^A' end-of-linebindkey '^B' backward-charbindkey '^E' forward-charbindkey '^D' backward-delete-charfunction f() {dir=$(fd -t d -d 3 | fzf)  if [ \"$(echo $dir)\" ]; thencd $dirfi}function ff() {baseDir=$DEV  dir=$(fd -t d --base-directory $baseDir -d 3 | fzf)  cd $baseDir/$dir}function fzf-z-search() {local res=$(z | sort -rn | cut -c 12- | fzf)    if [ -n \"$res\" ]; thenBUFFER+=\"cd $res\"zle accept-lineelsereturn 1fi}zle -N fzf-z-searchbindkey '^j' fzf-z-search\u003c!--}}}--\u003e\u003c!--{{{--\u003eFROM alpine:3.4ENV NGINX_VERSION 1.11.1RUN apk --update add pcre-dev openssl-dev \\ \u0026\u0026 apk add --virtual build-dependencies build-base curl \\ \u0026\u0026 curl -SLO http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz \\ \u0026\u0026 tar xzvf nginx-${NGINX_VERSION}.tar.gz \\  \u0026\u0026 cd nginx-${NGINX_VERSION} \\ \u0026\u0026 ./configure \\ --with-http_ssl_module \\ --with-http_gzip_static_module \\ --prefix=/usr/share/nginx \\ --sbin-path=/usr/local/sbin/nginx \\ --conf-path=/etc/nginx/conf/nginx.conf \\ --pid-path=/var/run/nginx.pid \\ --http-log-path=/var/log/nginx/access.log \\ --error-log-path=/var/log/nginx/error.log \\ \u0026\u0026 make \\ \u0026\u0026 make install \\ \u0026\u0026 ln -sf /dev/stdout /var/log/nginx/access.log \\ \u0026\u0026 ln -sf /dev/stderr /var/log/nginx/error.log \\ \u0026\u0026 cd / \\ \u0026\u0026 apk del build-dependencies \\ \u0026\u0026 rm -rf \\ nginx-${NGINX_VERSION} \\       nginx-${NGINX_VERSION}.tar.gz \\ /var/cache/apk/\\*VOLUME [\"/var/cache/nginx\"]EXPOSE 80 443CMD [\"nginx\", \"-g\", \"daemon off;\"]\u003c!--}}}--\u003e|       | image 構築 | コンテナ構築 | コンテナ起動 || ----- | ---------- | ------------ | ------------ || build | ○          | ×            | ×            || up    | △          | ○            | ○            || start | ×          | ×            | ○            || run   | ○ （単独） | ○ （単独）   | ○ （単独）   |"},{"name":"erlang.md","content":"- [Why You Should Use Erlang in 2021](https://serokell.io/blog/introduction-to-erlang)  Concurrency, Scalability, Reliability."},{"name":"error-handling.md","content":"E ラーハンドリングは「どこに」「何をきっかけに」「どういう」エラーが起こったのかをサーバー側で判断できるようにする役割"},{"name":"eslint.md","content":"- [TypeScript+React 用に ESLint を導入する - Qiita](https://qiita.com/Captain_Blue/items/5d6969643148174e70b3)- [GitHub - google/eslint-config-google: ESLint shareable config for the Google JavaScript style guide](https://github.com/google/eslint-config-google){{{````module.exports = {  rules: {    'no-cond-assign': 'off', // eslint:recommended    'no-irregular-whitespace': 'error', // eslint:recommended    'no-unexpected-multiline': 'error', // eslint:recommended    'valid-jsdoc': ['error', {      requireParamDescription: false,      requireReturnDescription: false,      requireReturn: false,      prefer: {returns: 'return'},    }],    'curly': ['error', 'multi-line'],    'guard-for-in': 'error',    'no-caller': 'error',    'no-extend-native': 'error',    'no-extra-bind': 'error',    'no-invalid-this': 'error',    'no-multi-spaces': 'error',    'no-multi-str': 'error',    'no-new-wrappers': 'error',    'no-throw-literal': 'error', // eslint:recommended    'no-with': 'error',    'prefer-promise-reject-errors': 'error',    'no-unused-vars': ['error', {args: 'none'}], // eslint:recommended    'array-bracket-newline': 'off', // eslint:recommended    'array-bracket-spacing': ['error', 'never'],    'array-element-newline': 'off', // eslint:recommended    'block-spacing': ['error', 'never'],    'brace-style': 'error',    'camelcase': ['error', {properties: 'never'}],    'comma-dangle': ['error', 'always-multiline'],    'comma-spacing': 'error',    'comma-style': 'error',    'computed-property-spacing': 'error',    'eol-last': 'error',    'func-call-spacing': 'error',    'indent': [      'error', 2, {        'CallExpression': {          'arguments': 2,        },        'FunctionDeclaration': {          'body': 1,          'parameters': 2,        },        'FunctionExpression': {          'body': 1,          'parameters': 2,        },        'MemberExpression': 2,        'ObjectExpression': 1,        'SwitchCase': 1,        'ignoredNodes': [          'ConditionalExpression',        ],      },    ],    'key-spacing': 'error',    'keyword-spacing': 'error',    'linebreak-style': 'error',    'max-len': ['error', {      code: 80,      tabWidth: 2,      ignoreUrls: true,      ignorePattern: 'goog\\.(module|require)',    }],    'new-cap': 'error',    'no-array-constructor': 'error',    'no-mixed-spaces-and-tabs': 'error', // eslint:recommended    'no-multiple-empty-lines': ['error', {max: 2}],    'no-new-object': 'error',    'no-tabs': 'error',    'no-trailing-spaces': 'error',    'object-curly-spacing': 'error',    'one-var': ['error', {      var: 'never',      let: 'never',      const: 'never',    }],    'operator-linebreak': ['error', 'after'],    'padded-blocks': ['error', 'never'],    'quote-props': ['error', 'consistent'],    'quotes': ['error', 'single', {allowTemplateLiterals: true}],    'require-jsdoc': ['error', {      require: {        FunctionDeclaration: true,        MethodDefinition: true,        ClassDeclaration: true,      },    }],    'semi': 'error',    'semi-spacing': 'error',    'space-before-blocks': 'error',    'space-before-function-paren': ['error', {      asyncArrow: 'always',      anonymous: 'never',      named: 'never',    }],    'spaced-comment': ['error', 'always'],    'switch-colon-spacing': 'error',    'arrow-parens': ['error', 'always'],    'constructor-super': 'error', // eslint:recommended    'generator-star-spacing': ['error', 'after'],    'no-new-symbol': 'error', // eslint:recommended    'no-this-before-super': 'error', // eslint:recommended    'no-var': 'error',    'prefer-const': ['error', {destructuring: 'all'}],    'prefer-rest-params': 'error',    'prefer-spread': 'error',    'rest-spread-spacing': 'error',    'yield-star-spacing': ['error', 'after'],  },};```\u003c!--}}}--\u003e```````  \"scripts\": {    \"lint\": \"eslint 'src/**/*.{js,jsx,ts,tsx}'\",    \"lint:fix\": \"eslint --fix 'src/**/*.{js,jsx,ts,tsx}'\",    \"postinstall\": \"typesync\"  },```[ESLint のルールを全部手動で設定するのは大変だからやめておけ - Qiita](https://qiita.com/khsk/items/0f200fc3a4a3542efa90)```{  \"extends\": [\"eslint:recommended\"],  \"plugins\": [],  \"parserOptions\": {},  \"env\": {    \"browser\": true,    \"es6\": true  },  \"globals\": {},  \"rules\": {    \"semi\": \"error\",    \"arrow-body-style\": \"error\",    \"arrow-parens\": \"error\",    \"arrow-spacing\": \"error\",    \"generator-star-spacing\": \"error\",    \"no-duplicate-imports\": \"error\",    \"no-useless-computed-key\": \"error\",    \"no-useless-constructor\": \"error\",    \"no-useless-rename\": \"error\",    \"no-var\": \"error\",    \"no-shadow\": \"error\",    \"object-shorthand\": \"error\",    \"prefer-arrow-callback\": \"error\",    \"prefer-const\": \"error\",    \"prefer-rest-params\": \"error\",    \"prefer-spread\": \"error\",    \"prefer-template\": \"error\",    \"rest-spread-spacing\": \"error\",    \"template-curly-spacing\": \"error\",    \"yield-star-spacing\": \"error\"  }}```"},{"name":"event.md","content":"[チケットぴあ［チケット情報・販売・購入・予約］](https://t.pia.jp/)[ログイン・新規登録 - connpass](https://connpass.com/dashboard/)"},{"name":"figlet.md","content":"```figlet -f kban'||      '|| ||  ..   || ...   ....   .. ... || .'    ||'  || '' .||   ||  || ||'|.    ||    | .|' ||   ||  ||.||. ||.  '|...'  '|..'|' .||. ||.figlet -f flaktur kis9a      ..         .       .x+=:.\u003c .z@8\"`        @88\u003e    z`    ^% !@88E          %8P        .   \u003ck   .xn!~%x. '888E   u       .       .@8Ned8\"  x888   888.         u  888E u@8NL   .@88u   .@^%8888\"  X8888   8888:     us888u.  888E`\"88*\"  ''888E` x88:  `)8b. 88888   X8888  .@88 \"8888\"  888E .dN.     888E  8888N=*8888 88888   88888\u003e 9888  9888  888E~8888     888E   %8\"    R88 `8888  :88888X 9888  9888  888E '888\u0026    888E    @8Wou 9%    `\"**~ 88888\u003e 9888  9888  888E  9888.   888\u0026  .888888P`    .xx.   88888  9888  9888'\"888*\" 4888\"   R888\" `   ^\"F     '8888\u003e  8888~  \"888*\"\"888\"   \"\"    \"\"      \"\"                888\"  :88%     ^Y\"   ^Y'                                    ^\"===\"\"figlet -f larry3d kis9a __                     __/\\ \\      __          /'_ `\\\\ \\ \\/'\\ /\\_\\    ____/\\ \\L\\ \\     __ \\ \\ , \u003c \\/\\ \\  /',__\\ \\___, \\  /'__`\\  \\ \\ \\\\`\\\\ \\ \\/\\__, `\\/__,/\\ \\/\\ \\L\\.\\_   \\ \\_\\ \\_\\ \\_\\/\\____/    \\ \\_\\ \\__/.\\_\\    \\/_/\\/_/\\/_/\\/___/      \\/_/\\/__/\\/_/ _______  _______ _________ _______(  ____ \\(  ____ )\\__   __/(  ____ \\| (    \\/| (    )|   ) (   | (    \\/| (__    | (____)|   | |   | ||  __)   |  _____)   | |   | || (      | (         | |   | || (____/\\| )      ___) (___| (____/\\(_______/|/       \\_______/(_______/ .|';                     ||` ||                       ||'||'  .|''|, `||''|,  .|''||  .|''|, '||''| ||   ||..||  ||  ||  ||  ||  ||..||  ||.||.  `|...  .||  ||. `|..||. `|...  .||.#   #  ###   #### #   #  ###  #   ### ## #   # #     #   # #   # # # ## # # #   # #      #### #   # # # ##   # #   # #         # #   # # # ##   #  ###   ####     #  ###   ###       __                 __.----.|  |--.--.--.-----.|  |--.--.--.|  __||     |  |  |     ||    \u003c|  |  ||____||__|__|_____|__|__||__|__|___  |                               |_____|```"},{"name":"font.md","content":"fc-list | grep Hackhttps://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/VictorMono- [Judge Hard Font Download](https://fontmeme.com/fonts/judge-hard-font/)- [ カクカクと角張ったデザインがかわいいフリーフォントのまとめ | コリス](https://coliss.com/articles/freebies/freebies-font-square-by-designbeep.html)- [全て無料!!カクカクした『ブロックフォント素材』 | Adobe 信者 NEXTist の動画・画像編集が楽しくなる小ネタブログ（NEXTist Skill Box）](https://nextist.net/free-font-addition-kakukaku/)"},{"name":"frontend-architecture.md","content":"- [新 Qiita で React をやめて hyperapp を採用した背景 - Qiita](https://qiita.com/yuku_t/items/2839e57a1933507f36b4)- [2018 年は Hyperapp の年だ - Qiita](https://qiita.com/JorgeBucaran/items/c48446babe0627e25ee6)見た目を管理することユーザのインタラクションをトリガーにして、適切に Interactor を呼び出すことInteractor の実行結果を踏まえて見た目を適切に更新すること"},{"name":"frontend.md","content":"- [ServiceWorker for github pages. · GitHub](https://gist.github.com/kosamari/7c5d1e8449b2fbc97d372675f16b566e)- [Chrome DevTools を用いたメルカリ Web のパフォーマンス計測 | メルカリエンジニアリング](https://engineering.mercari.com/blog/entry/2018-12-12-090156/)Incremental SSG- [Incremental Static Regeneration で実現する次世代のサーバーアーキテクチャ - mizdev](https://mizchi.dev/202005182044-awesome-next-issg)- [光を超えるためのフロントエンドアーキテクチャ - Speaker Deck](https://speakerdeck.com/mizchi/guang-wochao-erutamefalsehurontoendoakitekutiya?slide=82)- [加速するフロントエンドと PWA - Speaker Deck](https://speakerdeck.com/mizchi/jia-su-suruhurontoendotopwa?slide=73)Largest Contentful Paint(LCP)lazyload IntersectionObserver apifeatures\u003c!--{{{--\u003ePrincípiosSingle Responsibility Principle (SRP)Open Closed Principle (OCP)Liskov Substitution Principle (LSP)Interface Segregation Principle (ISP)Dependency Inversion Principle (DIP)Separation of Concerns (SOC)Don't Repeat Yourself (DRY)You Aren't Gonna Need It (YAGNI)Keep It Simple, Silly (KISS)Composition Over InheritanceSmall CommitsDesign PatternsFactoryAdapterCompositeDecoratorDependency InjectionAbstract ServerComposition RootBuilderProxyMetodologias e DesignsTDDClean ArchitectureDDDReactive ProgrammingResponsive LayoutConventional CommitsGitFlowModular DesignDependency DiagramsUse CasesContinuous IntegrationContinuous DeliveryContinuous DeploymentBibliotecas e FerramentasTypescriptReactReact Testing LibraryReact Router DOMCypressJestAxiosGitWebpackSASS + AnimationsNPMTravis CIFakerCoverallsHuskyLint StagedEslintStandard Javascript StyleReact Flip MoveFeatures do ReactFunctional ComponentsUseStateUseContextUseEffectUseHistoryUseRefUseParamsCustom HooksRouterMemoFeatures do GitAliasLog PersonalizadoBranchResetAmendTagTag AnotadaStashRebaseMergeAddCommitPushPullShortlogStatusFeatures do TypescriptPOO AvançadoInterfaceType AliasNamespaceModuleUtility TypesModularização de PathsBuildDeployGenericsFeatures de TestesTestes UnitáriosTestes de IntegraçãoTestes e2eCobertura de TestesTest DoublesMocksStubsSpiesFakesDummies\u003c!--}}}--\u003e- [OGP 対応をした - mizdev](https://mizchi.dev/202006211925-support-ogp)- [Front End Optimization (FEO) | CDN Guide | Imperva](https://www.imperva.com/learn/performance/front-end-optimization-feo/)構築済み HTML·CSS を CDN で返す。裏で先読みする。- lambda edge- cloudflare workers- fastify cloud platformnext.js link rel=preloadwebworkerCache-Control: stale-while-revalidate,- [Lighthouse の計測結果を見ていく - Qiita](https://qiita.com/nightyknite/items/22d9f818dbab9bf171a3)- [GitHub - iamkun/dayjs: ⏰ Day.js 2kB immutable date-time library alternative to Moment.js with the same modern API](https://github.com/iamkun/dayjs)- [HTML に img 要素で画像を表示する 2020 年版 - Qiita Qiita](https://qiita.com/hibikikudo/items/853aafe32ad7900712c8)- [WebP に関する 10 の誤解〜5 分で学ぶ WebP - Qiita](https://qiita.com/miyanaga/items/1c8d0f8c2f44d8c3b5b5)- [ImageMagick と WebP - Qiita](https://qiita.com/yoya/items/0848a6b0b39db4cd57c2)"},{"name":"gamification.md","content":"Gamification\"Game\"1.- Unification and Clearly \"Needs\", \"Values\".- Setting most important numerical value.- Concreate index and parameters.- Create roadmap in the medium and long term.- Thinking of Stakeholder approval.2.- Turn PDCA circle and tasks data.- Task to more classified.3.- Knowledge chunk.- Varification this game by data.- Knowledge output.---### Output- Think Workflow and Management.- Gamification in the education."},{"name":"generative-art.md","content":"[Generative Art - mimonelu](https://mimonelu.net/generative-art/index.html)Visual art genreGenerative art refers to art that in whole or in part has been created with the use of an autonomous system. An autonomous system in this context is generally one that is non-human and can independently determine features of an artwork that would otherwise require decisions made directly by the artist.[【Three.js】スクロールでぐにゃぐにゃする画像を実装する](https://zenn.dev/bokoko33/articles/bd6744879af0d5)[Diana Toloza — Photography](https://dianatoloza.co/)"},{"name":"gh-search.md","content":"## Basic search| This search | Finds repositories with… || --- | --- || cat stars:\u003e100 | Find cat repositories with greater than 100 stars. || user:defunkt | Get all repositories from the user defunkt. || tom location:\"San Francisco, CA\" | Find all tom users in \"San Francisco, CA\". || join extension:coffee | Find all instances of join in code with coffee extension. || NOT cat | Excludes all results containing cat. |* * *## Repository searchRepository search looks through the projects you have access to on GitHub. You can also filter the results:| This search | Finds repositories with… || --- | --- || cat stars:\u003e100 | Find cat repositories with greater than 100 stars. || user:defunkt | Get all repositories from the user defunkt. || pugs pushed:\u003e2013-01-28 | Pugs repositories pushed to since Jan 28, 2013. || node.js forks:\u003c200 | Find all node.js repositories with less than 200 forks. || jquery size:1024..4089 | Find jquery repositories between the sizes 1024 and 4089 kB. || gitx fork:true | Repository search includes forks of gitx. || gitx fork:only | Repository search returns only forks of gitx. |* * *## Code searchCode search looks through the files hosted on GitHub. You can also filter the results:| This search | Finds repositories with… || --- | --- || install repo:charles/privaterepo | Find all instances of install in code from the repository charles/privaterepo. || shogun user:heroku | Find references to shogun from all public heroku repositories. || join extension:coffee | Find all instances of join in code with coffee extension. || system size:\u003e1000 | Find all instances of system in code of file size greater than 1000kbs. || examples path:/docs/ | Find all examples in the path /docs/. || replace fork:true | Search replace in the source code of forks. |* * *## Issue searchIssue search looks through issues and pull requests on GitHub. You can also filter the results:| This search | Finds issues… || --- | --- || encoding user:heroku | Encoding issues across the Heroku organization. || cat is:open | Find cat issues that are open. || strange comments:\u003e42 | Issues with more than 42 comments. || hard label:bug | Hard issues labeled as a bug. || author:mojombo | All issues authored by mojombo. || mentions:tpope | All issues mentioning tpope. || assignee:rtomayko | All issues assigned to rtomayko. || exception created:\u003e2012-12-31 | Created since the beginning of 2013. || exception updated:\u003c2013-01-01 | Last updated before 2013. |* * *## User searchUser search finds users with an account on GitHub. You can also filter the results:| This search | Finds repositories with… || --- | --- || fullname:\"Linus Torvalds\" | Find users with the full name \"Linus Torvalds\". || tom location:\"San Francisco, CA\" | Find all tom users in \"San Francisco, CA\". || chris followers:100..200 | Find all chris users with followers between 100 and 200. || ryan repos:\u003e10 | Find all ryan users with more than 10 repositories. |Basic searchThis search\tFinds repositories with…cat stars:\u003e100\tFind cat repositories with greater than 100 stars.user:defunkt\tGet all repositories from the user defunkt.tom location:\"San Francisco, CA\"\tFind all tom users in \"San Francisco, CA\".join extension:coffee\tFind all instances of join in code with coffee extension.NOT cat\tExcludes all results containing cat.Repository search Repository search looks through the projects you have access to on GitHub. You can also filter the results:This search\tFinds repositories with…cat stars:\u003e100\tFind cat repositories with greater than 100 stars.user:defunkt\tGet all repositories from the user defunkt.pugs pushed:\u003e2013-01-28\tPugs repositories pushed to since Jan 28, 2013.node.js forks:\u003c200\tFind all node.js repositories with less than 200 forks.jquery size:1024..4089\tFind jquery repositories between the sizes 1024 and 4089 kB.gitx fork:true\tRepository search includes forks of gitx.gitx fork:only\tRepository search returns only forks of gitx.Code search Code search looks through the files hosted on GitHub. You can also filter the results:This search\tFinds repositories with…install repo:charles/privaterepo\tFind all instances of install in code from the repository charles/privaterepo.shogun user:heroku\tFind references to shogun from all public heroku repositories.join extension:coffee\tFind all instances of join in code with coffee extension.system size:\u003e1000\tFind all instances of system in code of file size greater than 1000kbs.examples path:/docs/\tFind all examples in the path /docs/.replace fork:true\tSearch replace in the source code of forks.Issue search Issue search looks through issues and pull requests on GitHub. You can also filter the results:This search\tFinds issues…encoding user:heroku\tEncoding issues across the Heroku organization.cat is:open\tFind cat issues that are open.strange comments:\u003e42\tIssues with more than 42 comments.hard label:bug\tHard issues labeled as a bug.author:mojombo\tAll issues authored by mojombo.mentions:tpope\tAll issues mentioning tpope.assignee:rtomayko\tAll issues assigned to rtomayko.exception created:\u003e2012-12-31\tCreated since the beginning of 2013.exception updated:\u003c2013-01-01\tLast updated before 2013.User search User search finds users with an account on GitHub. You can also filter the results:This search\tFinds repositories with…fullname:\"Linus Torvalds\"\tFind users with the full name \"Linus Torvalds\".tom location:\"San Francisco, CA\"\tFind all tom users in \"San Francisco, CA\".chris followers:100..200\tFind all chris users with followers between 100 and 200.ryan repos:\u003e10\tFind all ryan users with more than 10 repositories.For more information, visit our[search help section](https://docs.github.com/articles/about-searching-on-github/)."},{"name":"gist.md","content":"#!/bin/bashexec_mode='production' # 'production' or 'test'mock_file='./gists.json'output_dir='./gists'# check exec_modeif [ $exec_mode != 'production' -a $exec_mode != 'test' ] ; thenecho 'ERROR: set correct status'exit 1fi## GET gists or read mock_fileif [ $exec_mode = 'test' ] ; thenif [ -f $mock_file ] ; thendeclare -a gists=$(cat $mock_file)  else    echo 'dont exit mock files, get gists and output mock_file'    $(curl -u $1 https://api.github.com/users/$2/gists -o $mock_file)    declare -a gists=$(cat $mock_file)  fielse  declare -a gists=$(curl -u $1 https://api.github.com/users/$2/gists)fi## set output directory$(rm -rf $output_dir) \u0026\u0026 $(mkdir $output_dir)## set gist_files getting times. if exec_mode='test' will two times getif [ $exec_mode = 'test' ] ; thendeclare -i gists_length=2elsedeclare -i gists_length=$(echo $gists | jq length)fi## gists export local markdown filesfor i in $( seq 0 $(($gists_length - 1))); dogist=$(echo $gists | jq .[$i])gist_files=$(echo $gist | jq \".files\" -r)  declare -i gist_files_length=$(echo $gist_files | jq length)  gist_file_names=$(echo $gist_files | jq keys)if [ $gist_files_length = 0 ] ; thenecho 'dont exit gist_files in this gist'exit;fifor n in $( seq 0 $(($gist_files_length -1))); dogist_file=$(echo $gist_files | jq .\"$(echo $gist_file_names | jq .[$n])\" -r)gist_file_name=$(echo $gist_file | jq .\"filename\" -r)    gist_raw_url=$(echo $gist_file | jq .\"raw_url\" -r)    $(curl $gist_raw_url -o $output_dir/\"$gist_file_name\".md)donedone"},{"name":"git-command-tips.md","content":"### delete all local branch```shgit branch | grep -v '^*' | xargs git branch -D```### find commits yet to be applied to upstreamhttps://git-scm.com/docs/git-cherry```shgit cherry [-v] [\u003cupstream\u003e [\u003chead\u003e [\u003climit\u003e]]]``````o search the commit log (across all branches) for the given text:git log --all --grep='Build 0051'To search the actual content of commits through a repo's history, use:git grep 'Build 0051' $(git rev-list --all)### new base branch --onto \u003cnewbase\u003e```### git rebase --onto```shgit rebase --onto```git rebase --root -i.git log --pretty=fullergit rebase --committer-date-is-author-date### git clone with submodule```git clone -b v1 --depth=1 https://github.com/nkjm/bootcamp-sushi-bot.git``````alias gco=gcofunction gco() {date=$(date -v -$1d)git commit --date $date}alias gcoa='git rebase HEAD~ --committer-date-is-author-date'git credential fillgit credential rejectgit remote set-url origin git://\u003cuserid\u003e:\u003cpasswd\u003e@github.com/user/myapp.git`git config --global url.\"https://\u003cuserid\u003e@github.com\".insteadOf \"https://github.com\"まだaddされていない部分だけを一時保存git stash -kまだgit管理に入っていないファイルもstashする。git stash -ustash allgit stash -agitignore files showgit ls-files --others -i --exclude-standard```- by [Github で一番有名な Git TIPS 集 - Qiita](https://qiita.com/rana_kualu/items/4d5e27244256e9689304)git gc --aggressive --prune```git shortlog --since=\"$(date +\"%Y-%m-%d\") 00:00:00\" --no-merges -sngit config --global alias.today \"log --since=midnight --author='$(git config user.name)' --oneline\"```[git gc の仕組みを原理から理解してサイズを 136MB → 7.2MB(95%減)まで削減した時の勉強メモ](https://zenn.dev/ulwlu/articles/cc2443d32e2444)"},{"name":"git-status-synbol.md","content":"```UU（both modified）3ウェイマージした結果のコンフリクトファイル．=\u003eコンフリクトしている箇所を編集する必要あり．AA（both added）マージされるブランチ（HEAD）にあるファイルと、マージするブランチにあるファイルをマージした結果、変更箇所がコンフリクトしているファイル=\u003eコンフリクトしている箇所を編集する必要あり．UD（deleted by them)マージされるブランチ（HEAD)に存在するファイルが、マージするブランチでは削除されているファイル=\u003eファイルを削除するか， 残すか選択DU（deleted by us）マージするブランチに存在するファイルが、マージされるブランチ（HEAD）では削除されているファイル.=\u003eファイルを削除するか， 残すか選択修正が不要AU（added by us）マージされるブランチ（HEAD）にのみ存在するファイル．=\u003eファイルはそのままUA（added by them）マージするブランチにのみ存在するファイルです。=\u003e自動的にstagingに乗る．DD（both deleted)マージされるブランチ（HEAD）及び、マージするブランチから削除されたファイル.=\u003e自動で削除```"},{"name":"github-actions.md","content":"- [github actions で zenn 記事の予約投稿を実現する](https://zenn.dev/ryo_kawamata/articles/schedule-publish-on-zenn-article)- [昔作った GitHub の Label を供養する](https://zenn.dev/sh090/articles/8291abdb1be48f5765ec)- [github-script は便利です - Qiita](https://qiita.com/bugfire/items/a2fa85fa58dd20322e3f)- [GitHub Actions の記事一覧 | Zenn](https://zenn.dev/topics/githubactions)- [GitHub - actions/checkout: Action for checking out a repo](https://github.com/actions/checkout)- [GitHub - actions/github-script: Write workflows scripting the GitHub API in JavaScript](https://github.com/actions/github-script)- [GitHub - technote-space/get-diff-action: GitHub Actions to get git diff](https://github.com/technote-space/get-diff-action)- [awesome-terraform-pipeline/awesome-terraform-pipeline.yml at main · bmbferreira/awesome-terraform-pipeline · GitHub](https://github.com/bmbferreira/awesome-terraform-pipeline/blob/main/.github/workflows/awesome-terraform-pipeline.yml)- [github-action-push-to-another-repository/action.yml at main · cpina/github-action-push-to-another-repository · GitHub](https://github.com/cpina/github-action-push-to-another-repository/blob/main/action.yml)```# name: test# on:#   push:#     branches:#       - main#   pull_request:#     branches:#       - main# jobs:#   tf_plan:#     runs-on: ubuntu-latest#     strategy:#       matrix:#         dir: [infra/]#     steps:#       # - uses: actions/checkout@v2#       - uses: hashicorp/setup-terraform@v1.2.1#         with:#           terraform_version: 0.15.3#       - name: Terraform format#         id: fmt#         run: terraform fmt -check -recursive#         working-directory: ${{ matrix.dir }}#         continue-on-error: true#       - name: Configure aws credentials#         uses: aws-actions/configure-aws-credentials@v1#         with:#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}#           aws-region: ap-northeast-3#       - name: Terraform Init#         id: init#         run: terraform init#         working-directory: ${{ matrix.dir }}#       - name: Terraform Plan#         id: plan#         run: terraform plan -no-color#         continue-on-error: true```CircleCI（テストやデプロイなど）GitHub Actions（テストやデプロイなど）AWS CodeBuild（主に Terraform など AWS リソースにアクセスする場合）Google Cloud Build（主に Google Cloud のリソースにアクセスする場合）Jenkins（定期実行や手動実行に特化したジョブ）このうち GitHub Actions は以下の点が優れていると感じています。monorepo 構成の場合にマイクロサービスごとに独立して Workflow を定義できる公開 Action のエコシステムが発達しているWorkflow の定期実行やパラメータ付き手動実行にも対応している一方で、クラウドに統合されている CI サービスと比較すると、GitHub Actions には以下の課題があります。Organization あたりのジョブの同時実行数が制限されている（正確な情報はドキュメントを参照してください）実行環境からクラウドリソースにアクセスするにはクレデンシャル（例えば AWS では IAM access key）を渡す必要があるが、漏洩リスクやローテーション管理負荷を考えると避けたい実行環境の時間単価が若干高めに設定されているGitHub Actions には Self-hosted Runner という仕組みがあり、自分で用意した環境でジョブを実行することも可能です。 Self-hosted Runner を利用するとこれらの課題を解決できるのではないかと考えました。GitHub Actions (GitHub-hosted Runner) には以下の課題があることを冒頭で説明しました。Organization あたりのジョブの同時実行数が制限されている実行環境からクラウドリソースにアクセスするにはクレデンシャルを渡す必要があるが、漏洩リスクやローテーション管理負荷を考えると避けたい実行環境の時間単価が若干高めに設定されているSelf-hosted Runner の導入により、以下のように課題を解決できたと考えています。同時実行数の制限がなくなったIAM Roles for Service Accounts を利用することで、クレデンシャルを使わずに権限を割り当てられる（セキュリティの改善）EC2 Spot Instances を利用することで、インスタンスの時間単価を抑えられる（コストの改善）```name: zennon:  schedule:    - cron: \"* * * * 1\"  push:    branches:      - masterjobs:  zenn:    runs-on: ubuntu-20.04    env:      REPO_TOKEN: ${{ secrets.REPO_TOKEN }}    steps:      - name: install go        uses: actions/setup-go@v2        with:          go-version: ^1.16      - name: version        run: go version      - name: go get aws-services        run: go get github.com/kis9a/aws-services      - name: checkout        uses: actions/checkout@v2        with:          repository: kis9a/kis9a          path: kis9a      - name: update zenn article        run: |          cd kis9a/          git config user.name \"kis9a\"          git config user.email \"kis9ax@gmail.com\"          aws-services jp -t zenn/articles/aws-services.template -o zenn/articles/aws-services.md          ls -la zenn/articles          echo $REPO_TOKEN          git add zenn/articles/aws-services.md          git push https://kis9a:$REPO_TOKEN@github.com/kis9a/kis9a.git``````name: Teston: [push]jobs:  skipci:    runs-on: ubuntu-18.04    steps:      - run: echo \"[skip ci] ${{ contains(github.event.head_commit.message, '[skip ci]') }}\"  test:    runs-on: ubuntu-18.04    if: contains(github.event.head_commit.message, '[skip ci]') == false    steps:``````name: env-{{.Env}}on:  push:    branches:      - main    paths:      - \"envs/{{.Env}}/**\"      - \".github/workflows/env-{{.Env}}.yml\"env:  ENVNAME: {{.Env}}jobs:  main:    runs-on: ubuntu-20.04    steps:      # - name: Install Go 1.16      #   uses: actions/setup-go@v2      #   with:      #     go-version: ^1.16      - name: Checkout Repository        uses: actions/checkout@v2      # - name: Create infra resources      #   run: |      #     export INFRABUILDER=`pwd`      #     cd cmd/infra      #     go install .      #     infra      #     infra gen {{.Env}} -f      # - name: Cache Go modulegenerates      #   uses: actions/cache@v2.1.0      #   with:      #     path: ~/go/pkg/mod      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}      #     restore-keys: |      #       ${{ runner.os }}-go-      # - uses: stefanzweifel/git-auto-commit-action@v3.0.0      #   with:      #     commit_message: update by .github/workflows/env-{{.Env}}.yml      - name: Configure aws credentials        uses: aws-actions/configure-aws-credentials@v1        with:          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}          aws-region: ap-northeast-3      - name: Setup Terraform Cloud workspace        id: workspace        uses: reguengos/terraform-github-workspace-setup-action@master        with:          organization: \"evolany-infra\"          workspace: ${{ env.ENVNAME }}          vars: '            {              \"key\": \"AWS_ACCESS_KEY_ID\",              \"value\": \"${{ secrets.AWS_ACCESS_KEY_ID }}\",              \"sensitive\": \"true\",              \"category\": \"env\"            },            {              \"key\": \"AWS_SECRET_ACCESS_KEY\",              \"value\": \"${{ secrets.AWS_SECRET_ACCESS_KEY }}\",              \"sensitive\": \"true\",              \"category\": \"env\"            }          '          token: ${{ secrets.TF_TFE_TOKEN }}      - name: Get the output time        run: echo \"The workspace ID is ${{ steps.workspace.outputs.workspace_id }}\"      - name: Setup Terraform        uses: hashicorp/setup-terraform@v1.2.1        with:          terraform_version: 0.15.3          cli_config_credentials_token: ${{ secrets.TF_TFE_TOKEN }}      - name: Terraform format        id: fmt        run: terraform fmt -check -recursive        working-directory: \"./envs/${{ env.ENVNAME }}\"        continue-on-error: true      - name: Terraform Validate        id: validate        run: terraform validate -no-color        continue-on-error: true      - name: Terraform Init        id: init        run: terraform init        working-directory: \"./envs/${{ env.ENVNAME }}\"      - name: Terraform Plan        id: plan        run: terraform plan -no-color        working-directory: \"./envs/${{ env.ENVNAME }}\"      - name: Terraform Apply        id: apply        run: terraform apply -auto-approve        working-directory: \"./envs/${{ env.ENVNAME }}\"```"},{"name":"github-auth.md","content":"git credential-osxkeychain erase- [GitHub への認証方法 - GitHub Docs](https://docs.github.com/ja/github/authenticating-to-github)"},{"name":"github-bot.md","content":"dependabot\u003chttps://docs.github.com/en/code-security/supply-chain-security/keeping-your-dependencies-updated-automatically/configuration-options-for-dependency-updates\u003e"},{"name":"github-search.md","content":"| Qualifier | Example || --------- | ------- || `type:pr` | [**cat type:pr**](https://github.com/search?q=cat+type%3Apr\u0026type=Issues)matches pull requests with the word \"cat.\" || `type:issue` | [**github commenter:defunkt type:issue**](https://github.com/search?q=github+commenter%3Adefunkt+type%3Aissue\u0026type=Issues)matches issues that contain the word \"github,\" and have a comment by @defunkt. || `is:pr` | [**event is:pr**](https://github.com/search?utf8=%E2%9C%93\u0026q=event+is%3Apr\u0026type=)matches pull requests with the word \"event.\" || `is:issue` | [**is:issue label:bug is:closed**](https://github.com/search?utf8=%E2%9C%93\u0026q=is%3Aissue+label%3Abug+is%3Aclosed\u0026type=)matches closed issues with the label \"bug.\" || Qualifier | Example || --------- | ------- || `in:title` | [**warning in:title**](https://github.com/search?q=warning+in%3Atitle\u0026type=Issues)matches issues with \"warning\" in their title. || `in:body` | [**error in:title,body**](https://github.com/search?q=error+in%3Atitle%2Cbody\u0026type=Issues)matches issues with \"error\" in their title or body. || `in:comments` | [**shipit in:comments**](https://github.com/search?q=shipit+in%3Acomment\u0026type=Issues)matches issues mentioning \"shipit\" in their comments. || Qualifier | Example || --------- | ------- || `draft:true` | [**draft:true**](https://github.com/search?q=draft%3Atrue)matches draft pull requests. || `draft:false` | [**draft:false**](https://github.com/search?q=draft%3Afalse)matches pull requests that are ready for review. || Qualifier | Example || --------- | ------- || `is:merged` | [**bugfix is:pr is:merged**](https://github.com/search?utf8=%E2%9C%93\u0026q=bugfix+is%3Apr+is%3Amerged\u0026type=)matches merged pull requests with the word \"bugfix.\" || `is:unmerged` | [**error is:unmerged**](https://github.com/search?utf8=%E2%9C%93\u0026q=error+is%3Aunmerged\u0026type=)matches closed issues and pull requests with the word \"error.\" || Qualifier | Example || --------- | ------- || `archived:true` | [**archived:true GNOME**](https://github.com/search?q=archived%3Atrue+GNOME\u0026type=)matches issues and pull requests that contain the word \"GNOME\" in archived repositories you have access to. || `archived:false` | [**archived:false GNOME**](https://github.com/search?q=archived%3Afalse+GNOME\u0026type=)matches issues and pull requests that contain the word \"GNOME\" in unarchived repositories you have access to. || Qualifier | Example || --------- | ------- || `is:locked` | [**code of conduct is:locked is:issue archived:false**](https://github.com/search?q=code+of+conduct+is%3Alocked+is%3Aissue+archived%3Afalse)matches issues or pull requests with the words \"code of conduct\" that have a locked conversation in a repository that is not archived. || `is:unlocked` | [**code of conduct is:unlocked is:issue archived:false**](https://github.com/search?q=code+of+conduct+is%3Aunlocked+archived%3Afalse)matches issues or pull requests with the words \"code of conduct\" that have an unlocked conversation in a repository that is not archived. || Qualifier | Example || --------- | ------- || `no:label` | [**priority no:label**](https://github.com/search?q=priority+no%3Alabel\u0026type=Issues)matches issues and pull requests with the word \"priority\" that also don't have any labels. || `no:milestone` | [**sprint no:milestone type:issue**](https://github.com/search?q=sprint+no%3Amilestone+type%3Aissue\u0026type=Issues)matches issues not associated with a milestone containing the word \"sprint.\" || `no:assignee` | [**important no:assignee language:java type:issue**](https://github.com/search?q=important+no%3Aassignee+language%3Ajava+type%3Aissue\u0026type=Issues)matches issues not associated with an assignee, containing the word \"important,\" and in Java repositories. || `no:project` | [**build no:project**](https://github.com/search?utf8=%E2%9C%93\u0026q=build+no%3Aproject\u0026type=Issues)matches issues not associated with a project board, containing the word \"build.\" || クエリ                   | 説明                                                                                                || ------------------------ | --------------------------------------------------------------------------------------------------- || is:open                  | 状態が open であること。既にクローズされているものは必死に追う必要はないので見ない                  || is:issue                 | Pull Request は除外して Issue だけに絞り込む。Pull Request は全く別の条件で一覧化したいので除外する || involves:yuya-takeyama   | 自信を巻き込んでる Issue だけに絞り込む                                                             || user:hogehoge-co         | User または Organization が hogehoge-co のリポジトリの Issue だけに絞り込む                         || -repo:hogehoge-co/nippoh | 日報を書くのに使っているリポジトリの Issue は除外する                                               || sort:updated-desc        | 更新日時で降順にソートする                                                                          || クエリ                 | 説明                                       || ---------------------- | ------------------------------------------ || assignee:yuya-takeyama | 自分が assign されているものだけに絞り込む |"},{"name":"gitio-custom.md","content":"Command:curl https://git.io/ -i -F \"url=https://github.com/YOUR_GITHUB_URL\" -F \"code=YOUR_CUSTOM_NAME\"URLs that can be created is from:https://github.com/_https://_.github.comhttps://_.github.com/_https://_.github.iohttps://_.github.io/_https://_.githubusercontent.com/\\*If you accidentally make a typo in the custom name, you can add .git (only the repository name) or ? at the end in your GitHub URL.curl https://git.io/ -i -F \"url=https://github.com/YOUR_GITHUB_URL.git\" -F \"code=YOUR_CUSTOM_NAME\"curl https://git.io/ -i -F \"url=https://github.com/YOUR_GITHUB_URL?\" -F \"code=YOUR_CUSTOM_NAME\"If you want to revoke your custom name, you should contact GitHub Support Team. As of 23 September 2020, you can no longer request to revoke your outdated or incorrect git.io URL.Shortcut to this Gist: git.io/customurl"},{"name":"gmail.md","content":"@startumlAlice-\u003eBob : hellonote left: this is a first noteBob-\u003eAlice : oknote right: this is another noteBob-\u003eBob : I am thinkingnote lefta notecan also be definedon several linesend note@enduml---@startuml== Initialization ==Alice -\u003e Bob: Authentication RequestBob --\u003e Alice: Authentication Response== Repetition ==Alice -\u003e Bob: Another authentication RequestAlice \u003c-- Bob: another authentication Response@enduml---@startumlBob -\u003ex AliceBob -\u003e AliceBob -\u003e\u003e AliceBob -\\ AliceBob \\\\- AliceBob //-- AliceBob -\u003eo AliceBob o\\\\-- AliceBob \u003c-\u003e AliceBob \u003c-\u003eo Alice@enduml---@startumlAlice -\u003e Bob: Authentication Requestalt successful case    Bob -\u003e Alice: Authentication Acceptedelse some kind of failure    Bob -\u003e Alice: Authentication Failure    group My own label    Alice -\u003e Log : Log attack start        loop 1000 times            Alice -\u003e Bob: DNS Attack        end    Alice -\u003e Log : Log attack end    endelse Another type of failure   Bob -\u003e Alice: Please repeatend@enduml---@startumlTitle: アプリケーションサービス・シーケンスユーザー-\u003eクライアントアプリ: アプリ起動クライアントアプリ--\u003eOAUTH認証先: ログインOAUTH認証先-\u003e\u003eWEBアプリケーション: 認証OKWEBアプリケーション-\u003eWEBアプリケーション: データベース\\nとのやり取り等\\n各種処理WEBアプリケーション--\u003e\u003eユーザー: ログイン認証完了・セッション開始@enduml---@startumlTitle: Google authorizationFE-\u003eGM: アプリ起動LUA-\u003eGMDB-\u003eFE:get cache message by mid@enduml"},{"name":"go-auth.md","content":"- [セキュリティ視点からの JWT 入門 - blog of morioka12](https://scgajge12.hatenablog.com/entry/jwt_security)- [Go 言語で JWT を使って認証と認可を低コストに - Qiita](https://qiita.com/nirasan/items/1d5a2527a5384c863aa3)- [JWT の最新ベスト プラクティスに関するドラフトを読み解く](https://auth0.com/blog/jp-a-look-at-the-latest-draft-for-jwt-bcp/)- [packagemain #11: Getting started with OAuth2 in Go - YouTube](https://www.youtube.com/watch?v=OdyXIi6DGYw)"},{"name":"go-frontend.md","content":"- [GitHub - imdario/zas: Most zen static website generator in Golang.](https://github.com/imdario/zas)- [GitHub - evanw/esbuild: An extremely fast JavaScript bundler and minifier](https://github.com/evanw/esbuild)- [GitHub - gohugoio/hugo: The world’s fastest framework for building websites.](https://github.com/gohugoio/hugo)"},{"name":"go-gin.md","content":"## middlewares\"github.com/gin-contrib/cors\"\"github.com/gin-contrib/sessions\"\"github.com/gin-contrib/sessions/cookie\"\"github.com/gin-gonic/gin\"- [net/http 2 ＜ Mux ＞｜ Go 言語による Web サーバー作成入門](https://zenn.dev/ichi320/books/0f544e3a076ba2b7212f/viewer/36a3ca)- [go bcrypt のコードを読む - Qiita](https://qiita.com/butterv/items/ca330d27fe51a6bf7a3d)- [GitHub - monaco-io/request: go request, go http client](https://github.com/monaco-io/request)- [React で multipart/form-data を送信、Gin で受信する - Qiita](https://qiita.com/harumaxy/items/035ee46c82e8211d831c)- [【GO】gin で FormData の POST リクエストを Bind する](https://zenn.dev/someone7140/articles/c0c66e6c9b29dd)- [gin を最速でマスターしよう - Qiita](https://qiita.com/Syoitu/items/8e7e3215fb7ac9dabc3a)- [Golang Gin Framework Crash Course 09 | Setting up a JSON Web Token (JWT) Authorization Middleware - YouTube](https://www.youtube.com/watch?v=p3maH9G_DLM)"},{"name":"go-gorm.md","content":"- [Go 言語の Gorm を実践投入する時に最低限知っておくべきことのまとめ【ORM】 - Qiita](https://qiita.com/ttiger55/items/3606b8dd570637c12387)新規レコードを作成する時は Create既存レコードを更新する時はできるだけ Update更新時に空値を含めて Struct で更新したい場合は Save更新時に空値を含めて Map で更新したい時は Update- [GO の ORM を分かりやすくまとめてみた【GORM 公式ドキュメントの焼き回し】 - Qiita](https://qiita.com/gold-kou/items/45a95d61d253184b0f33)"},{"name":"go-goroutine.md","content":""},{"name":"go-io.md","content":"- [Non-Blocking I/O, I/O Multiplexing, Asynchronous I/O の区別 - Carpe Diem](https://christina04.hatenablog.com/entry/2017/07/05/005944)- [bufio パッケージによる buffered I/O ｜ Go から学ぶ I/O](https://zenn.dev/hsaki/books/golang-io-package/viewer/bufio)- ファイル開いて読み込み- ファイル開いて読み込み２- ファイル開いて書き込み- ファイル開いて書き込み２- 追記モード (Append) で開いて書き込み- /dev/null のように出力を捨てる- Shift-JIS なファイルを読み込み- Shift-JIS なファイルを書き込み- EUC-JP なファイルを読み込み- EUC-JP なファイルを書き込み- CSV データの読み込み- CSV データの書き込み- TSV データの読み込み- TSV データの書き込み- JSON (Marshal, シリアライズ)- JSON (Unmarshal, デシリアライズ)- JSON (Marshal, 日付, RFC3339)- JSON (Unmarshal, 日付, RFC3339)- JSON (Marshal, 日付, カスタム)- JSON (Unmarshal, 日付, カスタム)- JSON (Decoder)- JSON (Encoder)- XML (Marshal, シリアライズ)- XML (Unmarshal, デシリアライズ)- XML (Decoder)- XML (Encoder)- YAML (Marshal, シリアライズ)- YAML (Unmarshal, デシリアライズ)- YAML (Decoder)- YAML (Encoder)- バイナリデータの読み込み- バイナリデータの書き込み- バイナリデータを構造体にマッピング  [Go メモ-153 (Go でのファイル I/O のやり方まとめ) - いろいろ備忘録日記](https://devlights.hatenablog.com/entry/2021/06/16/014722)"},{"name":"go-logging.md","content":"- [Golang におけるエラーハンドリングとロギングのプラクティス - melody](https://techblog.szksh.cloud/golang-logging-error-handling-practice/)- [Go のエラーハンドリング](https://zenn.dev/spiegel/books/error-handling-in-golang)- [今 go のエラーハンドリングを無難にしておく方法（2021.07 現在）](https://zenn.dev/nekoshita/articles/097e00c6d3d1c9)- [Go でシェルの Exit code を扱う | tellme.tokyo](https://tellme.tokyo/post/2018/04/02/golang-shell-exit-code/)- [GitHub - ztrue/tracerr: Golang errors with stack trace and source fragments.](https://github.com/ztrue/tracerr)- [GitHub - logrusorgru/aurora: Golang ultimate ANSI-colors that supports Printf/Sprintf methods](https://github.com/logrusorgru/aurora)- [Go エラーハンドリング戦略](https://zenn.dev/nobonobo/articles/0b722c9c2b18d5)"},{"name":"go-preformance.md","content":"- [結局、Go 言語をやめる理由はなかった件 - Qiita](https://qiita.com/Maki-Daisuke/items/23c1285500208048de80)- [イベントループなしでのハイパフォーマンス – C10K 問題への Go の回答](https://postd.cc/performance-without-the-event-loop/)\u003e C10K 問題への Go の回答\u003e Go においては通常、syscall はブロッキングなオペレーションで、ファイル記述子の読み込みと書き込みを含んでいます。Go のスケジューラは元のスレッドがブロックされても、未使用のスレッドを探したり生成したりすることにより Go ルーチンを提供し続けます。ブロックされたスレッドが少ないとすぐにローカル I/O のバンド幅を使い果たしてしまうため、実際、ファイル I/O にとっては問題なく機能します。\u003e しかしネットワークソケットでは、常に Go ルーチンのほぼ全てがネットワーク I/O を待って意図的にブロックされてしまいます。ネイティブな実装では、ネットワークトラフィックを待ちブロックされてしまうため、Go ルーチンと同じ数だけのスレッドを必要とします。Go の統合されたネットワークポーリング機能は、ランタイムとネットワークパッケージとの協力により、これを効果的に処理します。\u003e Go の古いバージョンでは、1 つの Go ルーチンが kqueu や epoll を使って準備完了通知をチェックしポーリングを行っていました。このポーリング用 Go ルーチンはチャネルを通じて、待機中の Go ルーチンへと通知していました。これにより、syscall 毎のスレッドというオーバーヘッドを避けることができ、チャネルが送信する汎用のウェイクアップの仕組みを使っていました。スケジューラはウェイクアップのソースや重要性については全く認識していなかったということです。\u003e 最新の Go では、ネットワークポーリング機能はランタイムに統合されています。どの Go ルーチンがソケットの準備完了を待っているかをランタイムが把握しているため、パケットが到着し次第すぐに同じ CPU へと Go ルーチンを配置することができ、遅延を減らし、スループットが向上します。\u003e 結論として、Go ルーチンが提供する強力な抽象化により、プログラマはスレッドプールやイベントループについての心配から解放されます。\u003e Go ルーチンのスタックは、スレッドスタックやスレッドプールのサイズを気にすることなく、必要なだけ大きくすることができます。\u003e 統合されたネットワーク調査により、Go のプログラマは、複雑なコールバック方式を避け、OS が提供する最も効率的な I/O 完了のロジックを利用できるのです。\u003e ランタイムにより、Go ルーチンを全て供給するのに十分なスレッドと、コアを使用可能にしておくことが保証されます。\u003e そして、Go のプログラマはそういった全ての機能を意識しなくていいのです。- [Go でスケールする実装を書く | GolangRdyJp](http://golang.rdy.jp/2016/07/27/concurrency/)- [Go のアンチパターン | GolangRdyJp](http://golang.rdy.jp/2016/07/26/antiptn/)"},{"name":"go-static-analysis.md","content":"https://tenntenn.dev/ja/analysis/"},{"name":"go.md","content":"- [goroutine はなぜ軽量なのか - Carpe Diem](https://christina04.hatenablog.com/entry/why-goroutine-is-good)- [Go · GitHub](https://github.com/golang/)- [Packages - The Go Programming Language](https://golang.org/pkg/)- [Go で並行処理(基本編)｜ Go での並行処理を徹底解剖！](https://zenn.dev/hsaki/books/golang-concurrency/viewer/basicusage)- [Go 言語の記述の迷いどころについて](https://zenn.dev/nobonobo/articles/19c84c231aff46)- [Go の言語仕様書精読のススメ 英語彙集](https://zenn.dev/hsaki/articles/gospecdictionary)- [Go Template、最高のプログラミング言語 - Qiita](https://qiita.com/Syuparn/items/4157d13c39b95185acfd)- [Go 言語で「embedded で継承ができる」と思わないほうがいいのはなぜか？ - Qiita](https://qiita.com/Maki-Daisuke/items/511b8989e528f7c70f80)- [Rust なのか Go なのか](https://python.ms/rust-or-go/#_2-%E7%94%A8%E9%80%94)- [Go でオプショナルパラメータをどう扱うか - 1 ミリもわからん](https://raahii.github.io/posts/optional-parameters-in-go/)- [AWS CDK×LINE BOT ハンズオン～アプリとインフラをコード管理しよう～](https://zenn.dev/ufoo68/books/3fbd1969bd4b21c5454b)- [Go の Type Sets proposal を読む](https://zenn.dev/nobishii/articles/99a2b55e2d3e50#context)Go2- [Go1.7 の context パッケージ | Taichi Nakashima](https://deeeet.com/writing/2016/07/22/context/)- [Go Concurrency Patterns: Context - The Go Blog](https://blog.golang.org/context)Go 言語で文字列の連結を行う際には概ね以下の 4 つの方法がある。\u003c!--{{{--\u003e- “ + ” 演算子で連結する- strings .Join で連結する- bytes .Buffer で追記する- []byte に append するつまり []byte 配列への append() と strings.Builder への追記と strings.Join() は実質的に同じ処理で，それぞれの前処理分だけ差が出ているということになる。今回の検証ではやっぱり + 演算子による連結はダメダメ 2よほどの最適化が要求されない限り []byte 配列への append() は strings.Builder へ代替可能 3strings.Join() 関数のパフォーマンスは十分なので気軽に使ってよい文字列連結に限るなら，もはや bytes.Buffer は有利とは言えないといったところだろうか。\u003c!--}}}--\u003etext/template\u003c!--{{{--\u003e```{{if true}}    {{println \"got it!\"}}{{else}}    {{println \"no...\"}}{{end}}{{- /*コメントは複数行可能*/ -}}{{- `rawstringも複数行可能` -}}```\u003c!--}}}--\u003ecache clean\u003c!--{{{--\u003eThe -i flag causes clean to remove the corresponding installed archive or binary (what 'go install' would create).The -n flag causes clean to print the remove commands it would execute, but not run them.The -r flag causes clean to be applied recursively to all the dependencies of the packages named by the import paths.The -x flag causes clean to print remove commands as it executes them.The -cache flag causes clean to remove the entire go build cache.The -testcache flag causes clean to expire all test results in the go build cache.The -modcache flag causes clean to remove the entire module download cache, including unpacked source code of versioned dependencies.\u003c!--}}}--\u003e① Go 言語標準の正規表現ライブラリは、正規表現と検査文字列の長さに対して常に O(n2)O(n2)のオーダーで計算量が増加する安定したアルゴリズムを採用している。\u003c!--{{{--\u003e② \"正規表現オブジェクト\"を用いたマッチング処理には排他制御が行われている。\u003c!--}}}--\u003eenvs\u003c!--{{{--\u003eこのディレクトリは Go modules を利用することで不要になります。具体的には環境変数 GO111MODULE=on と設定することで、$GOPATH/src から開放されます。export GO111MODULE=on # Go 1.11 から利用可能export GOBIN=$HOME/binexport GOMODCACHE=$HOME/.cache/go_mod # Go 1.15 から利用可能そのため、例えば ~/bin を使いたい場合は GOBIN=$HOME/bin と指定することにより $GOPATH/bin から開放されます。\u003c!--}}}--\u003e- [GitHub - sekky0905/Go_equivalence: Go の等値と等価](https://github.com/sekky0905/Go_equivalence){{{  等値を確認したい時  \u0026struct でもって、比較する。アドレスを比較し、指しているものが「完全に同一か」どうかを確認する。\u0026struct1 == \u0026struct2 を用いる。(アドレスを比較すので\u0026をつけてつけて比較) reflect.DeepEqual(\u0026struct1, \u0026struct2) は一見等値に見えるが、そうではないので注意!等価を確認したい時struct でもって、比較する。アドレスは別で良くて、単純に指しているものが「同じ内容か」どうかを確認する。struct1 == struct2 か reflect.DeepEqual(struct1, struct2) だが、後者を使用した方がよさそう。\u003c!--}}}--\u003eGenerics\u003c!--{{{--\u003e- [Why Generics? - The Go Blog](https://blog.golang.org/why-generics)- [Go 言語にやってくる Generics は我々に何をもたらすのか](https://zenn.dev/mattn/books/4c7de85ec42cb44cf285)\u003c!--}}}--\u003egolang module management.\u003c!--{{{--\u003e- [GitHub - imdario/mergo: Mergo: merging Go structs and maps since 2013.](https://github.com/imdario/mergo)learn golang topics \u003chttps://github.com/pathbox/learning-go/tree/dc1e02df7594f394d559c1fcf466a817473d6ad2/src\u003eモジュールとパッケージとはモジュール＝パッケージを一つまたは複数のサブパッケージを取りまとめたカタマリ。パッケージ＝フォルダ単位で単一ファイルまたは複数ファイルのカタマリ。サブパッケージ＝サブフォルダにおくだけで扱いはパッケージと同等。\u003c!--}}}--\u003epointer\u003c!--{{{--\u003e```type Hoge struct {\tField string}func func1() {\tm := map[string]*Hoge{\"hoge\": \u0026Hoge{}}\tm[\"hoge\"].Field = \"hello\"}func func2 () {\tm := map[string]Hoge{\"hoge\": Hoge{}}\tm[\"hoge\"].Field = \"hello\"}- [「Go 初心者が気を付けること」の解説](https://zenn.dev/nobonobo/articles/e0af4e8afc6c38b42ae1)```func1 ではマップから取り出した値が構造体ポインタなので元の実体のフィールドに代入することはできます。func2 ではマップから取り出した値は構造体のコピーなのでそのフィールドを書き換えても元の値が書き換わることはありません。\u003c!--}}}--\u003ego2\u003c!--{{{--\u003e```package mainimport (\t\"fmt\")func ʔ[T any](cond bool, t, f T) T {\tif cond {\t\treturn t\t}\treturn f}func main() {\tfmt.Println(ʔ(true, \"yes\", \"no\"))\tfmt.Println(ʔ(false, \"yes\", \"no\"))}```\u003c!--}}}--\u003eio.Reader , io.Writer の抽象性\u003c!--{{{--\u003e```func TranslateIntoGerman(r io.Reader) {\tdata := make([]byte, 300)\tlen, _ := r.Read(data)\tstr := string(data[:len])\tresult := strings.ReplaceAll(str, \"Hello\", \"Guten Tag\")\tfmt.Println(result)}``````// ファイルの中身を読み込んで文字列置換する関数func FileTranslateIntoGerman(f *os.File) {\tdata := make([]byte, 300)\tlen, _ := f.Read(data)\tstr := string(data[:len])\tresult := strings.ReplaceAll(str, \"Hello\", \"Guten Tag\")\tfmt.Println(result)}// ネットワークコネクションからデータを受信して文字列置換する関数func NetTranslateIntoGerman(conn net.Conn) {\tdata := make([]byte, 300)\tlen, _ := conn.Read(data)\tstr := string(data[:len])\tresult := strings.ReplaceAll(str, \"Hello\", \"Guten Tag\")\tfmt.Println(result)}```bufio.Reader 型を作るための元になるリーダーが、具体型ではなく io.Reader であることで、「ネットワークでもファイルでもその他の I/O であっても、buffered I/O にできる」のです。ここからも「io パッケージによる I/O 抽象化」のメリットを感じることができます。ですが「ファイルを 1 個 1 個用意する」とかいう面倒な方法をせずとも、strings.Reader 型を使うことで、テスト内容をコード内で用意することができるのです。\u003c!--}}}--\u003eGo でリテラルと呼ばれるものを挙げると以下の通り。\u003c!--{{{--\u003e整数リテラル小数点リテラル複素数リテラルrune リテラル文字列リテラル型リテラルcomposite リテラル構造体リテラル配列リテラルスライスリテラルマップリテラル関数リテラル\u003c!--}}}--\u003e// Go cmd\u003c!--{{{--\u003ego list -m all で、現在の依存モジュールを表示するgo mod tidy で、使われていない依存モジュールを削除する\u003c!--}}}--\u003eGOOS=linux GOARCH=amd64 go build main.go## Pros- C like (statically typed)- Productive (easy prototyping)- Great community- Robust \u0026 easy to learn (Fixed, limited feature set)- Great STD lib- Fast- Great concurrent model- Garbage collected- Great package management- Built in testing \u0026 profiling- Cross platform## Cons- No generics- Clunky error management- Nil interface values (nil pointer dereference)- Discourages ORMs- No FP- No OOP- Big binary size- Not made for ultra high performance due to GC## Use cases- CLI tools- System tools: Docker, CockroachDB, InfluxDB- Server side services: PUB/SUB server and clients, caching mechanisms, integration layers- API(s): REST, gRPC, GraphQL- DevOps tools- Cloud \u0026 networked tools- Website building: Hugo (Not my preference)## Productivity- C like \u0026 statically typed- Easy to learn, read \u0026 write- Capable \u0026 powerful STD lib## Simplicity- The language philosophy- Limited feature set \u0026 keywords (no fancy features like generics)- Simple \u0026 limited data structures (no classes, just funcs and types)## Reliability- Blazing fast- Garbage collected- Cross platform## Robustness- Super stable with limited updates- 100% compatible \u0026 no breaking changes- Cross platform ($GOOS $GOARCH)## Maturity- Baked \u0026 maintained by Google- Powerful STD lib- Built in pkg manager, testing framework, concurrency model- Many good libs \u0026 tools- Great docs, examples \u0026 resources- Growing market depending on location (everyone is catching up, from PHP, JS, and even Java and C++)- About 2M gophers## Temp- Blazing fast specs with magic- Cross platform with magic```# バージョンVERSION:=$(shell cat VERSION)# リビジョンREVISION:=$(shell git rev-parse --short HEAD 2\u003e /dev/null || cat REVISION)# 出力先のディレクトリBINDIR:=bin# ルートパッケージ名の取得ROOT_PACKAGE:=$(shell go list .)# コマンドとして書き出されるパッケージ名の取得COMMAND_PACKAGES:=$(shell go list ./cmd/...)# 出力先バイナリファイル名(bin/server など)BINARIES:=$(COMMAND_PACKAGES:$(ROOT_PACKAGE)/cmd/%=$(BINDIR)/%)# ビルド時にチェックする .go ファイルGO_FILES:=$(shell find . -type f -name '*.go' -print)# gRPC ファイルPB_FILES:=$(shell find . -type f -name '*.proto' -print)# proto から生成される .go ファイルGOPB_FILES:=$(PB_FILES:%.proto=%.pb.go)# version ldflagGO_LDFLAGS_VERSION:=-X '${ROOT_PACKAGE}.VERSION=${VERSION}' -X '${ROOT_PACKAGE}.REVISION=${REVISION}'# symbol table and dwarfGO_LDFLAGS_SYMBOL:=ifdef RELEASE\tGO_LDFLAGS_SYMBOL:=-w -sendif# static ldflagGO_LDFLAGS_STATIC:=ifdef RELEASE\tGO_LDFLAGS_STATIC:=-extldflags '-static'endif# build ldflagsGO_LDFLAGS:=$(GO_LDFLAGS_VERSION) $(GO_LDFLAGS_SYMBOL) $(GO_LDFLAGS_STATIC)# build tagsGO_BUILD_TAGS:=debugifdef RELEASE\tGO_BUILD_TAGS:=releaseendif# race detectorGO_BUILD_RACE:=-raceifdef RELEASE\tGO_BUILD_RACE:=endif# static build flagGO_BUILD_STATIC:=ifdef RELEASE\tGO_BUILD_STATIC:=-a -installsuffix netgo\tGO_BUILD_TAGS:=$(GO_BUILD_TAGS),netgoendif# go buildGO_BUILD:=-tags=$(GO_BUILD_TAGS) $(GO_BUILD_RACE) $(GO_BUILD_STATIC) -ldflags \"$(GO_LDFLAGS)\"# ビルドタスク.PHONY: buildbuild: $(BINARIES)# お掃除.PHONY: cleanclean:\t@$(RM) $(GOPB_FILES) $(BINARIES) $(BINDIR)/protoc-gen-go# 実ビルドタスク$(BINARIES): $(GO_FILES) $(GOPB_FILES) VERSION .git/HEAD\t@go build -o $@ $(GO_BUILD) $(@:$(BINDIR)/%=$(ROOT_PACKAGE)/cmd/%)# protoc のビルド$(GOPB_FILES): $(PB_FILES) $(BINDIR)/protoc-gen-go\t@protoc \\\t\t--plugin=protoc-gen-go=$(BINDIR)/protoc-gen-go \\\t\t-I ./proto \\\t\t--go_out=./proto \\\t\t--go_opt=paths=source_relative \\\t\t$(@:%.pb.go=%.proto)$(BINDIR)/protoc-gen-go: go.sum\t@go build -o $@ google.golang.org/protobuf/cmd/protoc-gen-go```- [Go で使う Makefile の育て方](https://zenn.dev/rosylilly/articles/202105-go-makefile)"},{"name":"good-bookmark.md","content":"- [ざっくり AWS | AWS の料金を日本円でざっくり計算](https://aws-rough.cc/)- [RegEX Cheat Sheet \u0026 Quick Reference](https://quickref.me/)"},{"name":"google-app-script.md","content":"\u003chttps://github.com/tanaikech/taking-advantage-of-google-apps-script#golang\u003e"},{"name":"grep.md","content":"## grep- requires that the pattern before it would have at least one match and can also have more.* on the other hand doesn't require a match. It could have 0, 1 or more than 1 matches.  If you also need to match empty values i.e. name=\"\" you can use \\*.  By the way the difference with + (no quoting with \\) from (\\+) is that the former is a form of extended regex while the latter is for a normal form of regular expression.  At least with grep/egrep the statement is true. – konsolebox Jul 8 '14 at 13:24-c 指定したパターンにマッチした行数を出力-h ファイル名を先頭に付ける-i 大文字と小文字を区別しない-l ファイル名のみを出力する-n マッチした行の行番号を出力する-s エラーを表示しない-v パターンにマッチした行以外を出力する-w パターンを単語としてマッチ-E 正規表現を利用してマッチングを行う場合、-E で明示しておくと良いgrep 検索したい文字列 検索したいテキストファイルコマンド | grep 検索したい文字列grep -e 検索したい文字列 1 -e 検索したい文字列 2 検索したいテキストファイルgrep -i 検索したい文字列 検索したいテキストファイルgrep -E '正規表現' source.txt#利用できる正規表現. 改行文字以外の任意の 1 文字-                    直前の1文字の0回以上の繰り返しに一致。直前の文字は正規表現でも構わない  ^ 行の先頭  $ 行の末尾  [ ] かっこ内の任意の 1 文字に一致。ハイフン（-）で範囲指定もできる  [^ ] かっこ内の任意の 1 文字に不一致。ハイフン（-）で範囲指定もできる  \\+ 直前の文字の 1 個以上の繰り返しに一致  \\? 直前の文字の 0 または 1 文字に一致  \\{n\\} 直前の文字の n 個の繰り返しに一致  \\{n,\\} 直前の文字の n 個以上の繰り返しに一致  \\{,m\\} 直前の文字の m 個以下の繰り返しに一致  \\{n,m\\} 直前の文字の n 個以上，m 個以下の繰り返しに一致  pattern1\\|pattern2 pattern1 または pattern2 のいずれかに一致  \\(pattern\\) pattern をグループ化する。マッチした内容は\\num で参照できる  \\ 正規表現に使われる記号を普通の文字として扱う例grep '\\[0-9]' source.txt # '[0-9]'の文字列を検索grep -E '(\\[0-9]){2}' source.txt # '[0-9]'が 2 回続く文字列を検索grep '[Ll]inux' source.txt # 「Linux」または「linux」が含む行を検索するgrep '\\\u003c[Ll]inux\\\u003e' source.txt # 独立した「Linux」または「linux」が含む行を検索する、RedhatLinux とかは含まないgrep '[1-9][0-9][0-9][a-z][0-9]' source.txt # 先頭に 0 を含まず 123A7 のようなパターンに一致grep '^[0-9]' source.txt # 数字を含まない行を検索するgrep '.....' source.txt # 5 文字以上の行だけ探すgrep '\\\u003cW...s\\\u003e$' source.txt # 先頭が W、末尾が s の文字列を探すgrep '.' source.txt # 空行を除外grep '^\\\u003cEX\\\u003e\\{1,3\\}' source.txt # EX という文字が 1 ～ 3 回出る行grep '\\\u003c[A-Z]\\{\\6,15\\}\\\u003e' source.txt # 大文字アルファベットが 6 ～ 15 文字含む行grep '\\\u003c[A-Za-z]\\{\\6,15\\}\\\u003e' source.txt # 大文字小文字アルファベットが 6 ～ 15 文字含む行grep '\\\u003c[^0-9a-za-z]\\{\\6,15\\}\\\u003e' source.txt # 大文字小文字アルファベットと数字以外の文字が 6 ～ 15 文字含む行grep '[0-9]\\{3\\}-[0-9]\\{3\\}-[0-9]\\{4\\}' source.txt # 電話番号 000-000-0000 を含む行複数のパターンで検索するgrep -E 'パターン 1|パターン 2' source.txt大文字小文字区別せずに検索するgrep -i 'パターン' source.txtパターンを除外して表示grep -v 'パターン' source.txt#たとえば ps aux をした際ps aux | grep java #とすると\"grep java\"自体もヒットしてしまうがps aux | grep java | grep -v grep #とすれば、grep 自体は引っ掛からないパータンの出現行数を数えるgrep -c 'パターン' source.txtgrep -w 'パターン' source.txt#たとえばgrep -w 'if' source.txt #とやると、elseif や endif、iftop など if を含むものは引っ掛からず、\" if \"と独立しているモノだけ引っ掛かるbanana を含むファイルを検索します。user@host: ~$ grep -lr banana .apple を含むファイルを検索します。user@host: ~$ grep -lr apple .banana を含まないファイルを検索します。user@host: ~$ grep -vlr banana .grep -lr \u003c肯定条件\u003e . | xargs grep -L \u003c否定条件\u003e## ripgrep```o Recursively search the current directory for a regex pattern:rg patterno Search for pattern including all .gitignored and hidden files:rg -uu patterno Search for a pattern only in a certain filetype (e.g., html, css, etc.):rg -t filetype patternSearch for a pattern only in a subset of directories:rg pattern set_of_subdirsSearch for a pattern in files matching a glob (e.g., README.*):rg pattern -g globo Only list matched files (useful when piping to other commands):rg --files-with-matches patterno Show lines that do not match the given pattern:rg --invert-match patterno Search a literal string pattern:rg -F string```---```- [grep の -l オプション (一覧表示) と -v (条件反転) オプションを併用すると死ぬ - Qiita](https://qiita.com/mpyw/items/b73a38a72391807148b9)// for i, v := range []string{\"foo\", \"bar\", \"baz\"} {// fmt.Println(i, v)// }// for k, v := range map[string]int{\"key-1\": 100, \"key-2\": 200, \"key-3\": 300} {// fmt.Println(k, v)// }```"},{"name":"groff.md","content":"function! Compile()\t\tlet extension = expand('%:e')\t\tif extension == \"ms\"\t\t\t\texecute \"! groff -ms % -T pdf \u003e /tmp/op.pdf\"\t\telseif extension == \"tex\"\t\t\t\texecute \"! pandoc -f latex -t latex % -o /tmp/op.pdf\"\t\telseif extension == \"md\"\t\t\t\texecute \"! pandoc % -s -o /tmp/op.pdf\"\t\tendifendfunctionecho '.PSbox wid 3 \"My first ASCII box\"arrow down 1 from last box.sbox wid 3 \"My first ASCII box\".PE' | pic | groff -ms -Tasciiman ls | groff -mandoc "},{"name":"grpc.md","content":""},{"name":"hate-of.md","content":"liber.js- dependence on backend configure.- function dependencies looks like complexity, can't grasp.- functions migreate to grouping and module.- $ mark function.- not formatted.- don't exsist ui catalog.- don't removed unused functions.- endpoint compiled with php.- .vscode/node_modules- npm install get not function files.- can't recycle other project."},{"name":"hcl.md","content":""},{"name":"hrt.md","content":"- 同じチームであること（定義が難しいが）- 役職関係なくフラットな組織であること- 組織上、立場上守らなければならないことをメンバーが理解していること- 暴言を吐くメンバーがいないこと- 心理的安全性を提供する側が心理的安全性が確保されていること"},{"name":"htmlentries.md","content":"There's ▲: \u0026#9650; and ▼: \u0026#9660;[Complete list of HTML entities - FreeFormatter.com](https://www.freeformatter.com/html-entities.html)| Character | Entity Name | Entity Number | Description                  || --------- | ----------- | ------------- | ---------------------------- ||           |             | \u0026#32;         | Space                        || !         |             | \u0026#33;         | Exclamation mark             || \"         |             | \u0026#34;         | Quotation mark               || #         |             | \u0026#35;         | Number sign                  || $         |             | \u0026#36;         | Dollar sign                  || %         |             | \u0026#37;         | Percent sign                 || \u0026         | \u0026amp;       | \u0026#38;         | Ampersand                    || '         |             | \u0026#39;         | Apostrophe                   || (         |             | \u0026#40;         | Opening/Left Parenthesis     || )         |             | \u0026#41;         | Closing/Right Parenthesis    || \\*        |             | \\*            | Asterisk                     || +         |             | \u0026#43;         | Plus sign                    || ,         |             | \u0026#44;         | Comma                        || -         |             | \u0026#45;         | Hyphen                       || .         |             | \u0026#46;         | Period                       || /         |             | \u0026#47;         | Slash                        || 0         |             | \u0026#48;         | Digit 0                      || 1         |             | \u0026#49;         | Digit 1                      || 2         |             | \u0026#50;         | Digit 2                      || 3         |             | \u0026#51;         | Digit 3                      || 4         |             | \u0026#52;         | Digit 4                      || 5         |             | \u0026#53;         | Digit 5                      || 6         |             | \u0026#54;         | Digit 6                      || 7         |             | \u0026#55;         | Digit 7                      || 8         |             | \u0026#56;         | Digit 8                      || 9         |             | \u0026#57;         | Digit 9                      || :         |             | \u0026#58;         | Colon                        || ;         |             | \u0026#59;         | Semicolon                    || \u003c         | \u0026lt;        | \u0026#60;         | Less-than                    || =         |             | \u0026#61;         | Equals sign                  || \u003e         | \u0026gt;        | \u0026#62;         | Greater than                 || ?         |             | \u0026#63;         | Question mark                || @         |             | \u0026#64;         | At sign                      || A         |             | \u0026#65;         | Uppercase A                  || B         |             | \u0026#66;         | Uppercase B                  || C         |             | \u0026#67;         | Uppercase C                  || D         |             | \u0026#68;         | Uppercase D                  || E         |             | \u0026#69;         | Uppercase E                  || F         |             | \u0026#70;         | Uppercase F                  || G         |             | \u0026#71;         | Uppercase G                  || H         |             | \u0026#72;         | Uppercase H                  || I         |             | \u0026#73;         | Uppercase I                  || J         |             | \u0026#74;         | Uppercase J                  || K         |             | \u0026#75;         | Uppercase K                  || L         |             | \u0026#76;         | Uppercase L                  || M         |             | \u0026#77;         | Uppercase M                  || N         |             | \u0026#78;         | Uppercase N                  || O         |             | \u0026#79;         | Uppercase O                  || P         |             | \u0026#80;         | Uppercase P                  || Q         |             | \u0026#81;         | Uppercase Q                  || R         |             | \u0026#82;         | Uppercase R                  || S         |             | \u0026#83;         | Uppercase S                  || T         |             | \u0026#84;         | Uppercase T                  || U         |             | \u0026#85;         | Uppercase U                  || V         |             | \u0026#86;         | Uppercase V                  || W         |             | \u0026#87;         | Uppercase W                  || X         |             | \u0026#88;         | Uppercase X                  || Y         |             | \u0026#89;         | Uppercase Y                  || Z         |             | \u0026#90;         | Uppercase Z                  || [         |             | \u0026#91;         | Opening/Left square bracket  || \\         |             | \u0026#92;         | Backslash                    || ]         |             | \u0026#93;         | Closing/Right square bracket || ^         |             | \u0026#94;         | Caret                        || \\_        |             | \\_            | Underscore                   || \\`        |             | \u0026#96;         | Grave accent                 || a         |             | \u0026#97;         | Lowercase a                  || b         |             | \u0026#98;         | Lowercase b                  || c         |             | \u0026#99;         | Lowercase c                  || d         |             | \u0026#100;        | Lowercase d                  || e         |             | \u0026#101;        | Lowercase e                  || f         |             | \u0026#102;        | Lowercase f                  || g         |             | \u0026#103;        | Lowercase g                  || h         |             | \u0026#104;        | Lowercase h                  || i         |             | \u0026#105;        | Lowercase i                  || j         |             | \u0026#106;        | Lowercase j                  || k         |             | \u0026#107;        | Lowercase k                  || l         |             | \u0026#108;        | Lowercase l                  || m         |             | \u0026#109;        | Lowercase m                  || n         |             | \u0026#110;        | Lowercase n                  || o         |             | \u0026#111;        | Lowercase o                  || p         |             | \u0026#112;        | Lowercase p                  || q         |             | \u0026#113;        | Lowercase q                  || r         |             | \u0026#114;        | Lowercase r                  || s         |             | \u0026#115;        | Lowercase s                  || t         |             | \u0026#116;        | Lowercase t                  || u         |             | \u0026#117;        | Lowercase u                  || v         |             | \u0026#118;        | Lowercase v                  || w         |             | \u0026#119;        | Lowercase w                  || x         |             | \u0026#120;        | Lowercase x                  || y         |             | \u0026#121;        | Lowercase y                  || z         |             | \u0026#122;        | Lowercase z                  || {         |             | \u0026#123;        | Opening/Left curly brace     || \\|        |             | \u0026#124;        | Vertical bar                 || }         |             | \u0026#125;        | Closing/Right curly brace    || ~         |             | \u0026#126;        | Tilde                        || Character | Entity Name | Entity Number | Description                        || --------- | ----------- | ------------- | ---------------------------------- || À         | \u0026Agrave;    | \u0026#192;        | Capital a with grave accent        || Á         | \u0026Aacute;    | \u0026#193;        | Capital a with acute accent        || Â         | \u0026Acirc;     | \u0026#194;        | Capital a with circumflex accent   || Ã         | \u0026Atilde;    | \u0026#195;        | Capital a with tilde               || Ä         | \u0026Auml;      | \u0026#196;        | Capital a with umlaut              || Å         | \u0026Aring;     | \u0026#197;        | Capital a with ring                || Æ         | \u0026AElig;     | \u0026#198;        | Capital ae                         || Ç         | \u0026Ccedil;    | \u0026#199;        | Capital c with cedilla             || È         | \u0026Egrave;    | \u0026#200;        | Capital e with grave accent        || É         | \u0026Eacute;    | \u0026#201;        | Capital e with acute accent        || Ê         | \u0026Ecirc;     | \u0026#202;        | Capital e with circumflex accent   || Ë         | \u0026Euml;      | \u0026#203;        | Capital e with umlaut              || Ì         | \u0026Igrave;    | \u0026#204;        | Capital i with grave accent        || Í         | \u0026Iacute;    | \u0026#205;        | Capital i with accute accent       || Î         | \u0026Icirc;     | \u0026#206;        | Capital i with circumflex accent   || Ï         | \u0026Iuml;      | \u0026#207;        | Capital i with umlaut              || Ð         | \u0026ETH;       | \u0026#208;        | Capital eth (Icelandic)            || Ñ         | \u0026Ntilde;    | \u0026#209;        | Capital n with tilde               || Ò         | \u0026Ograve;    | \u0026#210;        | Capital o with grave accent        || Ó         | \u0026Oacute;    | \u0026#211;        | Capital o with accute accent       || Ô         | \u0026Ocirc;     | \u0026#212;        | Capital o with circumflex accent   || Õ         | \u0026Otilde;    | \u0026#213;        | Capital o with tilde               || Ö         | \u0026Ouml;      | \u0026#214;        | Capital o with umlaut              || Ø         | \u0026Oslash;    | \u0026#216;        | Capital o with slash               || Ù         | \u0026Ugrave;    | \u0026#217;        | Capital u with grave accent        || Ú         | \u0026Uacute;    | \u0026#218;        | Capital u with acute accent        || Û         | \u0026Ucirc;     | \u0026#219;        | Capital u with circumflex accent   || Ü         | \u0026Uuml;      | \u0026#220;        | Capital u with umlaut              || Ý         | \u0026Yacute;    | \u0026#221;        | Capital y with acute accent        || Þ         | \u0026THORN;     | \u0026#222;        | Capital thorn (Icelandic)          || ß         | \u0026szlig;     | \u0026#223;        | Lowercase sharp s (German)         || à         | \u0026agrave;    | \u0026#224;        | Lowercase a with grave accent      || á         | \u0026aacute;    | \u0026#225;        | Lowercase a with acute accent      || â         | \u0026acirc;     | \u0026#226;        | Lowercase a with circumflex accent || ã         | \u0026atilde;    | \u0026#227;        | Lowercase a with tilde             || ä         | \u0026auml;      | \u0026#228;        | Lowercase a with umlaut            || å         | \u0026aring;     | \u0026#229;        | Lowercase a with ring              || æ         | \u0026aelig;     | \u0026#230;        | Lowercase ae                       || ç         | \u0026ccedil;    | \u0026#231;        | Lowercase c with cedilla           || è         | \u0026egrave;    | \u0026#232;        | Lowercase e with grave accent      || é         | \u0026eacute;    | \u0026#233;        | Lowercase e with acute accent      || ê         | \u0026ecirc;     | \u0026#234;        | Lowercase e with circumflex accent || ë         | \u0026euml;      | \u0026#235;        | Lowercase e with umlaut            || ì         | \u0026igrave;    | \u0026#236;        | Lowercase i with grave accent      || í         | \u0026iacute;    | \u0026#237;        | Lowercase i with acute accent      || î         | \u0026icirc;     | \u0026#238;        | Lowercase i with circumflex accent || ï         | \u0026iuml;      | \u0026#239;        | Lowercase i with umlaut            || ð         | \u0026eth;       | \u0026#240;        | Lowercase eth (Icelandic)          || ñ         | \u0026ntilde;    | \u0026#241;        | Lowercase n with tilde             || ò         | \u0026ograve;    | \u0026#242;        | Lowercase o with grave accent      || ó         | \u0026oacute;    | \u0026#243;        | Lowercase o with acute accent      || ô         | \u0026ocirc;     | \u0026#244;        | Lowercase o with circumflex accent || õ         | \u0026otilde;    | \u0026#245;        | Lowercase o with tilde             || ö         | \u0026ouml;      | \u0026#246;        | Lowercase o with umlaut            || ø         | \u0026oslash;    | \u0026#248;        | Lowercase o with slash             || ù         | \u0026ugrave;    | \u0026#249;        | Lowercase u with grave accent      || ú         | \u0026uacute;    | \u0026#250;        | Lowercase u with acute accent      || û         | \u0026ucirc;     | \u0026#251;        | Lowercase u with circumflex accent || ü         | \u0026uuml;      | \u0026#252;        | Lowercase u with umlaut            || ý         | \u0026yacute;    | \u0026#253;        | Lowercase y with acute accent      || þ         | \u0026thorn;     | \u0026#254;        | Lowercase thorn (Icelandic)        || ÿ         | \u0026yuml;      | \u0026#255;        | Lowercase y with umlaut            || Symbol | Entity Name | Entity Number | Description                        || ------ | ----------- | ------------- | ---------------------------------- ||        | \u0026nbsp;      | \u0026#160;        | Non-breaking space                 || ¡      | \u0026iexcl;     | \u0026#161;        | Inverted exclamation mark          || ¢      | \u0026cent;      | \u0026#162;        | Cent                               || £      | \u0026pound;     | \u0026#163;        | Pound                              || ¤      | \u0026curren;    | \u0026#164;        | Currency                           || ¥      | \u0026yen;       | \u0026#165;        | Yen                                || ¦      | \u0026brvbar;    | \u0026#166;        | Broken vertical bar                || §      | \u0026sect;      | \u0026#167;        | Section                            || ¨      | \u0026uml;       | \u0026#168;        | Spacing diaeresis                  || ©      | \u0026copy;      | \u0026#169;        | Copyright                          || ª      | \u0026ordf;      | \u0026#170;        | Feminine ordinal indicator         || «      | \u0026laquo;     | \u0026#171;        | Opening/Left angle quotation mark  || ¬      | \u0026not;       | \u0026#172;        | Negation                           || ­      | \u0026shy;       | \u0026#173;        | Soft hyphen                        || ®      | \u0026reg;       | \u0026#174;        | Registered trademark               || ¯      | \u0026macr;      | \u0026#175;        | Spacing macron                     || °      | \u0026deg;       | \u0026#176;        | Degree                             || ±      | \u0026plusmn;    | \u0026#177;        | Plus or minus                      || ²      | \u0026sup2;      | \u0026#178;        | Superscript 2                      || ³      | \u0026sup3;      | \u0026#179;        | Superscript 3                      || ´      | \u0026acute;     | \u0026#180;        | Spacing acute                      || µ      | \u0026micro;     | \u0026#181;        | Micro                              || ¶      | \u0026para;      | \u0026#182;        | Paragraph                          || ¸      | \u0026cedil;     | \u0026#184;        | Spacing cedilla                    || ¹      | \u0026sup1;      | \u0026#185;        | Superscript 1                      || º      | \u0026ordm;      | \u0026#186;        | Masculine ordinal indicator        || »      | \u0026raquo;     | \u0026#187;        | Closing/Right angle quotation mark || ¼      | \u0026frac14;    | \u0026#188;        | Fraction 1/4                       || ½      | \u0026frac12;    | \u0026#189;        | Fraction 1/2                       || ¾      | \u0026frac34;    | \u0026#190;        | Fraction 3/4                       || ¿      | \u0026iquest;    | \u0026#191;        | Inverted question mark             || ×      | \u0026times;     | \u0026#215;        | Multiplication                     || ÷      | \u0026divide;    | \u0026#247;        | Divide                             || Symbol | Entity Name | Entity Number | Description       || ------ | ----------- | ------------- | ----------------- || ∀      | \u0026forall;    | \u0026#8704;       | For all           || ∂      | \u0026part;      | \u0026#8706;       | Part              || ∃      | \u0026exist;     | \u0026#8707;       | Exist             || ∅      | \u0026empty;     | \u0026#8709;       | Empty             || ∇      | \u0026nabla;     | \u0026#8711;       | Nabla             || ∈      | \u0026isin;      | \u0026#8712;       | Is in             || ∉      | \u0026notin;     | \u0026#8713;       | Not in            || ∋      | \u0026ni;        | \u0026#8715;       | Ni                || ∏      | \u0026prod;      | \u0026#8719;       | Product           || ∑      | \u0026sum;       | \u0026#8721;       | Sum               || −      | \u0026minus;     | \u0026#8722;       | Minus             || ∗      | \u0026lowast;    | \u0026#8727;       | Asterisk (Lowast) || √      | \u0026radic;     | \u0026#8730;       | Square root       || ∝      | \u0026prop;      | \u0026#8733;       | Proportional to   || ∞      | \u0026infin;     | \u0026#8734;       | Infinity          || ∠      | \u0026ang;       | \u0026#8736;       | Angle             || ∧      | \u0026and;       | \u0026#8743;       | And               || ∨      | \u0026or;        | \u0026#8744;       | Or                || ∩      | \u0026cap;       | \u0026#8745;       | Cap               || ∪      | \u0026cup;       | \u0026#8746;       | Cup               || ∫      | \u0026int;       | \u0026#8747;       | Integral          || ∴      | \u0026there4;    | \u0026#8756;       | Therefore         || ∼      | \u0026sim;       | \u0026#8764;       | Similar to        || ≅      | \u0026cong;      | \u0026#8773;       | Congurent to      || ≈      | \u0026asymp;     | \u0026#8776;       | Almost equal      || ≠      | \u0026ne;        | \u0026#8800;       | Not equal         || ≡      | \u0026equiv;     | \u0026#8801;       | Equivalent        || ≤      | \u0026le;        | \u0026#8804;       | Less or equal     || ≥      | \u0026ge;        | \u0026#8805;       | Greater or equal  || ⊂      | \u0026sub;       | \u0026#8834;       | Subset of         || ⊃      | \u0026sup;       | \u0026#8835;       | Superset of       || ⊄      | \u0026nsub;      | \u0026#8836;       | Not subset of     || ⊆      | \u0026sube;      | \u0026#8838;       | Subset or equal   || ⊇      | \u0026supe;      | \u0026#8839;       | Superset or equal || ⊕      | \u0026oplus;     | \u0026#8853;       | Circled plus      || ⊗      | \u0026otimes;    | \u0026#8855;       | Circled times     || ⊥      | \u0026perp;      | \u0026#8869;       | Perpendicular     || ⋅      | \u0026sdot;      | \u0026#8901;       | Dot operator      || Letter | Entity Name | Entity Number | Description    || ------ | ----------- | ------------- | -------------- || Α      | \u0026Alpha;     | \u0026#913;        | Alpha          || Β      | \u0026Beta;      | \u0026#914;        | Beta           || Γ      | \u0026Gamma;     | \u0026#915;        | Gamma          || Δ      | \u0026Delta;     | \u0026#916;        | Delta          || Ε      | \u0026Epsilon;   | \u0026#917;        | Epsilon        || Ζ      | \u0026Zeta;      | \u0026#918;        | Zeta           || Η      | \u0026Eta;       | \u0026#919;        | Eta            || Θ      | \u0026Theta;     | \u0026#920;        | Theta          || Ι      | \u0026Iota;      | \u0026#921;        | Iota           || Κ      | \u0026Kappa;     | \u0026#922;        | Kappa          || Λ      | \u0026Lambda;    | \u0026#923;        | Lambda         || Μ      | \u0026Mu;        | \u0026#924;        | Mu             || Ν      | \u0026Nu;        | \u0026#925;        | Nu             || Ξ      | \u0026Xi;        | \u0026#926;        | Xi             || Ο      | \u0026Omicron;   | \u0026#927;        | Omicron        || Π      | \u0026Pi;        | \u0026#928;        | Pi             || Ρ      | \u0026Rho;       | \u0026#929;        | Rho            || Σ      | \u0026Sigma;     | \u0026#931;        | Sigma          || Τ      | \u0026Tau;       | \u0026#932;        | Tau            || Υ      | \u0026Upsilon;   | \u0026#933;        | Upsilon        || Φ      | \u0026Phi;       | \u0026#934;        | Phi            || Χ      | \u0026Chi;       | \u0026#935;        | Chi            || Ψ      | \u0026Psi;       | \u0026#936;        | Psi            || Ω      | \u0026Omega;     | \u0026#937;        | Omega          || α      | \u0026alpha;     | \u0026#945;        | alpha          || β      | \u0026beta;      | \u0026#946;        | beta           || γ      | \u0026gamma;     | \u0026#947;        | gamma          || δ      | \u0026delta;     | \u0026#948;        | delta          || ε      | \u0026epsilon;   | \u0026#949;        | epsilon        || ζ      | \u0026zeta;      | \u0026#950;        | zeta           || η      | \u0026eta;       | \u0026#951;        | eta            || θ      | \u0026theta;     | \u0026#952;        | theta          || ι      | \u0026iota;      | \u0026#953;        | iota           || κ      | \u0026kappa;     | \u0026#954;        | kappa          || λ      | \u0026lambda;    | \u0026#955;        | lambda         || μ      | \u0026mu;        | \u0026#956;        | mu             || ν      | \u0026nu;        | \u0026#957;        | nu             || ξ      | \u0026xi;        | \u0026#958;        | xi             || ο      | \u0026omicron;   | \u0026#959;        | omicron        || π      | \u0026pi;        | \u0026#960;        | pi             || ρ      | \u0026rho;       | \u0026#961;        | rho            || ς      | \u0026sigmaf;    | \u0026#962;        | sigmaf         || σ      | \u0026sigma;     | \u0026#963;        | sigma          || τ      | \u0026tau;       | \u0026#964;        | tau            || υ      | \u0026upsilon;   | \u0026#965;        | upsilon        || φ      | \u0026phi;       | \u0026#966;        | phi            || χ      | \u0026chi;       | \u0026#967;        | chi            || ψ      | \u0026psi;       | \u0026#968;        | psi            || ω      | \u0026omega;     | \u0026#969;        | omega          || ϑ      | \u0026thetasym;  | \u0026#977;        | Theta symbol   || ϒ      | \u0026upsih;     | \u0026#978;        | Upsilon symbol || ϖ      | \u0026piv;       | \u0026#982;        | Pi symbol      || Symbol | Entity Name | Entity Number | Description                  || ------ | ----------- | ------------- | ---------------------------- || Œ      | \u0026OElig;     | \u0026#338;        | Uppercase ligature OE        || œ      | \u0026oelig;     | \u0026#339;        | Lowercase ligature OE        || Š      | \u0026Scaron;    | \u0026#352;        | Uppercase S with caron       || š      | \u0026scaron;    | \u0026#353;        | Lowercase S with caron       || Ÿ      | \u0026Yuml;      | \u0026#376;        | Capital Y with diaeres       || ƒ      | \u0026fnof;      | \u0026#402;        | Lowercase with hook          || ˆ      | \u0026circ;      | \u0026#710;        | Circumflex accent            || ˜      | \u0026tilde;     | \u0026#732;        | Tilde                        || –      | \u0026ndash;     | \u0026#8211;       | En dash                      || —      | \u0026mdash;     | \u0026#8212;       | Em dash                      || ‘      | \u0026lsquo;     | \u0026#8216;       | Left single quotation mark   || ’      | \u0026rsquo;     | \u0026#8217;       | Right single quotation mark  || ‚      | \u0026sbquo;     | \u0026#8218;       | Single low-9 quotation mark  || “      | \u0026ldquo;     | \u0026#8220;       | Left double quotation mark   || ”      | \u0026rdquo;     | \u0026#8221;       | Right double quotation mark  || „      | \u0026bdquo;     | \u0026#8222;       | Double low-9 quotation mark  || †      | \u0026dagger;    | \u0026#8224;       | Dagger                       || ‡      | \u0026Dagger;    | \u0026#8225;       | Double dagger                || •      | \u0026bull;      | \u0026#8226;       | Bullet                       || …      | \u0026hellip;    | \u0026#8230;       | Horizontal ellipsis          || ‰      | \u0026permil;    | \u0026#8240;       | Per mille                    || ′      | \u0026prime;     | \u0026#8242;       | Minutes (Degrees)            || ″      | \u0026Prime;     | \u0026#8243;       | Seconds (Degrees)            || ‹      | \u0026lsaquo;    | \u0026#8249;       | Single left angle quotation  || ›      | \u0026rsaquo;    | \u0026#8250;       | Single right angle quotation || ‾      | \u0026oline;     | \u0026#8254;       | Overline                     || €      | \u0026euro;      | \u0026#8364;       | Euro                         || ™      | \u0026trade;     | \u0026#8482;       | Trademark                    || ←      | \u0026larr;      | \u0026#8592;       | Left arrow                   || ↑      | \u0026uarr;      | \u0026#8593;       | Up arrow                     || →      | \u0026rarr;      | \u0026#8594;       | Right arrow                  || ↓      | \u0026darr;      | \u0026#8595;       | Down arrow                   || ↔      | \u0026harr;      | \u0026#8596;       | Left right arrow             || ↵      | \u0026crarr;     | \u0026#8629;       | Carriage return arrow        || ⌈      | \u0026lceil;     | \u0026#8968;       | Left ceiling                 || ⌉      | \u0026rceil;     | \u0026#8969;       | Right ceiling                || ⌊      | \u0026lfloor;    | \u0026#8970;       | Left floor                   || ⌋      | \u0026rfloor;    | \u0026#8971;       | Right floor                  || ◊      | \u0026loz;       | \u0026#9674;       | Lozenge                      || ♠      | \u0026spades;    | \u0026#9824;       | Spade                        || ♣      | \u0026clubs;     | \u0026#9827;       | Club                         || ♥      | \u0026hearts;    | \u0026#9829;       | Heart                        || ♦      | \u0026diams;     | \u0026#9830;       | Diamond                      |"},{"name":"http-response.md","content":"400 (Bad Request)405 (Not Allowed)408 (Request Timeout)413 (Request Entity Too Large)414 (Request URI Too Large)494 (Request Headers Too Large)499 (Client Closed Request)500 (Internal Server Error)501 (Not Implemented)| 1×× | Informational || 100 | Continue || 101 | Switching Protocols || 102 | Processing || 2×× | Success || 200 | OK || 201 | Created || 202 | Accepted || 203 | Non-authoritative Information || 204 | No Content || 205 | Reset Content || 206 | Partial Content || 207 | Multi-Status || 208 | Already Reported || 226 | IM Used || 3×× | Redirection || 300 | Multiple Choices || 301 | Moved Permanently || 302 | Found || 303 | See Other || 304 | Not Modified || 305 | Use Proxy || 307 | Temporary Redirect || 308 | Permanent Redirect || 4×× | Client Error || 400 | Bad Request || 401 | Unauthorized || 402 | Payment Required || 403 | Forbidden || 404 | Not Found || 405 | Method Not Allowed || 406 | Not Acceptable || 407 | Proxy Authentication Required || 408 | Request Timeout || 409 | Conflict || 410 | Gone || 411 | Length Required || 412 | Precondition Failed || 413 | Payload Too Large || 414 | Request-URI Too Long || 415 | Unsupported Media Type || 416 | Requested Range Not Satisfiable || 417 | Expectation Failed || 418 | I'm a teapot || 421 | Misdirected Request || 422 | Unprocessable Entity || 423 | Locked || 424 | Failed Dependency || 426 | Upgrade Required || 428 | Precondition Required || 429 | Too Many Requests || 431 | Request Header Fields Too Large || 444 | Connection Closed Without Response || 451 | Unavailable For Legal Reasons || 499 | Client Closed Request || 5×× | Server Error || 500 | Internal Server Error || 501 | Not Implemented || 502 | Bad Gateway || 503 | Service Unavailable || 504 | Gateway Timeout || 505 | HTTP Version Not Supported || 506 | Variant Also Negotiates || 507 | Insufficient Storage || 508 | Loop Detected || 510 | Not Extended || 511 | Network Authentication Required || 599 | Network Connect Timeout Error || |"},{"name":"hyperapp.md","content":"https://github.com/diontools/typerapp```export type Effect\u003cS, P = Empty\u003e = [(props: P, dispatch: Dispatch\u003cS\u003e) =\u003e void, P]export type Subscription\u003cS, P = Empty\u003e = [(props: P, dispatch: Dispatch\u003cS\u003e) =\u003e () =\u003e void, P]export type Dispatch\u003cS\u003e = {    (action: Action\u003cS, Empty\u003e): void    \u003cP\u003e(action: Action\u003cS, P\u003e, params: P): void    \u003cP\u003e(actionWithParams: [Action\u003cS, P\u003e, P]): void    (result: ActionResult\u003cS\u003e): void    \u003cP\u003e(all: Action\u003cS, Empty\u003e | [Action\u003cS, P\u003e, P] | ActionResult\u003cS\u003e): void}```Subscription : [SubscriberFn, Payload?]SubscriberFn : (DispatchFn, Payload?) -\u003e CleanupFnsubscriptions プロパティsubscriptions プロパティには、Subscription オブジェクトの配列を返す関数を指定します。第一引数に State が渡されます。省略可能。この関数は State が変更されるたびに呼び出され、Effect に似た Subscription オブジェクトを返します。Effect との唯一の違いは、Effect Runner で「購読を解除する関数」を返すところです。```// 指定した時間間隔で指定したActionを定期的に呼び出すEffect Runnerconst tickRunner = (dispatch, { action, interval }) =\u003e {  const id = setInterval(() =\u003e dispatch(action), interval);  return () =\u003e clearInterval(id); // 購読解除用関数};// tickRunnerを実行するSubscriptionを作成するSubscription Constructorconst tick = (action, { interval }) =\u003e [  tickRunner,  { action, interval }];// tickで呼び出されるActionconst action = state =\u003e ({ ...state, value: state.value + 1 });app({  // valueが1のときにtickを購読  subscriptions: state =\u003e [      state.enabled \u0026\u0026 tick(action, { interval: 1000 })  ],});// State の enabled が true のとき tick を購読します。enabled が false になると tick が購読解除されます。```- Subscription を定義する場合、effect プロパティに指定する Effect Runner は別変数に格納しておきましょう。匿名関数を使用すると正しく購読が継続されません。effect の値が別オブジェクトと認識され、State が変化するたびに再講読されてしまいます。- Subscriptions は複数の Subscription オブジェクトを返せます。```app({  subscriptions: state =\u003e [    tick(...),    foo(...),  ],});```app()の subscriptions に指定する関数は、subscriptions の配列を返す必要がある。subsciptions 自体は[sub, props]という配列であるため、二重配列ということになる。ノードの on イベントに渡すのは[action, props]または(node, evente) =\u003e [action, props]になったっぽい。イベントオブジェクトをアクションに渡したいときは(\\_, e) =\u003e [Action, {value: e.target.value)]みたいな書き方が必要。- [feature: support string type styles (#617) by huozhi · Pull Request #618 · jorgebucaran/hyperapp · GitHub](https://github.com/jorgebucaran/hyperapp/pull/618)### conceptMinimal（最小限）Pragmatic（実践的）Standalone（独立）Hyperapp の関数### h 関数,### app 関数h 関数:仮想 DOM を生成する関数app 関数: Hyperapp を利用した Application を実行する関数h(name, props, children) - name {String}…「div」など、HTML 上でのタグ名 - props {Object} … Element に挿入される attributes - children {String | Array} … 子要素h(\"a\", { href: \"#\" }, \"next page\")// return object// {// name: 'a',// props: {// href: '#'// },// children: 'next page'// }appHyperapp による Web アプリケーションを起動するapp(state, actions, view, container)```jsh(\"div\", { id: \"app\" }, [  h(\"h1\", { class: \"title\" }, \"Title\"),  h(    \"button\",    {      onclick: () =\u003e {        hoge: \"hoge\";      },    },    \"–\"  ),  h(    \"button\",    {      onclick: () =\u003e {        hoge: \"fuga\";      },    },    \"+\"  ),  \"some text\",]);``````json{  \"name\": \"div\",  \"props\": {    \"id\": \"app\"  },  \"children\": [    {      \"name\": \"h1\",      \"props\": { \"class\": \"title\" },      \"children\": [\"Title\"]    },    {      \"name\": \"button\",      \"props\": {        \"onclick\": () =\u003e {          hoge: \"hoge\";        }      },      \"children\": [\"-\"]    },    {      \"name\": \"button\",      \"props\": {        \"onclick\": () =\u003e {          hoge: \"fuga\";        }      },      \"children\": [\"+\"]    },    \"some text\"  ]}```上記のメイン関数から呼ばれる補助的な関数。copy()set()get()getKey()setElementProp()createElement()updateElement()removeChildren()removeElement()https://github.com/jorgebucaran/hyperapp/issues/682V2 の README https://github.com/jorgebucaran/hyperapp/blob/master/README.mdV2 マイルストーン https://github.com/jorgebucaran/hyperapp/milestone/7V2 のプルリク https://github.com/jorgebucaran/hyperapp/pull/726Action API https://github.com/jorgebucaran/hyperapp/issues/749Effects API https://github.com/jorgebucaran/hyperapp/issues/750Subscriptions API https://github.com/jorgebucaran/hyperapp/issues/752class/className attribute API https://github.com/jorgebucaran/hyperapp/issues/754Lazy Views https://github.com/jorgebucaran/hyperapp/pull/777Middleware API https://github.com/jorgebucaran/hyperapp/issues/753ハイパーアプリビューは、入力としていくつかの状態を受け取り、出力として仮想 DOM 表現を生成する純粋関数です。スコープ、バインディング、this、async / await、promise、callback、observable、reactive 式、reactive 割り当て、reactive 宣言、サブクラス化、フック、ミューテーション、グローバル状態、または副作用はありません。- [V2 Effects · Issue #750 · jorgebucaran/hyperapp · GitHub](https://github.com/jorgebucaran/hyperapp/issues/750)- [](https://github.com/okwolf/hyperapp-fx/blob/master/api.md)- [] https://github.com/jorgebucaran/hyperapp-router  @hyperapp/render- [GitHub - kwasniew/hyperapp2-real-world-example: https://hyperapp2.netlify.com/](https://github.com/kwasniew/hyperapp2-real-world-example)oncreate … Element が DOM として構築されたときonupdate … Element の要素が更新されたときonremove … Element が DOM から消える直前ondestroy … Element が DOM から消える直後```const SuccessResponse = (state, response) =\u003e ({  ...state,  response,  error: null,  fetching: false});const ErrorResponse = (state, error) =\u003e ({  ...state,  response: null,  error,  fetching: false});const SendHttp = state =\u003e [  { ...state, response: \"...\", error: null, fetching: true },  Http({    url: state.url,    response: \"text\",    action: SuccessResponse,    error: ErrorResponse  })];// ---/* eslint-disable */const fx = (argsToProps, fx) =\u003e (...args) =\u003e [fx, argsToProps(args)];export const pushUrl = fx(  ([url]) =\u003e ({ url }),  (_, { url }) =\u003e {    history.pushState({}, \"\", url);    dispatchEvent(new CustomEvent(\"hyperapp-pushstate\"));  });export const onUrlChange = fx(  ([action]) =\u003e ({ action }),  (dispatch, { action }) =\u003e {    const popstate = (_) =\u003e dispatch(action, location);    addEventListener(\"popstate\", popstate);    addEventListener(\"hyperapp-pushstate\", popstate);    return () =\u003e      [\"popstate\", \"hyperapp-pushstate\"].map((e) =\u003e        removeEventListener(e, popstate)      );  });export const onUrlRequest = fx(  ([action]) =\u003e ({ action }),  (dispatch, { action }) =\u003e {    const clicks = (event) =\u003e {      if (        !event.ctrlKey \u0026\u0026        !event.metaKey \u0026\u0026        !event.shiftKey \u0026\u0026        event.target.matches(\"a\")      ) {        event.preventDefault();        const href = event.target.getAttribute(\"href\");        dispatch(action, { pathname: href });      }    };    addEventListener(\"click\", clicks);    return () =\u003e addEventListener(\"click\", clicks);  });``````  subscriptions: state =\u003e [    tick(...),    foo(...),  ],// 指定した時間後に指定したActionを呼び出すEffect Runnerconst delayRunner = (dispatch, { action, interval }) =\u003e {  setTimeout(() =\u003e dispatch(action, \"delay!\"), interval);};// delayRunnerを実行するEffectを作成するEffect Constructorconst delay = (action, { interval }) =\u003e [delayRunner, { action, interval }];// delayから呼び出されるAction （最終的にtextへ'delay!'が設定される）const Delayed = (state, payload) =\u003e ({ ...state, text: payload });// Effectのdelayを呼び出すAction （1000ms後にDelaydを呼び出す）const DelayWithAction = (state) =\u003e [state, delay(Delayed, { interval: 1000 })];```"},{"name":"iac.md","content":"◆ 主なサードパーティのクラウド管理ソリューション＜基本的な管理＞● ガバナンスとポリシー管理・DivvyCloud・CloudHealth Technologies（VMware）・CSC・Scalr● サービスリクエスト管理・RightScale・ServiceNow・IBM・Saclr・Embotics・CloudBolt・CSC● プロビジョニング、自動化、オーケストレーション・CliQr（Cisco CloudCenter）・HashiCorp・VMware・CloudBolt・Embotics・Red Hat CloudForms● モニタリング、メータリング・Datadog・VMware・IBM・Embotics・Red Hat Cloudforms● マルチクラウド・ブローカー・IBM・Embotics・CloudBolt・RightScale・ServiceNow・IBM・Saclr・Embotics・CloudBolt"},{"name":"iamcoo-markdown-preview-test.md","content":"# markdown-preview.vim![image](https://user-images.githubusercontent.com/5492542/47603494-28e90000-da1f-11e8-9079-30646e551e7a.gif =400x200)## todo- [x] markdown render: markdown-it- [x] markdown highlight- [x] markdown css- [x] math katex- [x] plantuml- [x] markdown-it option- [x] katex option- [x] plantuml option- [x] markdown style option- [x] highlight style option- [x] sync scroll- preview page title use the document's name- favicon.ico- vim support- binary support- task list- meoji- cross platform test (mac/linux/windows)- ...# UML example:@startumlBob -\u003e Alice : hello@enduml``` mermaidclassDiagramA--\u003eB`````` mermaidclassDiagramA--\u003eB```### flowchart``` flowchartst=\u003estart: Start|past:\u003ehttp://www.google.com[blank]e=\u003eend: End|future:\u003ehttp://www.google.comop1=\u003eoperation: My Operation|pastop2=\u003eoperation: Stuff|currentsub1=\u003esubroutine: My Subroutine|invalidcond=\u003econdition: Yesor No?|approved:\u003ehttp://www.google.comc2=\u003econdition: Good idea|rejectedio=\u003einputoutput: catch something...|futurest-\u003eop1(right)-\u003econdcond(yes, right)-\u003ec2cond(no)-\u003esub1(left)-\u003eop1c2(yes)-\u003eio-\u003eec2(no)-\u003eop2-\u003ee```javascript```javascriptfunction test() {    return 0}console.log('hello world')test()```bash```bash# commentexport path=$PATH;/bin```# Maxwell's Equationsequation | description----------|------------$\\nabla \\cdot \\vec{\\mathbf{B}}  = 0$ | divergence of $\\vec{\\mathbf{B}}$ is zero$\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t}  = \\vec{\\mathbf{0}}$ |  curl of $\\vec{\\mathbf{E}}$ is proportional to the rate of change of $\\vec{\\mathbf{B}}$$\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} = \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} = 4 \\pi \\rho$ | _wha?_$\\sqrt{3x-1}+(1+x)^2$$$\\begin{array}{c}\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} \u0026= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} \u0026 = 4 \\pi \\rho \\\\\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} \u0026 = \\vec{\\mathbf{0}} \\\\\\nabla \\cdot \\vec{\\mathbf{B}} \u0026 = 0\\end{array}$$Anything between two $ characters will be treated as TeX math. The opening $ musthave a non-space character immediately to its right, while the closing $ musthave a non-space character immediately to its left, and must not be followedimmediately by a digit. Thus, $20,000 and $30,000 won’t parse as math. If for somereason you need to enclose text in literal $ characters, backslash-escape them andthey won’t be treated as math delimiters.### chart and mermaid```chart{  \"type\": \"pie\",  \"data\": {    \"labels\": [      \"Red\",      \"Blue\",      \"Yellow\"    ],    \"datasets\": [      {        \"data\": [          300,          50,          100        ],        \"backgroundColor\": [          \"#FF6384\",          \"#36A2EB\",          \"#FFCE56\"        ],        \"hoverBackgroundColor\": [          \"#FF6384\",          \"#36A2EB\",          \"#FFCE56\"        ]      }    ]  },  \"options\": {}}```### Mermaid example```mermaidgantt    dateFormat DD-MM-YYY    axisFormat %m/%y    title Example    section example section    activity :active, 01-02-2019, 03-08-2019``````mermaidgraph LRA[Christmas] --\u003e|Get money| B(Go shopping)``````mermaidgraph TDA[Christmas] --\u003e|Get money| B(Go shopping)B --\u003e C{Let me think}C --\u003e|One| D[Laptop]C --\u003e|Two| E[iPhone]C --\u003e|Three| F[Car]``````mermaidclassDiagramClass01 \u003c|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --\u003e C2 : Where am i?Class09 --* C3Class09 --|\u003e Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 \u003c--\u003e C2: Cool label``````mermaidsequenceDiagramloop every day    Alice-\u003e\u003eJohn: Hello John, how are you?    John--\u003e\u003eAlice: Great!end`````` mermaidstateDiagram[*] --\u003e StillStill --\u003e [*]Still --\u003e MovingMoving --\u003e StillMoving --\u003e CrashCrash --\u003e [*]`````` mermaiderDiagram    CUSTOMER ||--o{ ORDER : places    ORDER ||--|{ LINE-ITEM : contains    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses```"},{"name":"infra.md","content":"| OS 名   | 概要                                                             | 参考リンク                                      || ------- | ---------------------------------------------------------------- | ----------------------------------------------- || Windows | 一般的なコンピュータにインストールされている OS といえば Windows | [公式](https://www.microsoft.com/ja-jp/windows) || macOS   | Apple のコンピューターにインストールされている OS                | [公式](https://www.apple.com/jp/mac/)           || Unix    | MacOS など様々な OS の原型となった OS                            | [Wiki](https://ja.wikipedia.org/wiki/UNIX)      || Linux   | オープンソースの OS                                              | [公式](https://www.linuxfoundation.jp/)         || BSD 系  | Unix が元となったオープンソースの OS                             | [公式](https://www.freebsd.org/ja/)             || iOS     | Apple 社が開発した iPhone や iPad に利用される OS                | [公式](https://www.apple.com/jp/ios/ios-11/)    || Android | Google 社が開発した主にスマートフォンに利用される OS             | [公式](https://www.android.com/intl/ja_jp/)     || OS 名  | 概要                                         | 参考リンク                                                                      || ------ | -------------------------------------------- | ------------------------------------------------------------------------------- || RHEL   | クライアントやサーバー向けの OS              | [公式](https://www.redhat.com/ja/technologies/linux-platforms/enterprise-linux) || CentOS | RHEL をクローンした OS                       | [公式](https://www.centos.org/)                                                 || fedora | 実験的な要素の強い OS                        | [公式](https://getfedora.org/ja/)                                               || Korora | fedora をより使いやすくすることを重視した OS | [公式](https://kororaproject.org/)                                              || OS 名         | 概要                                                                 | 参考リンク                          || ------------- | -------------------------------------------------------------------- | ----------------------------------- || Debian        | Debian プロジェクトによって開発が進められている安定性に定評がある OS | [公式](https://www.debian.or.jp/)   || Ubuntu        | Debian をベースとした使いやすさに特化した OS                         | [公式](https://www.ubuntulinux.jp/) || ZorinOS       | Ubuntu をベースとしたビジュアルにこだわった OS                       | [公式](https://zorinos.com/)        || Linux Mint    | Linux Mint は使い勝手が良くモダンでエレガントな環境と提供する OS     | [公式](http://linuxmint-jp.net/)    || Pinguy OS     | Windows や Mac ユーザーも違和感なく使えることを重視した OS           | [公式](https://pinguyos.com/)       || MX Linux      | エレガントなデスクトップで Debian ベースの OS                        | [公式](https://mxlinux.org/)        || elementary OS | Mac を彷彿させる OS                                                  | [公式](https://elementary.io/ja/)   || OS 名     | 概要                                                | 参考リンク                        || --------- | --------------------------------------------------- | --------------------------------- || Slackware | 最も古い Linux 系 OS                                | [公式](http://www.slackware.com/) || openSUSE  | 初心者から開発者までユーザーを問わず誰でも使える OS | [公式](https://www.opensuse.org/) || 名前   | 概要                                            | 参考リンク                        || ------ | ----------------------------------------------- | --------------------------------- || Apache | 世界中で使用されている Web サーバーソフトウェア | [公式](https://httpd.apache.org/) |[Apache とは？Web サーバーの仕組みと人気サーバーソフトを徹底解説](https://www.kagoya.jp/howto/rentalserver/apache/) || Nginx | イベント駆動モデルで大量アクセスに強く、静的コンテンツを高速で配信できる Web サーバーソフトウェア | [公式](https://www.nginx.com/)[nginx で Web サーバを構築してみよう](https://www.yaz.co.jp/tec-blog/web%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9/263) || IIS | Microsoft 製の Windows 向けの Web サーバーソフトウェア | [公式：Web サーバー (IIS) の概要](\u003chttps://msdn.microsoft.com/ja-jp/library/hh831725(v=ws.11).aspx\u003e)[IIS とは](http://wa3.i-3-i.info/word12466.html) || 名前                         | 対応言語 | 概要                                                                                                 | 参考リンク                                                                                                                             || ---------------------------- | -------- | ---------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- || Tomcat                       | Java     | Java Servlet や JavaServer Pages (JSP) を実行するための Web コンテナ                                 | [Tomcat って何ですか？](https://thinkit.co.jp/free/article/0708/2/1)                                                                   || JBoss                        | Java     | Java によるオープンソースソフトウェアの総称で Java EE 標準準拠の AP サーバとして認識されることが多い | [企業向けアプリの常識を学び、JBoss の環境構築 (1/2)](http://www.atmarkit.co.jp/ait/articles/0909/10/news124.html)                      || GlassFish                    | Java     | Java EE 準拠のアプリケーションサーバ                                                                 | [GlassFish からアプローチする Java ～入門編～第 1 回「GlassFish と NetBeans のインストール」](https://codezine.jp/article/detail/4743) || WebSphere Application Server | Java     | IBM 製の Java EE 準拠のアプリケーションサーバ                                                        | [公式](https://www-01.ibm.com/software/jp/websphere/)                                                                                  || unicorn                      | Ruby     | Rails などでつくられたアプリケーションを動かすアプリケーションサーバ                                 | [Rails を動作させるアプリケーションサーバ unicorn とは？概要や nginx との違いなど](http://post.simplie.jp/posts/82)                    || puma                         | Ruby     | Rails などでつくられたアプリケーションを動かすアプリケーションサーバ                                 | [Rails 開発における web サーバーとアプリケーションサーバーの違い（翻訳）](https://qiita.com/jnchito/items/3884f9a2ccc057f8f3a3)        || 名前        | 概要                                                                                                       | 参考リンク                                                                  || ----------- | ---------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- || MySQL       | 現在、世界中で最もよく利用されているオープンソースのデータベースのひとつで高速で使いやすいことが特徴       | [公式](https://www.mysql.com/jp/)                                           || PostgreSQL  | MySQL と双璧をなすオープンソースのデータベースで機能が豊富かつ標準 SQL への準拠度が比較的高い              | [公式](https://www.postgresql.org/)                                         || SQLite      | アプリケーションの一部に組み込まれて動作するタイプのデータベースで手軽さと高速な動作から中小規模の開発向け | [公式](https://www.sqlite.org/index.html)                                   || Oracle DB   | 非常に高機能なデータベース                                                                                 | [公式](https://www.oracle.com/jp/database/index.html)                       || SQL Server  | マイクロソフト系システム開発で幅広く利用されているデータベース                                             | [公式](https://www.microsoft.com/ja-jp/sql-server/sql-server-2017-editions) || DB2         | 大規模システム構築などで世界的に使われているデータベース                                                   | [公式](https://www-01.ibm.com/software/jp/cmp/db2/index.html)               || H2 Database | Java で実装されたオープンソースのデータベース                                                              | [公式](https://www-01.ibm.com/software/jp/cmp/db2/index.html)               || 名前       | 概要                                                                                 | 参考リンク                                                                                       || ---------- | ------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------ || Vagrant    | 開発環境の構築と共有を簡単に行うためのツール                                         | [開発環境の構築・共有を簡単にする Vagrant 入門](https://thinkit.co.jp/story/2015/03/19/5740)     || Amazon EC2 | セキュアでサイズ変更可能なコンピューティング性能をクラウド上で提供するウェブサービス | [公式](https://aws.amazon.com/jp/ec2/)                                                           || Docker     | コンテナ型の仮想環境を作成、配布、実行するためのプラットフォーム                     | [Docker 入門（第一回）～ Docker とは何か、何が良いのか～](https://knowledge.sakura.ad.jp/13265/) || 名前    | 概要                                                                                                                                                 | 参考リンク                                                                              || ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------- || Chef    | ファイルに記述した設定内容に応じて自動的にユーザーの作成やパッケージのインストール、設定ファイルの編集などを行うツール                               | [サーバー設定ツール「Chef」の概要と基礎的な使い方](https://knowledge.sakura.ad.jp/867/) || Ansible | 設定ファイルがシンプルで、管理対象サーバーに特別なソフトウェアをインストールすることなく利用できるなど、最小限の手間で各種設定を自動化できるのが特徴 | [Ansible をはじめる人に。](https://qiita.com/t_nakayama0714/items/fe55ee56d6446f67113c) || Puppet  | スタンドアロンおよびクライアント/サーバー構成でサーバー設定を集中管理できる設定管理ツール                                                            | [公式](https://puppet.com/ja%10)                                                        || 名前                             | 概要                                                                                                                                                                                                              | 参考リンク                                          || -------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------- || Capistrano                       | Ruby 製の自動デプロイ (\u0026 サーバー操作) ツールで複雑な Rails 製アプリケーションのデプロイ作業をコマンド数行でさくっと片付けられるようになる                                                                        | [公式](https://capistranorb.com/)                   || AWS Elastic Beanstalk            | Java、.NET、PHP、Node.js、Python、Ruby、Go および Docker を使用して開発されたウェブアプリケーションやサービスを、Apache、Nginx などの使い慣れたサーバーでデプロイおよびスケーリングするための、使いやすいサービス | [公式](https://aws.amazon.com/jp/elasticbeanstalk/) || Amazon Elastic Container Service | Docker コンテナアプリケーションを AWS で簡単に実行、スケール、保護し、コンテナとしてローカルでパッケージングされたアプリケーションは、Amazon ECS によって管理されるコンテナと同様にデプロイすることが可能         | [公式](https://aws.amazon.com/jp/ecs/features/)     || 名前      | 概要                                                                                                                    | 詳しくは参考リンク                                                                                                                          || --------- | ----------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- || Jenkins   | ソフトウェアのビルド、検証、サーバへのインストール等の一連作業を自動化する事が出来るツール                              | [サルでもわかる Jenkins 入門〜自動テスト環境を構築しよう](https://ics.media/tutorial-jenkins)                                               || Travis CI | GitHub 上のソフトウェアのビルドやテストを行う、オンラインで分散型のサービス                                             | [GitHub と連携できる継続的インテグレーションツール「Travis CI」入門](https://knowledge.sakura.ad.jp/3754/)                                  || Bamboo    | 継続的インテグレーション、デプロイメント、デリバリーを行うプロフェッショナルチームに選ばれているツール                  | [公式](https://ja.atlassian.com/software/bamboo)                                                                                            || Circle CI | 継続的インテグレーションツール「Jenkins」と同様な機能を提供し、ビルド/テスト/デプロイなどについて自動実行できるサービス | [【CircleCI】CircleCI 2.0 からはじめる個人での簡単な CI 導入方法 - github との連携まで](http://tweeeety.hateblo.jp/entry/2018/02/09/195345) || 名前  | 概要                                     | 詳しくは参考リンク                                                   || ----- | ---------------------------------------- | -------------------------------------------------------------------- || Munin | サーバーの稼働状況をグラフ表示するツール | [Munin でかんたんサーバー監視](https://knowledge.sakura.ad.jp/3669/) |[サーバー監視ツール Munin](https://qiita.com/bezeklik/items/c4863c4114e0c339412b) || Nagios | 指定されたサービスを監視し、有事の際にユーザーに通知するソフトウェア | [Nagios の基礎](https://tech.pepabo.com/2013/11/30/nagios-learning/)[今更だけど、 Nagios について知っておきたい 5 つのこと](https://techblog.gmo-ap.jp/2016/10/14/%E4%BB%8A%E6%9B%B4%E3%81%A0%E3%81%91%E3%81%A9%E3%80%81-nagios-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%84-5-%E3%81%A4%E3%81%AE%E3%81%93%E3%81%A8/) || Zabbix | システム全体を監視することが可能なソフトウェア | [Zabbix とは？](https://www.miraclelinux.com/product-service/zabbix/overview/zabbix)[統合監視ツール「Zabbix」によるサーバー監視](https://knowledge.sakura.ad.jp/585/) || Kibana | データを解析、可視化するツール | [Kibana で簡単! サクサク ビジュアライズしよう！](https://qiita.com/kitfactory/items/9c2f990d87e33fab828a) || New Relic | ソフトウェアのパフォーマンス分析サービス | [New Relic の各製品紹介: New Relic ってアプリケーションパフォーマンス監視ツールじゃないの？](https://qiita.com/kumatronik/items/e2e09bd3708b00442d9b)[パフォーマンス監視サービスの New Relic が超便利な件](https://qiita.com/y_uuki/items/dd4fce78b1bc32b64600) || Ganglia | システム監視ツール | [Ganglia でエンタープライズ・クラスターを監視する](https://www.ibm.com/developerworks/jp/linux/library/l-ganglia-nagios-1/index.html)[Ganglia でシステムモニタリング](https://www.agilegroup.co.jp/technote/ganglia-install.html) || RRDTool | データを格納し、それをグラフ化するツール | [RRDtool](https://qiita.com/rokuta96/items/7fa3b9a1bd8de11e3bc4)[RRDtool x Grafana で可視化する](https://qiita.com/atfujiwara/items/8326560944bdb11ac6c8) || CloudForecast | RRDTool のラッパー的なツール | [CloudForecast っていうリソース監視のツール／フレームワーク作った](http://blog.nomadscafe.jp/2010/05/cloudforecast.html)[リソースモニタリングツール「CloudForecast」入門](https://blog.riywo.com/2011/02/27/043646/) || PagerDuty | 様々な監視ツールからのアラート通知を集約して、様々なアクションを実行できるサービス | [PagerDuty を使ってみた](http://blog.serverworks.co.jp/tech/2015/10/13/start-pagerduty/)[PagerDuty を使ってみる](https://qiita.com/saitotak/items/f215f89502c047d591fd) || Google Stackdriver | アラート通知や、指定した URL が外部からアクセスできるかどうか監視するサービス | [Stackdriver を触ってみた](http://blog.a-know.me/entry/2016/06/23/191821)[GCP から AWS までモニタリングできる Google Stackdriver を紹介！](https://www.topgate.co.jp/gcp15-what-is-google-stackdriver) || Cacti | リソースを収集し、グラフなどを作成することができるツール | [https://knowledge.sakura.ad.jp/618/](https://knowledge.sakura.ad.jp/618/) || mackerel | 死活監視、パフォーマンスモニタリング、収集したメトリックのグラフ化などができるサービス | [mackerel](https://mackerel.io/ja/)[サーバー監視サービス（Mackerel）](https://cloud.nifty.com/service/mackerel.htm) || sensu | Nagions をよくしようとした、「Ruby」製のオープンソース監視プラットフォーム | [今、話題の監視ツール「Sensu」とは？――基本的な構成、監視の仕組みを理解する](http://www.atmarkit.co.jp/ait/articles/1702/21/news013.html)[次世代監視ツール Sensu リファレンス](https://qiita.com/spesnova/items/f9a8c9661861cc453ead) || CloudWatch | AWS で実行されているアプリケーションをリアルタイムでモニタリングするサービス | [Amazon CloudWatch とは?](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html)[AWS の監視ツール「CloudWatch」で何ができるの？](https://www.bit-drive.ne.jp/managed-cloud/column/column_06.html) || Norikra | データの集計・検索・結合等などできるツール | [ログ解析に Norikra を使ってみた](http://hase.hateblo.jp/entry/2014/12/16/142250)[Norikra の使い方をサンプルのクエリとイベントを交えて解説](http://oxynotes.com/?p=9863) || Fluentd | ログ収集管理ツール | [柔軟なログ収集を可能にする「fluentd」入門](https://knowledge.sakura.ad.jp/1336/)[fluentd の基礎知識](https://abicky.net/2017/10/23/110103/) || Growth Forecast | Web サーバとして動作して、WebAPI 経由で受け取ったデータを元にグラフ化をしてくれるツール | [GrowthForecast というグラフ表示ツールで捗る話](http://blog.nomadscafe.jp/2011/12/growthforecast.html)[手軽にデータをグラフ化する GrowthForecast のインストールと使い方](http://oxynotes.com/?p=7584) || consul-alerts | health check の状態を監視し問題があれば通知するツール | [consul \u0026 consul-alerts を使った監視システム](https://www.slideshare.net/rrreeeyyy117/consul-andalertsmonitoring) || Xymon | ネットワーク監視ソフトウェア | [Xymon Tips and Tricks](https://www.skyhobbit.co.jp/xymon/index_c2_s7.html)[Xymon（シモン or サイモン）とは？](https://www.server-kanshi.net/) || Sentry | アプリケーションからイベントログを送信して、それを表示してくれるツール | [イベントログ収集ツールの Sentry が凄そう](http://d.hatena.ne.jp/heavenshell/20130325/1364224078)[Rails アプリケーションに Sentry を導入する](https://qiita.com/mikaji/items/74fac3be5e1235e0b762) || Prometheus | 監視対象にアクセスしてデータを収集するツール | [次世代監視の大本命！ Prometheus を実運用してみた](https://qiita.com/sugitak/items/ff8f5ad845283c5915d2)[Prometheus でのさまざまな監視データ取得法](https://knowledge.sakura.ad.jp/12057/) |"},{"name":"init-go.md","content":"brew install gogo env GOROOTexport path $GOROOT# goexport GOPATH=$HOME/goexport GOROOT=/usr/local/opt/go/libexecexport PATH=$PATH:$GOPATH/bin"},{"name":"init-mac.md","content":"Plug 'jalvesaq/Nvim-R', { 'for': 'r' }Plug 'gaalcaras/ncm-R', { 'for': 'r' }Plug 'vim-pandoc/vim-pandoc', { 'for': 'rmd' }Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'rmd'}Plug 'vim-pandoc/vim-rmarkdown', { 'for': 'rmd' e:CocInstall coc-r-lsp\u003chttps://www.youtube.com/watch?v=nm45WagtV3w\u0026ab_channel=RohitFarmer\u003ehttps://pandoc.org/installing.html- https://joongsup.rbind.io/post/2019/04/05/r-markdown-revisited/- https://qiita.com/nozma/items/bbd681490b2aaaf9ec93 powerpoint- https://qiita.com/tomotagwork/items/c92fb40a76f56ea16aa4 reportingrstudio vim https://xvideos.hatenablog.com/entry/r_vim_keybindingsRMarkdown command :set filetype=rmarkdown.https://github.com/vim-pandoc/vim-rmarkdown/issues/11brew install rwhich rdisable rbrew link rr stdio$ brew tap caskroom/cask$ brew cask install rstudio$ open /Applications/RStudio.apptinytexTinyTeX is installed to ~/Library/TinyTeX on macOS:curl -sL \"https://yihui.org/tinytex/install-bin-unix.sh\" | shrstudioenstall.packages(\"rmarkdown\", dep = TRUE)install.packages(\"tinytex\")tinytex::install_tinytex()  # install TinyTeXinstall.packages(\"rmarkdown\", repos = \"https://cran.revolutionanalytics.com\")ERRORQuitting from lines 2-6 (r-sample.rmd) Error in library(ggplot2) : there is no package called 'ggplot2'Calls: render ... withCallingHandlers -\u003e withVisible -\u003e eval -\u003e eval -\u003e libraryExecution haltedinstall.packages(\"tidyverse\")``````sudo chown -R $(whoami) /usr/local"},{"name":"inspection.md","content":"- [脆弱性検知ツール Vuls の導入まで](https://zenn.dev/ciloholic/articles/aae495e53273b9)- [あなたのサーバは本当に安全ですか？今もっともイケてる脆弱性検知ツール Vuls を使ってみた - Qiita](https://qiita.com/sadayuki-matsuno/items/0bb8bb1689425bb9a21c)"},{"name":"interactive-animation.md","content":"- [Christmas Experiments](https://christmasexperiments.com/)- [Planck.js2D JavaScript Physics Engine](https://piqnt.com/planck.js/)- [GitHub - schteppe/p2.js: JavaScript 2D physics library](https://github.com/schteppe/p2.js/)- [GitHubo - p5.js](https://p5js.org/)"},{"name":"javascript-array-duplicate.md","content":"id duplicate ?```javascript  async updateIsPersonSearchRecent(value: boolean) {    this.isPersonLoading = true;    const personIds = this.contactSearchHistories      .filter(v =\u003e v.Type === 'person')      .map(v =\u003e v.Item \u0026\u0026 v.Item.Id) as number[];    const set = new Set();    if (value) {      const result: Array\u003cReferenceItem\u003cContactPersonItem\u003e\u003e = await referenceApi        .getReferences(`contact_person`, { Ids: personIds })        .then(v =\u003e v.Value);      this.selectedPerson = Array.from(        [...this.selectedPerson, ...result].filter(v =\u003e {          const duplicate = set.has(v.Id);          set.add(v.Id);          return !duplicate;        }),      );    } else {      this.selectedPerson = this.selectedPerson.filter(v =\u003e !personIds.some(v1 =\u003e v.Id === v1));    }    setTimeout(() =\u003e {      this.isPersonLoading = false;    }, 600);  }```is duplicate ?```javascriptthis.isDuplicatedEmployeeDate = this.employeeItems.some((v, i, a) =\u003e  a.some((v1, i1) =\u003e (v !== v1 ? v.dateData === v1.dateData : false)));```"},{"name":"javascript-fuzzy-search.md","content":"```js\"use strict\";function fuzzysearch(needle, haystack) {  var hlen = haystack.length;  var nlen = needle.length;  if (nlen \u003e hlen) {    return false;  }  if (nlen === hlen) {    return needle === haystack;  }  outer: for (var i = 0, j = 0; i \u003c nlen; i++) {    var nch = needle.charCodeAt(i);    while (j \u003c hlen) {      if (haystack.charCodeAt(j++) === nch) {        continue outer;      }    }    return false;  }  return true;}module.exports = fuzzysearch;// ビット反転演算子if (~str.indexOf(\"hoge\")) {  //strにhogeを含む場合の処理}```- [Javascript Searching Algorithms - DEV Community Exit fullscreen mode](https://dev.to/imranib/javascript-searching-algorithms-2il2)"},{"name":"javascript-keycode.md","content":"|                                     |                           || ----------------------------------- | ------------------------- || Keyboard key Pressed                | JavaScript Key Code value || backspace                           | 8                         || tab                                 | 9                         || enter                               | 13                        || shift                               | 16                        || ctrl                                | 17                        || alt                                 | 18                        || pause/break                         | 19                        || caps lock                           | 20                        || escape                              | 27                        || page up                             | 33                        || Space                               | 32                        || page down                           | 34                        || end                                 | 35                        || home                                | 36                        || arrow left                          | 37                        || arrow up                            | 38                        || arrow right                         | 39                        || arrow down                          | 40                        || print screen                        | 44                        || insert                              | 45                        || delete                              | 46                        || 0                                   | 48                        || 1                                   | 49                        || 2                                   | 50                        || 3                                   | 51                        || 4                                   | 52                        || 5                                   | 53                        || 6                                   | 54                        || 7                                   | 55                        || 8                                   | 56                        || 9                                   | 57                        || a                                   | 65                        || b                                   | 66                        || c                                   | 67                        || d                                   | 68                        || e                                   | 69                        || f                                   | 70                        || g                                   | 71                        || h                                   | 72                        || i                                   | 73                        || j                                   | 74                        || k                                   | 75                        || l                                   | 76                        || m                                   | 77                        || n                                   | 78                        || o                                   | 79                        || p                                   | 80                        || q                                   | 81                        || r                                   | 82                        || s                                   | 83                        || t                                   | 84                        || u                                   | 85                        || v                                   | 86                        || w                                   | 87                        || x                                   | 88                        || y                                   | 89                        || z                                   | 90                        || left window key                     | 91                        || right window key                    | 92                        || select key                          | 93                        || numpad 0                            | 96                        || numpad 1                            | 97                        || numpad 2                            | 98                        || numpad 3                            | 99                        || numpad 4                            | 100                       || numpad 5                            | 101                       || numpad 6                            | 102                       || numpad 7                            | 103                       || numpad 8                            | 104                       || numpad 9                            | 105                       || multiply                            | 106                       || add                                 | 107                       || subtract                            | 109                       || decimal point                       | 110                       || divide                              | 111                       || f1                                  | 112                       || f2                                  | 113                       || f3                                  | 114                       || f4                                  | 115                       || f5                                  | 116                       || f6                                  | 117                       || f7                                  | 118                       || f8                                  | 119                       || f9                                  | 120                       || f10                                 | 121                       || f11                                 | 122                       || f12                                 | 123                       || num lock                            | 144                       || scroll lock                         | 145                       || My Computer (multimedia keyboard)   | 182                       || My Calculator (multimedia keyboard) | 183                       || semi-colon                          | 186                       || equal sign                          | 187                       || comma                               | 188                       || dash                                | 189                       || period                              | 190                       || forward slash                       | 191                       || open bracket                        | 219                       || back slash                          | 220                       || close braket                        | 221                       || single quote                        | 222                       |"},{"name":"javascript-string.md","content":"- [文字列を切り出す 【JavaScript 動的サンプル】](https://web-designer.cman.jp/javascript_ref/string/substr/)機能 構文【値】意味文字数指定で切り出す 文字列.substr(start[,length])【start】・切り出しを開始する文字位置(0 起点）・負の値の場合、文字列の最後からの文字位置(-1 起点）【length】・切り出す文字数・省略時は、文字列の最後まで切り出す文字位置指定で切り出す ① 文字列.substring(start[,end])【start】・切り出しを開始する文字位置(0 起点）・負の値の指定不可。指定した場合、0 として扱われる【end】・切り出しを終了する文字位置（指定の文字位置の１つ前まで切り出される）・負の値の指定不可。指定した場合、0 として扱われる・省略時は、文字列の最後まで切り出す・start\u003eend の場合、自動で値が入れ替わる文字位置指定で切り出す ② 文字列.slice(start[,end])【start】・切り出しを開始する文字位置(0 起点）・負の値の場合、文字列の最からの文字位置(-1 起点）【end】・切り出しを終了する文字位置（指定の文字位置の１つ前まで切り出される）・負の値の場合、文字列の最後からの文字位置(-1 起点）・省略時は、文字列の最後まで切り出す・start 位置\u003eend 位置の場合、何も切り出さない１文字のみ切り出す 文字列.charAt(n)【n】・切り出す文字位置(0 起点）区切り文字または、正規表現で分割し配列に格納 文字列.split([separator,limit])【separator】・区切り文字、または、区切り条件を正規表現で指定・省略時は、文字列全体がそのまま返却される（分割されない）【limit】・分割結果の配列への格納数・省略時は、分割結果を全て格納正規表現での検索結果を配列に格納※マッチしない場合、null が返却される 文字列.match(/検索内容/[フラグ])【検索内容】・検索内容を正規表現で指定【フラグ】i：大文字、小文字を区別しないg：全て検索する（指定なしの場合、最初の１つのみ検索する）m：複数行で検索する※複数指定可ページ TOP● 選んでコピペで利用可能！ ● 文字列切り出しのサンプル【STEP1】サンプル生成 条件指定機能・引数 指定内容機能 substrsubstringslicecharAtsplitmatch文字列文字列引数start ⇒0, length ⇒文字数※start ＝ space は,0 になります。【STEP2】生成された JavaScript サンプルの動作確認↑ このボタンは以下 ↓ でコーディングされています。\u003cinput type=\"button\" value=\"上記サンプルを実行\"onClick=\"cman_string();\"\u003e【STEP3】JavaScript をコピーして利用// -------------------------------------------------------------// この「cman_string()」を使用すると、文字列が切り出されます// -------------------------------------------------------------function cman_string(){var wstr = \"\";var wresult = \"\";wresult = wstr.substr(0);alert(wresult);}サンプルはコピー＆ペーストしてご利用ください。ページ TOP関連する JavaScript画面にテキストやスクリプトの書き出し文字列の検索文字列の置換文字の整形（太字、点滅、など）後"},{"name":"javascript-uniq.md","content":"```function uniq(array) {  return array.filter((elem, index, self) =\u003e self.indexOf(elem) === index);}function uniq(array) {  return [...new Set(array)];}function uniq(array) {  return Array.from(new Set(array));}const baseName = (str) =\u003e {  var base = new String(str).substring(str.lastIndexOf(\"/\") + 1);  return base  // if (base.lastIndexOf(\".\") != -1)  //   base = base.substring(0, base.lastIndexOf(\".\"));  // return base;}```"},{"name":"javascript.md","content":"- ES6 Modules  ECMAScript (ES6) modules have been supported in Node.js since v8.5, with the --experimental-modules flag, and since at least Node.js v13.8.0 without the flag. To enable \"ESM\" (vs. Node.js's previous CommonJS-style module system [\"CJS\"]) you either use \"type\": \"module\" in package.json or give the files the extension .mjs. (Similarly, modules written with Node.js's previous CJS module can be named .cjs if your default is ESM.)- ECMAScript modules in browsers  Browsers have had support for loading ECMAScript modules directly (no tools like Webpack required) since Safari 10.1, Chrome 61, Firefox 60, and Edge 16. Check the current support at caniuse. There is no need to use Node.js' .mjs extension; browsers completely ignore file extensions on modules/scripts.- Node.js require  The older CJS module style, still widely used in Node.js, is the module.exports/require system.- In node, you can load a module using node --experimental-modules file.mjs. Note that node requires the .mjs extension unless you have configured \"type\": \"module\" in your package.json file. You can use the out extension setting in esbuild to customize the output extension for the files esbuild generates. You can read more about using ECMAScript modules in node here.```const shuffle = ([...array]) =\u003e {  for (let i = array.length - 1; i \u003e= 0; i--) {    const j = Math.floor(Math.random() * (i + 1));    [array[i], array[j]] = [array[j], array[i]];  }  return array;};```"},{"name":"jq-example.md","content":"- [コマンドライン JSON プロセッサー jq の演算子と関数 エラーの向こうへ](https://tech.mktime.com/entry/127)- [jq コマンドで覚えておきたい使い方 17 個 | 俺的備忘録 〜なんかいろいろ〜](https://orebibou.com/ja/home/201605/20160510_001/)- [jq コマンドを使う日常のご紹介 - Qiita](https://qiita.com/takeshinoda@github/items/2dec7a72930ec1f658af)- [ズンドコキヨシ with jq - Qiita](https://qiita.com/takeshinoda@github/items/bd74b3f621177daefb95)- [ゴリラ言語の読み方 - Qiita](https://qiita.com/mattn/items/65ec8f5256e244e1ed77) curl -s \"https://api.github.com/users/kis9a/repos\" | jq '.[] | select(.fork == false) | .'https://qiita.com/bouzuya/items/36e21c778539ce6bc486\u003c!--{{{--\u003e```sh// [{ \"title\": 'hello' \"id\": 1}, {\"title\": 'happy', \"id\": 2}]| jq -r 'map(.title)'[  'hello',  'happy']``````sh// [{ \"title\": 'hello' \"id\": 1}, {\"title\": 'happy', \"id\": 2}]| jq -r 'map(.title)[]'hello,happy``````sh// [{ \"title\": 'hello' \"id\": 1}, {\"title\": 'happy', \"id\": 2}]| jq -r '.[] | { \"title\" } | .title'hellohappy```\u003c!--}}}--\u003e\u003c!-- array1 {{{--\u003e```# 返送配列変数を定義$ declare -A MAP# 連想配列に値をセット$ MAP[\"key1\"]=1$ MAP[\"key2\"]=2$ MAP[\"key3\"]=\"hoge\"$ MAP[\"key4\"]=# JSON 変換$ for i in \"${!MAP[@]}\"; do# 奇数行にキーを、偶数行に値を出力し、jq コマンドに食わせるecho \"$i\"  echo \"${MAP[$i]}\"done | jq -c -n -R 'reduce inputs as $i ({}; . + { ($i): (input|(tonumber? // .)) })'```\u003c!--}}}--\u003e\u003c!-- array2 --\u003e{{{[]```json{  \"ObjectID\": [0, 1, 2, 3, 4],  \"Name\": [\"Apple\", \"Orange\", \"Grape\", \"Banana\", \"Jackfruit\"],  \"Color\": [\"Red\", \"Orange\", \"Green\", \"Yellow\", \"null\"],  \"Acidity\": [3.9, 3.5, 2.99, 6, 5.0]}```# jq --raw-output 'to_entries|map(.key),(map(.value)|transpose[])|@csv'```csvObjectID,Name,Color,Acidity0,Apple,Red,3.91,Orange,Orange,3.52,Grape,Green,2.993,Banana,Yellow,64,Jackfruit,null,5.0```\u003c!--}}}--\u003e\u003c!-- array3 --\u003e{{{```json[    {        \"name\": \"A\",        \"keys\": [\"k1\", \"k2\", \"k3\"]    },    {        \"name\": \"B\",        \"keys\": [\"k2\", \"k3\", \"k4\"]    }]I'd like to transform it to:{    \"k1\": [\"A\"],    \"k2\": [\"A\", \"B\"],    \"k3\": [\"A\", \"B\"],    \"k4\": [\"A\"],}``````map({ name, key: .keys[] })    | group_by(.key)    | map({ key: .[0].key, value: map(.name) })    | from_entries```https://stackoverflow.com/questions/32357240/transposing-objects-in-jq\u003c!--}}}--\u003earray4\u003c!--{{{--\u003e```json{  \"123\": \"abc\",  \"231\": \"dbh\",  \"452\": \"xyz\"}```to_entries[] | [.key, .value]```[  \"123\",  \"abc\"],[  \"231\",  \"dbh\"],[  \"452\",  \"xyz\"]`````` echo '{  \"123\" : \"abc\",  \"231\" : \"dbh\",  \"452\" : \"xyz\"}' | jq 'to_entries | map([.key, .value]|join(\",\"))'[  \"123,abc\",  \"231,dbh\",  \"452,xyz\"]```\u003c!--}}}--\u003e\u003c!--{{{--\u003e```{    \"name\": \"John\",    \"email\": \"john@company.com\"}{    \"name\": \"Brad\",    \"email\": \"brad@company.com\"}```$ jq -s '.' \u003c tmp.json```[    {        \"name\": \"John\",        \"email\": \"john@company.com\"    },    {        \"name\": \"Brad\",        \"email\": \"brad@company.com\"    }]`````\u003c!--}}}--\u003e```jq -n '{christmas: $ARGS.named}' \\  --arg one 'partridge in a \"pear\" tree' \\  --arg two 'turtle doves'{  \"christmas\": {    \"one\": \"partridge in a \\\"pear\\\" tree\",    \"two\": \"turtle doves\"  }}``````jq -n '{first: {name: $one, count: $ARGS.positional[0]}, all: $ARGS}' \\  --arg one 'partridge in a \"pear\" tree' \\  --arg two 'turtle doves' \\  --args 1 2 3{  \"first\": {    \"name\": \"partridge in a \\\"pear\\\" tree\",    \"count\": \"1\"  },  \"all\": {    \"positional\": [      \"1\",      \"2\",      \"3\"    ],    \"named\": {      \"one\": \"partridge in a \\\"pear\\\" tree\",      \"two\": \"turtle doves\"    }  }}```map```$ echo '{\"items\":[{\"item_id\":1,\"name\":\"すてきな雑貨\",\"price\":2500},{\"item_id\":2,\"name\":\"格好いい置物\",\"price\":4500}]}' \\| jq '.items | map({ name: .name, yen: .price })'[  {    \"name\": \"すてきな雑貨\",    \"yen\": 2500  },  {    \"name\": \"格好いい置物\",    \"yen\": 4500  }]```reduce```$ echo '{\"items\":[{\"item_id\":1,\"name\":\"すてきな雑貨\",\"price\":2500},{\"item_id\":2,\"name\":\"格好いい置物\",\"price\":4500}]}' \\| jq 'reduce .items[] as $item (0; . + $item.price)'7000```unique```echo '{\"items\":[{\"item_id\":1,\"name\":\"すてきな雑貨\",\"price\":2500},{\"item_id\":2,\"name\":\"格好いい置物\",\"price\":4500},{\"item_id\":3,\"name\":\"ナイスなお皿\",\"price\":4500}]}' \\| jq '[.items[].price] | unique'[  2500,  4500]``````"},{"name":"kubernetes.md","content":"- [【Kubernetes】入門したので簡潔にまとめてみた - Qiita](https://qiita.com/umaibou1126/items/2daa00ca155988e4ef0f)"},{"name":"lambda.md","content":""},{"name":"language.md","content":"[言語処理 100 本ノック 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/#sec10)動的型付け言語の知見オブジェクト指向言語の知見Web アプリケーション開発の知見HTTP や REST API に関する知見Web サーバとアプリケーションサーバの知見(Nginx や Puma 等)RDB(MySQL または PostgreSQL)の知見パッケージ管理の知見単体テスト/統合テストの知見セキュリティに関する基本的な知見基本的な CI/CD の知見クラウド(AWS または GCP)の基本的な知見GitHub によるタスク管理やコードレビューの知見Scrum 等によるチーム開発の知見静的型付け言語の知見コンパイル言語の知見ポインタやインターフェイス等の知見並行プログラミングの知見マイクロサービス方式での開発手法に関する知見Docker や Kubernetes の知見gRPC と Protocol Buffers と HTTP/2 に関する知見Scala を関数型で使用する方式の開発を経験することで、主に下記の知見の習得が期待出来ます。静的型付け関数型言語の知見ジェネリクス(型パラメータ)に関する知見純粋関数、参照透過性、パターンマッチ、代数的データ型、圏論、モノイド、モナド等に関する知見高階関数、map/flatMap/fold/reduce 等に関する知見部分適用、カリー化、関数合成等に関する知見共変/反変/上限境界/下限境界等に関する知見Future や Promise に関する知見再帰処理に関する知見Java や JVM に関する知見"},{"name":"lean-manufacturing.md","content":"- [実践事例から見る「リーンマネジメント」の本質～それは「徹底した現場実践主義」にある！～ | ProSharing Consulting(プロシェアリングコンサルティング)](https://circu.co.jp/pro-sharing/mag/article/2972/)MVP minimum variable product- [リーンソフトウェア開発の７つの原則と 22 の思考ツールについて解説 | Promapedia](https://ssaits.jp/promapedia/method/lean-software-development.html)原則3.1. ムダを排除する3.2. 学習効果を高める3.3. 決定をできるだけ遅らせる3.4. できるだけ速く提供する3.5. チームに権限を与える3.6. 統一性を作りこむ3.7. 全体を見る1 ムダを認識する2 バリューストリームマッピング3 フィードバック4 イテレーション5 同期6 集合ベース開発7 オプション思考8 最終責任時点9 意思決定10 プルシステム11 待ち行列理論12 遅れのコスト13 自発的決定14 モチベーション15 リーダーシップ16 専門知識17 認知統一性18 コンセプト統一性19 リファクタリング20 テスティング21 計測22 契約"},{"name":"learning-ci-cd.md","content":"覚えても忘れる。学習の目的はなんだ？最大のアウトプットを出すこと記憶のトリガーを蓄積する。傾向から推測する。"},{"name":"lighsail.md","content":"```\u003c ~/kis9a !+master \u003e aws --profile=kis9a lightsail get-bundles --region eu-west-1 --query 'bundles[].{price:price,cpuCount:cpuCount,ramSizeInGb:ramSizeInGb,diskSizeInGb:diskSizeInGb,bundleId:bundleId,instanceType:instanceType,supportedPlatforms:supportedPlatforms[0]}' --output table---------------------------------------------------------------------------------------------------------------|                                                 GetBundles                                                  |+-----------------+-----------+---------------+---------------+--------+---------------+----------------------+|    bundleId     | cpuCount  | diskSizeInGb  | instanceType  | price  |  ramSizeInGb  | supportedPlatforms   |+-----------------+-----------+---------------+---------------+--------+---------------+----------------------+|  nano_2_0       |  1        |  20           |  nano         |  3.5   |  0.5          |  LINUX_UNIX          ||  micro_2_0      |  1        |  40           |  micro        |  5.0   |  1.0          |  LINUX_UNIX          ||  small_2_0      |  1        |  60           |  small        |  10.0  |  2.0          |  LINUX_UNIX          ||  medium_2_0     |  2        |  80           |  medium       |  20.0  |  4.0          |  LINUX_UNIX          ||  large_2_0      |  2        |  160          |  large        |  40.0  |  8.0          |  LINUX_UNIX          ||  xlarge_2_0     |  4        |  320          |  xlarge       |  80.0  |  16.0         |  LINUX_UNIX          ||  2xlarge_2_0    |  8        |  640          |  2xlarge      |  160.0 |  32.0         |  LINUX_UNIX          ||  nano_win_2_0   |  1        |  30           |  nano         |  8.0   |  0.5          |  WINDOWS             ||  micro_win_2_0  |  1        |  40           |  micro        |  12.0  |  1.0          |  WINDOWS             ||  small_win_2_0  |  1        |  60           |  small        |  20.0  |  2.0          |  WINDOWS             ||  medium_win_2_0 |  2        |  80           |  medium       |  40.0  |  4.0          |  WINDOWS             ||  large_win_2_0  |  2        |  160          |  large        |  70.0  |  8.0          |  WINDOWS             ||  xlarge_win_2_0 |  4        |  320          |  xlarge       |  120.0 |  16.0         |  WINDOWS             ||  2xlarge_win_2_0|  8        |  640          |  2xlarge      |  240.0 |  32.0         |  WINDOWS             |+-----------------+-----------+---------------+---------------+--------+---------------+----------------------+\u003c ~/kis9a !+master \u003e aws --profile=kis9a lightsail get-bundles --region ap-northeast-1 --query 'bundles[].{price:price,cpuCount:cpuCount,ramSizeInGb:ramSizeInGb,diskSizeInGb:diskSizeInGb,bundleId:bundleId,instanceType:instanceType,supportedPlatforms:supportedPlatforms[0]}' --output table---------------------------------------------------------------------------------------------------------------|                                                 GetBundles                                                  |+-----------------+-----------+---------------+---------------+--------+---------------+----------------------+|    bundleId     | cpuCount  | diskSizeInGb  | instanceType  | price  |  ramSizeInGb  | supportedPlatforms   |+-----------------+-----------+---------------+---------------+--------+---------------+----------------------+|  nano_2_0       |  1        |  20           |  nano         |  3.5   |  0.5          |  LINUX_UNIX          ||  micro_2_0      |  1        |  40           |  micro        |  5.0   |  1.0          |  LINUX_UNIX          ||  small_2_0      |  1        |  60           |  small        |  10.0  |  2.0          |  LINUX_UNIX          ||  medium_2_0     |  2        |  80           |  medium       |  20.0  |  4.0          |  LINUX_UNIX          ||  large_2_0      |  2        |  160          |  large        |  40.0  |  8.0          |  LINUX_UNIX          ||  xlarge_2_0     |  4        |  320          |  xlarge       |  80.0  |  16.0         |  LINUX_UNIX          ||  2xlarge_2_0    |  8        |  640          |  2xlarge      |  160.0 |  32.0         |  LINUX_UNIX          ||  nano_win_2_0   |  1        |  30           |  nano         |  8.0   |  0.5          |  WINDOWS             ||  micro_win_2_0  |  1        |  40           |  micro        |  12.0  |  1.0          |  WINDOWS             ||  small_win_2_0  |  1        |  60           |  small        |  20.0  |  2.0          |  WINDOWS             ||  medium_win_2_0 |  2        |  80           |  medium       |  40.0  |  4.0          |  WINDOWS             ||  large_win_2_0  |  2        |  160          |  large        |  70.0  |  8.0          |  WINDOWS             ||  xlarge_win_2_0 |  4        |  320          |  xlarge       |  120.0 |  16.0         |  WINDOWS             ||  2xlarge_win_2_0|  8        |  640          |  2xlarge      |  240.0 |  32.0         |  WINDOWS             |+-----------------+-----------+---------------+---------------+--------+---------------+----------------------+lightsail -h\u0008o allocate-static-ip\u0008o attach-certificate-to-distribution\u0008o attach-disk\u0008o attach-instances-to-load-balancer\u0008o attach-load-balancer-tls-certificate\u0008o attach-static-ip\u0008o close-instance-public-ports\u0008o copy-snapshot\u0008o create-certificate\u0008o create-cloud-formation-stack\u0008o create-contact-method\u0008o create-container-service\u0008o create-container-service-deployment\u0008o create-container-service-registry-login\u0008o create-disk\u0008o create-disk-from-snapshot\u0008o create-disk-snapshot\u0008o create-distribution\u0008o create-domain\u0008o create-domain-entry\u0008o create-instance-snapshot\u0008o create-instances\u0008o create-instances-from-snapshot\u0008o create-key-pair\u0008o create-load-balancer\u0008o create-load-balancer-tls-certificate\u0008o create-relational-database\u0008o create-relational-database-from-snapshot\u0008o create-relational-database-snapshot\u0008o delete-alarm\u0008o delete-auto-snapshot\u0008o delete-certificate\u0008o delete-contact-method\u0008o delete-container-image\u0008o delete-container-service\u0008o delete-disk\u0008o delete-disk-snapshot\u0008o delete-distribution\u0008o delete-domain\u0008o delete-domain-entry\u0008o delete-instance\u0008o delete-instance-snapshot\u0008o delete-key-pair\u0008o delete-known-host-keys\u0008o delete-load-balancer\u0008o delete-load-balancer-tls-certificate\u0008o delete-relational-database\u0008o delete-relational-database-snapshot\u0008o detach-certificate-from-distribution\u0008o detach-disk\u0008o detach-instances-from-load-balancer\u0008o detach-static-ip\u0008o disable-add-on\u0008o download-default-key-pair\u0008o enable-add-on\u0008o export-snapshot\u0008o get-active-names\u0008o get-alarms\u0008o get-auto-snapshots\u0008o get-blueprints\u0008o get-bundles\u0008o get-certificates\u0008o get-cloud-formation-stack-records\u0008o get-contact-methods\u0008o get-container-api-metadata\u0008o get-container-images\u0008o get-container-log\u0008o get-container-service-deployments\u0008o get-container-service-metric-data\u0008o get-container-service-powers\u0008o get-container-services\u0008o get-disk\u0008o get-disk-snapshot\u0008o get-disk-snapshots\u0008o get-disks\u0008o get-distribution-bundles\u0008o get-distribution-latest-cache-reset\u0008o get-distribution-metric-data\u0008o get-distributions\u0008o get-domain\u0008o get-domains\u0008o get-export-snapshot-records\u0008o get-instance\u0008o get-instance-access-details\u0008o get-instance-metric-data\u0008o get-instance-port-states\u0008o get-instance-snapshot\u0008o get-instance-snapshots\u0008o get-instance-state\u0008o get-instances\u0008o get-key-pair\u0008o get-key-pairs\u0008o get-load-balancer\u0008o get-load-balancer-metric-data\u0008o get-load-balancer-tls-certificates\u0008o get-load-balancers\u0008o get-operation\u0008o get-operations\u0008o get-operations-for-resource\u0008o get-regions\u0008o get-relational-database\u0008o get-relational-database-blueprints\u0008o get-relational-database-bundles\u0008o get-relational-database-events\u0008o get-relational-database-log-events\u0008o get-relational-database-log-streams\u0008o get-relational-database-master-user-password\u0008o get-relational-database-metric-data\u0008o get-relational-database-parameters\u0008o get-relational-database-snapshot\u0008o get-relational-database-snapshots\u0008o get-relational-databases\u0008o get-static-ip\u0008o get-static-ips\u0008o help\u0008o import-key-pair\u0008o is-vpc-peered\u0008o open-instance-public-ports\u0008o peer-vpc\u0008o push-container-image\u0008o put-alarm\u0008o put-instance-public-ports\u0008o reboot-instance\u0008o reboot-relational-database\u0008o register-container-image\u0008o release-static-ip\u0008o reset-distribution-cache\u0008o send-contact-method-verification\u0008o set-ip-address-type\u0008o start-instance\u0008o start-relational-database\u0008o stop-instance\u0008o stop-relational-database\u0008o tag-resource\u0008o test-alarm\u0008o unpeer-vpc\u0008o untag-resource\u0008o update-container-service\u0008o update-distribution\u0008o update-distribution-bundle\u0008o update-domain-entry\u0008o update-load-balancer-attribute\u0008o update-relational-database\u0008o update-relational-database-parameters                                                                   LIGHTSAIL()\u003c ~/dev/ltf master \u003e aws --profile=kis9a lightsail get-blueprints --query 'blueprints[?type==`os`\u0026\u0026platform==`LINUX_UNIX`].{name:name,version:version}' --output table--------------------------------------------|               GetBlueprints              |+-----------------+------------------------+|      name       |        version         |+-----------------+------------------------+|  Amazon Linux 2 |  2.0.20210427.0        ||  Amazon Linux   |  2018.03.0.20210408.0  ||  Ubuntu         |  20.04 LTS             ||  Ubuntu         |  18.04 LTS             ||  Ubuntu         |  16.04 LTS             ||  Debian         |  10.8                  ||  Debian         |  9.13                  ||  Debian         |  8.7                   ||  FreeBSD        |  12.2                  ||  openSUSE       |  15.2                  ||  CentOS         |  8 2004-01             ||  CentOS         |  7 2009-01             |+-----------------+------------------------+\u003c ~/kis9a !+master \u003e aws --profile=kis9a lightsail get-blueprints --region eu-west-1 --query 'blueprints[].{blueprintId:blueprintId,name:name,group:group,productUrl:productUrl,platform:platform}' --output table---------------------------------------------------------------------------------------------------------------|  GetBlueprints                                                                                              |+--------------------------------------+-----------------------+--------------------------------+-------------+|              blueprintId             |         group         |             name               |  platform   |+--------------------------------------+-----------------------+--------------------------------+-------------+|  windows_server_2019                 |  windows_2019         |  Windows Server 2019           |  WINDOWS    ||  windows_server_2016                 |  windows_2016         |  Windows Server 2016           |  WINDOWS    ||  windows_server_2012                 |  windows_2012         |  Windows Server 2012 R2        |  WINDOWS    ||  windows_server_2016_sql_2016_express|  windows_2016_sql_exp |  SQL Server 2016 Express       |  WINDOWS    ||  amazon_linux_2                      |  amazon_linux_2       |  Amazon Linux 2                |  LINUX_UNIX ||  amazon_linux                        |  amazon-linux         |  Amazon Linux                  |  LINUX_UNIX ||  ubuntu_20_04                        |  ubuntu_20            |  Ubuntu                        |  LINUX_UNIX ||  ubuntu_18_04                        |  ubuntu_18            |  Ubuntu                        |  LINUX_UNIX ||  ubuntu_16_04_2                      |  ubuntu               |  Ubuntu                        |  LINUX_UNIX ||  debian_10                           |  debian_10            |  Debian                        |  LINUX_UNIX ||  debian_9_13                         |  debian_9             |  Debian                        |  LINUX_UNIX ||  debian_8_7                          |  debian               |  Debian                        |  LINUX_UNIX ||  freebsd_12                          |  freebsd              |  FreeBSD                       |  LINUX_UNIX ||  opensuse_15_2                       |  opensuse             |  openSUSE                      |  LINUX_UNIX ||  centos_8                            |  centos_8             |  CentOS                        |  LINUX_UNIX ||  centos_7_2009_01                    |  centos               |  CentOS                        |  LINUX_UNIX ||  wordpress                           |  wordpress            |  WordPress                     |  LINUX_UNIX ||  wordpress_multisite                 |  wordpress_multisite  |  WordPress Multisite           |  LINUX_UNIX ||  lamp_7                              |  lamp_7               |  LAMP (PHP 7)                  |  LINUX_UNIX ||  nodejs                              |  node                 |  Node.js                       |  LINUX_UNIX ||  joomla                              |  joomla               |  Joomla                        |  LINUX_UNIX ||  magento                             |  magento              |  Magento                       |  LINUX_UNIX ||  mean                                |  mean                 |  MEAN                          |  LINUX_UNIX ||  drupal                              |  drupal               |  Drupal                        |  LINUX_UNIX ||  gitlab                              |  gitlab               |  GitLab CE                     |  LINUX_UNIX ||  redmine                             |  redmine              |  Redmine                       |  LINUX_UNIX ||  nginx                               |  nginx                |  Nginx                         |  LINUX_UNIX ||  ghost_bitnami                       |  ghost_bitnami        |  Ghost                         |  LINUX_UNIX ||  django_bitnami                      |  django_bitnami       |  Django                        |  LINUX_UNIX ||  prestashop_bitnami                  |  prestashop_bitnami   |  PrestaShop                    |  LINUX_UNIX ||  plesk_ubuntu_18_0_34                |  plesk_ubuntu         |  Plesk Hosting Stack on Ubuntu |  LINUX_UNIX ||  cpanel_whm_linux                    |  cpanel_whm_linux     |  cPanel \u0026 WHM for Linux        |  LINUX_UNIX |+--------------------------------------+-----------------------+--------------------------------+-------------+"},{"name":"line.md","content":"### Starter- [GitHub - line/line-login-starter: LINE Login starter application](https://github.com/line/line-login-starter)- [GitHub - line/line-liff-v2-starter: This is a small web application that demonstrates the basic functionality of the LINE Front-end Framework (LIFF).](https://github.com/line/line-liff-v2-starter)### SDKnode- [GitHub - line/line-bot-sdk-nodejs: LINE Messaging API SDK for Node.js](https://github.com/line/line-bot-sdk-nodejs)- [GitHub - kenakamu/LINESimulator: LINESimulator](https://github.com/kenakamu/linesimulator)- [GitHub - Yoctol/bottender: ⚡️ A framework for building conversational user interfaces.](https://github.com/Yoctol/bottender)- [GitHub - kenakamu/line-richmenus-manager: LINE Rich Menus Manager](https://github.com/kenakamu/line-richmenus-manager)- [GitHub - boybundit/linebot: 🤖 SDK for the LINE Messaging API for Node.js](https://github.com/boybundit/linebot)- [GitHub - Wolke/botbuilder-linebot-connector](https://github.com/Wolke/botbuilder-linebot-connector)- [messaging-apis/packages/messaging-api-line at master · Yoctol/messaging-apis · GitHub](https://github.com/Yoctol/messaging-apis/tree/master/packages/messaging-api-line)- [messaging-apis/packages/messaging-api-line at master · Yoctol/messaging-apis · GitHub](https://github.com/Yoctol/messaging-apis/tree/master/packages/messaging-api-line)  sudo npm install -g line-simulator  sudo line-simulator  npm install -g liff  -### References- [中国で流行っているミニアプリが日本でも流行り始めているらしい - Qiita](https://qiita.com/yagi_eng/items/433fb34d635a454739d7)- [LINE Developers](https://developers.line.biz/ja/services/)- [Go と Nuxt で飲食店検索ができる LINE BOT と LINE ミニアプリ(LIFF)を作ってみた - Qiita](https://qiita.com/yagi_eng/items/8490f189d1be82c433e2)- [LIFF アプリを量産するためのテンプレートを作った【LINE Front-end Framework】 | DevelopersIO](https://dev.classmethod.jp/articles/introduction-of-liff-app-template/)- [LIFF アプリを量産するためのテンプレートを作った【LINE Front-end Framework】 | DevelopersIO](https://dev.classmethod.jp/articles/introduction-of-liff-app-template/)- [LINE Front-End Framework を利用して ToDo アプリを開発しよう | TechTrain | 加速するエンジニア。](https://techbowl.co.jp/techtrain/missions/26)- [LIFF アプリを作ってみよう（#1 基礎編） - Qiita](https://qiita.com/bow_arrow/items/ecba2bcad7ecbe0df745)- [LINE の LIFF 開発超入門 : LIFF SDK を使った Web アプリの開発 - Qiita](https://qiita.com/kenakamu/items/44cba247ab51b6c5ed51)- [GitHub - kenakamu/LINE-LIFF-Sample: LINE Developer Bootcamp - LIFF 開発入門 で使ったサンプル](https://github.com/kenakamu/LINE-LIFF-Sample)- [GitHub - yagi-eng/go-linebot-start: Go と LINE BOT ことはじめ](https://github.com/yagi-eng/go-linebot-start)"},{"name":"live-streaming.md","content":"上記の図にある通り、一般的には HLS ≒ MPED-DASH \u003e RTMP \u003e WebRTC の順に遅延が少ないです。WebRTC は P2P の通信であるため、配信側は視聴者の分のデータ変換を行う必要があります。つまり視聴者が増えれば増えるほど、配信側の負担が増加していきます。そのため、大人数が視聴する場合には向いていません。- [ぼくのかんがえたさいきょうの超低遅延大規模配信 · GitHub](https://gist.github.com/voluntas/0eb505cb5d53fefec6708aa93fd2410d)- Webrtc SFU  全員に同一ビットレートを配信する必要がある  Simulcast や SVC を利用することで解決している  大規模配信ができない  多段 (Origin - Edge) にすることで解決している  同時に多くのユーザを視聴できない  話をしている人だけを高画質にするなどの負荷を下げる機能を独自に実装することで解決している  録画ファイルが一つにならない  録画合成の仕組みを別途用意することで解決している- SFU (Selective Forwarding Unit)  SFU という単語が出てきたのはここ数年。ただ概念自体は前からある。 以前だとメディアルーターと呼ばれていた。最近でも SFU と呼ばずメディアルーターと呼ぶ場合もある。 SFU は MCU だと CPU リソースを使われてしまうことから考え出された仕組みだ。 クライアントが配信する音声や映像をサーバが代理で他のクライアントやサーバに送るという仕組み。 そのため、クライアントは 10 人参加者がいた場合でもサーバに映像を送るだけで済む。 P2P の場合のフルメッシュと MCU の間の技術でバランスが良い事もあり WebRTC でクライアント・サーバモデルの場合は SFU が選択されることが多い。 SFU の場合は E2EE が採用できる。実際 Google Duo は 3 人以上の場合は WebRTC SFU を利用しながら、E2EE を実現している。- VP8 + WebRTC SFU + Simulcast + リレーを利用することで数万人規模に対して 500 ミリ以下の超低遅延で音声や映像を配信することが可能になります。さらには WebRTC のデータチャネルを利用することで文字列やバイナリなどのデータも配信可能です。- ただし 10 万人などの超大規模に対しては HLS/MPEG-DASH + CDN という世界を利用すべきだと考えています。超大規模で超低遅延の需要はスポーツ中継とかでしょうか ... このあたりは、まだなんとも言えないのが現状です。- 10000 people x 10yen(1h) = 100000yen"},{"name":"local-ssl.md","content":"[ローカル開発環境に SSL を設定できる mkcert がめちゃくちゃ便利だった | Rriver](https://parashuto.com/rriver/tools/mkcert-for-local-ssl-dev-env)"},{"name":"logging.md","content":"\u003chttps://wtee.readthedocs.io/en/latest/\u003etail -f /var/log/debug | wtee | nlwebsocketd --port 1234 tail -f /path/to/file| ログレベル | 説明                                 | 例                                                 || ---------- | ------------------------------------ | -------------------------------------------------- || emergency  | システムが使用不可能な状態           |                                                    || fatal      | 致命的なエラー                       | プログラムの異常終了を伴うようなもの               || alert      | すぐに何らかの対処が必要             | アプリケーションがダウン。Slack などで通知するべき || critical   | 危機的な状態                         | 予期しない例外                                     || error      | 直ちに対処する必要のない実行時エラー |                                                    || warning    | エラーではないが例外的なもの         | 間違っていないが望ましくないものの使用             || notice     | 正常だが、重要なもの                 |                                                    || info       | 関心を寄せておきたいもの             | ユーザーのログインや SQL                           || debug      | 開発中のデバッグ情報                 |                                                    || trace      | トレース情報。詳細な情報。           |                                                    |"},{"name":"lowjs.md","content":"- [GitHub - jorgebucaran/superfine: Absolutely minimal view layer for building web interfaces.](https://github.com/jorgebucaran/superfine)- [GitHub - jorgebucaran/hyperapp: The tiny framework for building hypertext applications.](https://github.com/jorgebucaran/hyperapp)Examples (minified+gzipped):jsondbhyperxhyperapp 1.9kBhyperlit 0.8kBhyperapp-fx 1.6kBsnarkdown 1.0kBpage 3.9kB (this one has 1 dependency)[GitHub - talentlessguy/tinyhttp: 🦄 0-legacy, tiny \u0026amp; fast web framework as a replacement of Express](https://github.com/talentlessguy/tinyhttp)"},{"name":"lua.md","content":"```brew install luabrew install luarocks```■ クロスプラットフォームであり、言語に依存せず機能を搭載できる■ オブジェクト指向プログラミングが可能であり、ガベージコレクションなどの機能を最初から有する■ スクリプト言語・組み込み言語としては最速の部類に入る■Lua は標準ライブラリが少なく、他のライブラリを用いると依存性が高まる■ オブジェクト指向の定義方法が言語に規定されていない■Lua は言語仕様・その構造的に、セキュリティ確保が難しい- [lua 5.3](http://milkpot.sakura.ne.jp/lua/lua53_manual_ja.html)- [LuaRocks に自作モジュールを登録する手順 - Qiita](https://qiita.com/toritori0318/items/fdd2c92caba2c003a51d)- [Search - LuaRocks](https://luarocks.org/search)- [GitHub - LewisJEllis/awesome-lua: A curated list of quality Lua packages and resources.](https://github.com/LewisJEllis/awesome-lua)- [LuaRocks で Lua のモジュールを管理する - Qiita](https://qiita.com/mah0x211/items/a07a2628f129285a9337)- [GitHub - bungle/awesome-resty: A List of Quality OpenResty Libraries, and Resources.](https://github.com/bungle/awesome-resty)# cli- [GitHub - kikito/ansicolors.lua: ANSI terminal color manipulation for Lua.](https://github.com/kikito/ansicolors.lua)- [GitHub - amireh/lua_cliargs: A command-line argument parsing module for Lua.](https://github.com/amireh/lua_cliargs)- [GitHub - hoelzro/lua-term: Terminal operations for Lua](https://github.com/hoelzro/lua-term)- [GitHub - mpeterv/argparse: Feature-rich command line parser for Lua](https://github.com/mpeterv/argparse)- [Lua オブジェクト指向プログラミング　メタテーブルを使用する場合としない場合 - Qiita](https://qiita.com/demoin/items/fe2d243fa79745977758)- [第 4 回: Lua のオブジェクト指向について紹介する \u0026mdash; WTOPIA v1.0 documentation](https://ie.u-ryukyu.ac.jp/~e085739/lua.hajime.4.html)- \u003chttp://lua-users.org/wiki/LuaDirectory\u003e"},{"name":"mac-storage.md","content":"# 1000M以上のファイルを抽出sudo du -x -m -d 5 / | awk '$1 \u003e= 1000{print}'メモリ解放sudo purgeメモリ解放（そこそこ時間かかります）du -sx /https://gist.github.com/bright23/6dc8fd43432a42e8edc7c95589098014#!/bin/shsudo purgedu -sx /sudo rm -rf ~/Library/Developer/Xcode/DerivedData/*sudo rm -rf ~/Library/Developer/Xcode/Archives/*sudo rm -rf ~/Library/Caches/*sudo rm -rf ~/Library/Logs/iOS\\ Simulatorsudo rm -rf ~/Library/Developer/Xcode/iOS\\ DeviceSupport/*duコマンドを使用してMacの5GB以上のフォルダを確認ハードディスクの空き容量が極端に少なくなる場合の対処方法sudo du -g -x -d 5 / | awk '$1 \u003e= 5{print}'"},{"name":"makefile.md","content":"- [Make覚書 - Qiita](https://qiita.com/Shigets/items/27170827707e5136ee89)| target | memo || --- | --- || all | 全ての作業 || install | インストール || clean | バイナリ削除 || deisclean | 元の配布物以外の生成物を削除 || TAGS | エディタが使用するtagsを作成する || info | GNU infoを作成する || check | テスト実行 || var | memo || --- | --- || \\\\$@ | ターゲットファイル名 || \\\\$% | ターゲットがアーカイブメンバだったときのターゲットメンバ名 || \\\\$\u003c | 最初の依存するファイルの名前 || \\\\$? | ターゲットより新しいすべての依存するファイル名 || \\\\$^ | すべての依存するファイルの名前 || \\\\$+ | Makefileと同じ順番の依存するファイルの名前 || \\\\$\\* | サフィックスを除いたターゲットの名前 || symbol | memo || --- | --- || CURDIR | カレントディレクトリ || MAKEFILE\\_LIST | makeが読み込んだファイルのリスト || .VARIABLES | 変数のリスト || symbol | memo | default || --- | --- | --- || CXX | C++コンパイルコマンド | g++ || CXXFLAGS | C++コンパイルオプション |  || CPPFLAGS | プリプロセッサ用オプション |  || TARGET\\_ARCH |  |  || LDFLAGS | リンカ用オプション |  || COMPILE.cc | C++コンパイル実行 | \\\\$(CXX) \\\\$(CXXFLAGS) \\\\$(CPPFLAGS) \\\\$(TARGET\\_ARCH) -c || COMPILE.C | C++コンパイル実行 | \\\\$(COMILE.cc) || COMPILE.cpp | C++コンパイル実行 | \\\\$(COMILE.cc) || LINK.cc | C++リンク実行 | \\\\$(CXX) \\\\$(CXXFLAGS) \\\\$(CPPFLAGS) \\\\$(LDFLAGS) \\\\$(TARGET\\_ARCH) || LINK.C | C++リンク実行 | \\\\$(LINK.cc) || LINK.cpp | C++リンク実行 | \\\\$(LINK.cc) || LINK.o | オブジェクのリンク | \\\\$(CC) \\\\$(LDFLAGS) \\\\$(TARGET\\_ARCH) || OUTPUT\\_OPTION |  | -o $@ || target | memo || --- | --- || .PHONY | 疑似ターゲット指定 || .INTERMEDIATE | 中間ファイル指定(make終了後自動削除) || .SECONDARY | 中間ファイル指定(自動削除しない) || .PRECIOUS | make中断時に勝手に削除しない || .DELETE\\_ON\\_ERROR | make中断時に削除する || ope | memo || --- | --- || := | 右辺を直ぐに展開 || = | 変数が使われる時に展開 || \\\\?= | 変数が値を持っていない場合にのみ代入 || += | 変数に追加 || func | memo || --- | --- || \\\\$(filter pattern, text) | textをスペースで区切られたリストとしてpatternとマッチしたものを返す || \\\\$(filter-out pattern, text) | filterの逆 || \\\\$(findstring string, text) | stringとマッチした時にstringを返す || \\\\$(subst search-string,replace-string,text) | 置換 || \\\\$(patsubst search-pattern,replace-pattern,text) | 置換(パターンなので%が使える) || \\\\$(words text) | text内の単語数を返す || \\\\$(word n, text) | text内のn番目の単語を返します || \\\\$(firstword text) | text内の最初の単語を返します || \\\\$(wordlist start\\_num, end\\_num, text) | start\\_numからend\\_numまでの単語列を返す || \\\\$(sort list) | 重複を取り除き並び替える || \\\\$(shell commad) | コマンドを実行して標準出力を返す(標準エラー出力は返さない) || \\\\$(wildcard pattern) | パターンを展開して返す || \\\\$(dir list) | listのファイル名を取り除きディレクトリ部分だけにして返す || \\\\$(notdir name) | nameのファイル名だけを返す || \\\\$(suffix name) | nameのサフィックスのリストを返す || \\\\$(basename name) | ファイルからサフィックスすを取り除いたものを返す || \\\\$(addsuffix suffix,name) | nameの各単語に対してsuffixを付加する || \\\\$(addprefix prefix,name) | nameの各単語に対してprefixを付加する || \\\\$(join prefix-list,suffix-list) | prefixとsuffixをひとつづつ結合してリストを返す |```\u003e 2\u003edev/null will redirect the error output so you don't see it, it will not prevent the shell to raise the error level. And the - sign in front of your shell command will tell GNU make to continue even if the error level is raised but it will not either prevent the shell to raise it.:= は即時評価= は遅延評価```"},{"name":"manifest.md","content":"[manifest.webmanifest or manifest.json · Issue #689 · w3c/manifest · GitHub](https://github.com/w3c/manifest/issues/689)```manifest.webmanifest{  \"short_name\": \"Todolist\",  \"name\": \"Hyperapp todolist\",  \"description\": \"Hyperapp 2.0 todo list app\",  \"display\": \"fullscreen\",  \"scope\": \"/hyperapp-todolist/\",  \"start_url\": \"/hyperapp-todolist/\",  \"theme_color\": \"#06D19C\",  \"background_color\": \"#323232\",  \"orientation\": \"portrait\",  \"dir\": \"ltr\",  \"lang\": \"en\",  \"icons\": [    {      \"src\": \"./assets/icon-180x180.png\",      \"sizes\": \"180x180\",      \"type\": \"image/png\"    },    {      \"src\": \"./assets/icon-192x192.png\",      \"sizes\": \"192x192\",      \"type\": \"image/png\"    },    {      \"src\": \"./assets/icon-512x512.png\",      \"sizes\": \"512x512\",      \"type\": \"image/png\"    }  ]}``````html\u003c!DOCTYPE html\u003e\u003chtml lang=\"en\"\u003e  \u003chead\u003e    \u003cmeta charset=\"utf-8\" /\u003e    \u003cmeta http-equiv=\"x-ua-compatible\" content=\"ie=edge,chrome=1\" /\u003e    \u003ctitle\u003eHyperapp todolist\u003c/title\u003e    \u003cmeta name=\"description\" content=\"Hyperapp 2.0 todo list app\" /\u003e    \u003clink rel=\"home\" href=\"https://loteoo.github.io/hyperapp-todolist/\" /\u003e    \u003cmeta      name=\"viewport\"      content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1\"    /\u003e    \u003clink rel=\"icon\" type=\"image/png\" href=\"./assets/favicon.png\" /\u003e    \u003clink      rel=\"canonical\"      href=\"https://github.com/loteoo/hyperapp-boilerplate\"    /\u003e    \u003c!-- Open graph --\u003e    \u003cmeta property=\"og:title\" content=\"Hyperapp todolist\" /\u003e    \u003cmeta property=\"og:description\" content=\"Hyperapp 2.0 todo list app\" /\u003e    \u003cmeta property=\"og:type\" content=\"website\" /\u003e    \u003cmeta      property=\"og:url\"      content=\"https://loteoo.github.io/hyperapp-todolist/\"    /\u003e    \u003cmeta property=\"og:image\" content=\"./assets/card.png\" /\u003e    \u003cmeta property=\"og:image:secure_url\" content=\"./assets/card.png\" /\u003e    \u003cmeta property=\"og:image:type\" content=\"image/png\" /\u003e    \u003cmeta property=\"og:image:width\" content=\"1200\" /\u003e    \u003cmeta property=\"og:image:height\" content=\"630\" /\u003e    \u003cmeta property=\"og:image:alt\" content=\"Hyperapp todolist\" /\u003e    \u003c!-- Twitter Card --\u003e    \u003cmeta name=\"twitter:card\" value=\"summary\" /\u003e    \u003cmeta      name=\"twitter:url\"      content=\"https://loteoo.github.io/hyperapp-todolist/\"    /\u003e    \u003cmeta name=\"twitter:title\" content=\"Hyperapp todolist\" /\u003e    \u003c!-- Android web app --\u003e    \u003clink rel=\"manifest\" href=\"./manifest.webmanifest\" /\u003e    \u003cmeta name=\"mobile-web-app-capable\" content=\"yes\" /\u003e    \u003cmeta name=\"theme-color\" content=\"#323232\" /\u003e    \u003c!-- IOS web app --\u003e    \u003cmeta name=\"apple-mobile-web-app-capable\" content=\"yes\" /\u003e    \u003cmeta name=\"apple-mobile-web-app-status-bar-style\" content=\"#323232\" /\u003e    \u003cmeta name=\"apple-mobile-web-app-title\" content=\"Hyperapp todolist\" /\u003e    \u003clink      rel=\"apple-touch-icon\"      sizes=\"180x180\"      href=\"./assets/icon-512x512.png\"    /\u003e    \u003c!-- Windows web app --\u003e    \u003cmeta name=\"msapplication-TileImage\" content=\"./assets/icon-512x512.png\" /\u003e    \u003cmeta name=\"msapplication-TileColor\" content=\"#323232\" /\u003e    \u003c!-- Hyperapp --\u003e    \u003cscript defer src=\"./app/index.js\"\u003e\u003c/script\u003e  \u003c/head\u003e  \u003cbody\u003e\u003c/body\u003e\u003c/html\u003e```"},{"name":"maxfile.md","content":"- [](https://elisabethirgens.github.io/notes/2019/12/ulimit-and-limit/)The annoyance I want to improveThe project I’m working on uses OpenShift, and apparently I need to ramp up the system-wide resources for Minishift to run happily. Specifically: increase the number of open files per process. I’ve set a thing in my .bashrc and run some commands and it’s all working fine. But after every restart, I get an error in a new shell and need to repeat the process. This is in my .bashrc file:ulimit -n 500000But after a reboot, the terminal will complain that:-bash: ulimit: open files: cannot modify limit: Invalid argumentWhen I check, I can see that the number has returned to 256:launchctl limit maxfilesmaxfiles 256 unlimitedThen I can run this command to increase it:sudo launchctl limit maxfiles 5000000 5000000And check that it increased:launchctl limit maxfilesmaxfiles 5000000 5000000"},{"name":"microservice.md","content":"- [What are microservices?](https://microservices.io/)- [ZOZOTOWN マイクロサービスプロジェクトにおける継続的な改善を支える CI/CD 戦略 - ZOZO Technologies TECH BLOG](https://techblog.zozo.com/entry/zozotown-cicd-strategy)"},{"name":"money-analisis-scheme.md","content":"- [](https://moneyforward.com/pages/premium)簿記の勉強する。確定申告について再度詳しく、payment service を決定する。経費用と、それ以外の使い分け。"},{"name":"mysql.md","content":"- [MySQL の LOCK TABLES とは？何をしているのか - Qiita](https://qiita.com/a-nishimura/items/8325ecad3edb2660abf1)- [MySQL :: MySQL 5.6 リファレンスマニュアル :: 21.29.4 INFORMATION_SCHEMA INNODB_TRX テーブル](https://dev.mysql.com/doc/refman/5.6/ja/information-schema-innodb-trx-table.html)- [MySQL :: MySQL 8.0 Reference Manual :: 13.3.6 LOCK TABLES and UNLOCK TABLES Statements](https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html)- [MySQL :: MySQL 8.0 Reference Manual :: 12.16 Information Functions](https://dev.mysql.com/doc/refman/8.0/en/information-functions.html)- [ストアドプロシージャの基本的ななにか - Qiita](https://qiita.com/setsuna82001/items/e742338eb93e3a48ba46)\u003e 21.29.4 INFORMATION_SCHEMA INNODB_TRX テーブル\u003e INNODB_TRX テーブルには、トランザクションがロックを待機しているかどうか、トランザクションが開始した時点、トランザクションが実行している SQL ステートメント (存在する場合) など、InnoDB 内部で現在実行している (読み取り専用トランザクションを除く) すべてのトランザクションに関する情報が含まれます。- [MySQL :: MySQL 8.0 Reference Manual :: 13.3.7 SET TRANSACTION Statement](https://dev.mysql.com/doc/refman/8.0/en/set-transaction.html)transaction in a stored procedure.- [ストアドプロシージャの基本的ななにか - Qiita](https://qiita.com/setsuna82001/items/e742338eb93e3a48ba46)[Do Not Pass This Way Again - The Grimoire](https://grimoire.ca/mysql/choose-something-else/)[第 134 回　 DDL と暗黙的なコミットについて：MySQL 道普請便り｜ gihyo.jp … 技術評論社](https://gihyo.jp/dev/serial/01/mysql-road-construction-news/0134)[]SHOW VARIABLES;- mysql_secure_installation- mysqladmin -u root password 'new-password'- [MySQL トラブルシューティング - ERROR 1045 (28000): Access denied for user \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; (using password: NO) - 長生村本郷 Engineers\u0026#39;Blog](https://kenzo0107.hatenablog.com/entry/2016/01/15/105803?_fsi=lVAPVbs5)"},{"name":"netcat.md","content":"## Netcat Syntax #### The most basic syntax of the Netcat utility takes the following form:```nc [options] host port```### By default, Netcat will attempt to start a TCP connection to the specified host and port. If you would like to establish a UDP connection, use the -u option:```nc -u host port```localhost```nc -l port```"},{"name":"netrw.md","content":"| 1 | 2 || --- | --- || j | 下に移動 || k | 上に移動 || Enter | ディレクトリの場合は移動、ファイルの場合はカレントバッファに開く || o | 水平分割で開く || v | 垂直分割で開く || - | 一つ上のディレクトリに移動 || u | undo、１つ前のディレクトリに戻る || U | redo、uで戻る前のディレクトリに戻る || d | ディレクトリを作成する || D | ディレクトリ・ファイルを削除する || mf | ファイルをマークする || mt | コピー・移動先のディレクトリをマークする || mc | mfしたファイルをmtしたディレクトリにコピーする || mm | mfしたファイルをmtしたディレクトリに移動する || I | ヘッダの表示トグル || i | ファイルツリーの表示形式を変更 || p | ファイルをプレビューする |"},{"name":"nextjs.md","content":"- [【Next.js】みんな next.confing.js にどんなプラグイン入れてる？](https://zenn.dev/aiji42/articles/1de8f9ea7b8a10)"},{"name":"nginx.md","content":"- [３つの nginx をうまく使い分けよう〜nginx、OpenResty、Tengine〜 | メルカリエンジニアリング](https://engineering.mercari.com/blog/entry/2016-05-25-170108/)- [ハイパフォーマンス ngx_lua | メルカリエンジニアリング](https://engineering.mercari.com/blog/entry/2015-11-25-170049/)- [lua-nginx-module を使いこなす - Qiita](https://qiita.com/kz_takatsu/items/e94805a8e3cc285f9b33)- [Nginx を OpenID Connect の Relying Party として実装する - Qiita](https://qiita.com/kg0r0/items/954549ff0ea59c411f8a)\u003e パフォーマンスやスケーラビリティが要求される様々なコンポーネントでnginxをヘビーに活用しています。例えば、コンテンツ配信／キャッシュ／リバースプロキシ／TLSターミネーション20,000 req/secオーバーのAPI（HTTPS）リクエストを捌くロードバランサgRPC、Apache Solr、Gaurun等のミドルウェアのためのロードバランサngx_luaによるログ分析基盤のフロントエンド、ロードバランサやリバースプロキシの拡張といったものです。メルカリではこれらのコンポーネントをnginxやOpenRestyで用途に応じて使い分けながら構築・運用しています。-? | -h - コマンドラインパラメータのヘルプを表示する。-c file - デフォルトのファイルの代わりに別の設定 file を使用する。-g directives - グローバル設定ディレクティブを設定する。例えば、nginx -g \"pid /var/run/nginx.pid; worker_processes `sysctl -n hw.ncpu`;\"-p prefix - nginx パスのプリフィックスを設定する。言い換えると、サーバファイルを保持するディレクトリ。(デフォルトの値は /usr/local/nginx です。)-q - 設定のテストの間のエラーではないメッセージを抑制する。-s signal - マスタープロセスに signal を送信する。引数の signal は以下の一つです:stop - 高速にシャットダウンするquit - gracefully にシャットダウンするreload - 設定の変更、新しい設定で新しい worker プロセスを開始、古い worker プロセスの gracefully シャットダウン。reopen - ログファイルを開きなおす-t - 設定ファイルをテストする: nginx は設定ファイルを正しい構文かをチェックします。それから設定ファイルの中で参照されたファイルを開こうとします。-T - -t と同じですが、さらに標準出力に設定ファイルをダンプします (1.9.2)。-v - nginx のバージョンを出力する。-V - nginx のバージョン、コンパイラバージョン、および設定パラメータを表示します。```sh\u003c ~/dev/Nginx \u003e nginx -p $pwd/ -tnginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is oknginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful\u003c ~dev/Nginx \u003e ps aux | grep nginx | grep -v /tmp/kis9a            76202   0.0  0.0  4277624    696 s004  S+   12:59PM   0:00.00 grep nginxkis9a            74857   0.0  0.0  4283720   1028   ??  S    12:57PM   0:00.00 nginx: worker processkis9a            74856   0.0  0.0  4283280    532   ??  Ss   12:57PM   0:00.00 nginx: master process nginx -p -tkis9a            73298   0.0  0.1  4316060  12060 s002  S+   12:54PM   0:02.78 nvim conf/nginx.conf```C10K 問題そこで、nginx や Node.js ではシングルスレッドで非同期 I/O に処理をすることにより、並行に処理を行を行うことで C10K 問題を解決しようとしました。| ファイル                       | 説明                             || ------------------------------ | -------------------------------- || /etc/nginx/nginx.conf          | メイン設定ファイル               || /etc/nginx/conf.d/default.conf | デフォルトサーバーの設定ファイル || /etc/nginx/conf.d/ssl/conf     | SSL の設定ファイル               || /etc/nginx/conf.d/virtual.conf | バーチャルホストの設定ファイル   || ディレクティブ     | 説明                                                   | コンテキスト              || ------------------ | ------------------------------------------------------ | ------------------------- || include            | 他の設定ファイルを読み込む                             | 全て                      || user               | ワーカープロセスの実行ユーザー                         | main                      || worker_processes   | ワーカープロセス数                                     | main                      || worker_connections | 1 つのワーカープロセスが同時に処理できるコネクション数 | events                    || log_format         | アクセスログの書式定義                                 | http                      || access_log         | アクセスログのパスとログレベル                         | http,server,location      || error_log          | エラーログファイルのパスとログレベル                   | main,http,server.location || listen             | リクエストを受け付けるポート番号                       | server                    || server_name        | サーバー名                                             | server                    || keepalive_requests | 一度の接続で受け付けることのできるリクエスト数の上限   | http,server,location      || keepalive_timeout  | キープアライブのタイムアウトまでの秒数                 | http,server,location      || server_tokens      | バージョン番号の表示                                   | http,server,location      || root               | ドキュメントルート                                     | http,server,location      || index              | インデックスファイル                                   | http,server,location      || autoindex          | インデックスリスト表示の on/off                        | http,server,location      || error_page         | エラーコードとエラーページノ URI                       | http,server,location      || rewrite            | リダイレクトの設定                                     | server,location           || fastcgi_pass       | FastCGI サーバへリクエストをプロキシする               |                           || SSL 関連のディレクティブ | 説明                                           || ------------------------ | ---------------------------------------------- || ssl                      | on なら有効                                    || ssl_certificate          | サーバー証明書ファイル、中間 CA 証明書ファイル || ssl_certificate_key      | サーバー秘密鍵ファイル                         || ssl_protocols            | バージョン                                     || ssl_ciphers              | 暗号アルゴリズム                               || リバースプロキシ関連のディレクティブ | 説明                                       || ------------------------------------ | ------------------------------------------ || proxy_pass                           | プロキシ先 URI                             || proxy_http_version                   | http のバージョン                          || proxy_set_header                     | プロキシ先に送られるリクエストヘッダの定義 |/var/www/html は、Web サーバーのデフォルトのルートフォルダーです。 Apache.conf ファイル（通常/etc/Apache/conf にあります）を編集し、DocumentRoot 属性を変更することで、任意のフォルダーに変更できます（ http：// httpd .Apache.org/docs/current/mod/core.html＃documentroot その情報について）\u003chttps://www.tecmint.com/useful-nginx-command-examples/\u003esystemctl start nginxsystemctl status nginxsystemctl stop nginxsudo systemctl reload nginxsudo systemctl enable nginx"},{"name":"nix.md","content":"|                    | Nix                                                                        | Docker                                                                                                                     || ------------------ | -------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- || 実行環境           | 通常のユーザー環境                                                         | コンテナ                                                                                                                   || 実行権限           | ユーザーと同じ権限                                                         | ルート権限                                                                                                                 || MacOS での利用     | MacOS のネイティブ(homebrew 的な立ち位置で使える。)                        | コンテナ内の Linux                                                                                                         || 再現性の担保方法   | 依存するファイルのハッシュで担保（実行したときによらず同じ結果になるはず） | ビルドしたときのスナップショットで担保                                                                                     || ビルドの再現性     | いつ実行しても同じものができる。                                           | 実行したときの最新のファイルがインストールされる。ダウンロードするファイルが違う可能性がある。                             || ビルドプロセス     | Nix 言語で記述：apt や yum は使えない。                                    | Dockerfile で記述：apt や yum が使える。                                                                                   || キャッシュする単位 | パッケージごと                                                             | スナップショット全体(各ビルドのステップごとにキャッシュができますが、一部を変更するとそれ以降はすべてやり直しになります。) |"},{"name":"nocode.md","content":"- [ノーコードは形を変えた現代の RPG ツクールなのではないか - mizdev](https://mizchi.dev/202006231329-think-about-nocode)"},{"name":"oldappjs.md","content":"```jsconst app = document.getElementById(\"app\");let memos = [];const main = async () =\u003e {  memos = (await getMemosJson()) || [];  marked.setOptions({    langPrefix: \"\",    highlight: function (code, lang) {      return hljs.highlightAuto(code, [lang]).value;    },  });  renderHeader();  renderLinks();  renderContent();};const renderLinks = async () =\u003e {  const linkContainer = document.createElement(\"div\");  linkContainer.setAttribute(\"id\", \"link-container\");  const linkSearch = document.createElement(\"input\");  linkSearch.setAttribute(\"id\", \"link-search\");  linkSearch.setAttribute(\"placeholder\", \"Search index\");  linkContainer.appendChild(linkSearch);  if (screen.width \u003c= 800) {    linkContainer.setAttribute(\"style\", \"display: none;\");  }  window.onresize = () =\u003e {    if (screen.width \u003c= 800) {      console.log(\"resize\");      linkContainer.setAttribute(\"style\", \"display: none;\");    }  };  const links = document.createElement(\"div\");  links.setAttribute(\"id\", \"links\");  memos.forEach((memo) =\u003e {    const link = document.createElement(\"div\");    link.setAttribute(\"onClick\", `onClickMemoLink('${memo.name}')`);    link.setAttribute(\"class\", \"link\");    link.append(memo.name);    links.appendChild(link);  });  linkContainer.appendChild(links);  app.appendChild(linkContainer);  linkSearch.addEventListener(    \"input\",    function (e) {      const oldLinks = document.getElementById(\"links\");      if (oldLinks) {        linkContainer.removeChild(oldLinks);      }      const links = document.createElement(\"div\");      links.setAttribute(\"id\", \"links\");      if (!e.target.value.trim() === \"\") {        const link = document.createElement(\"div\");        link.setAttribute(\"onClick\", `onClickMemoLink('${memo.name}')`);        link.setAttribute(\"class\", \"link\");        link.append(memo.name);        links.appendChild(link);      } else {        memos.forEach((memo) =\u003e {          if (~memo.name.indexOf(e.target.value)) {            const link = document.createElement(\"div\");            link.setAttribute(\"onClick\", `onClickMemoLink('${memo.name}')`);            link.setAttribute(\"class\", \"link\");            link.append(memo.name);            links.appendChild(link);          }        });      }      linkContainer.appendChild(links);    },    false  );};const onClickMemoLink = (name = \"\") =\u003e {  const memo = memos.find((memo) =\u003e memo.name === name);  renderContent(memo);};const renderHeader = () =\u003e {  const header = document.createElement(\"div\");  header.setAttribute(\"id\", \"header\");  app.appendChild(header);  const headerLink = document.createElement(\"a\");  headerLink.setAttribute(\"href\", \"/kis9a\");  headerLink.append(\"HOME\");  header.appendChild(headerLink);  const burgerButton = document.createElement(\"div\");  burgerButton.setAttribute(\"onClick\", \"onClickBerger()\");  burgerButton.setAttribute(\"id\", \"burger-button\");  burgerButton.append(\"-_-\");  header.appendChild(burgerButton);  // TODO search memo content string  // const memoSearch = document.createElement(\"input\");  // memoSearch.setAttribute(\"type\", \"text\");  // memoSearch.setAttribute(\"id\", \"memo-search\");  // header.appendChild(memoSearch);};const onClickBerger = () =\u003e {  const linkContainer = document.getElementById(\"link-container\");  if (!linkContainer || linkContainer.style.display === \"none\") {    console.log(\"hello\");    linkContainer.style.display = \"block\";  } else {    linkContainer.style.display = \"none\";  }  const header = getElementById(\"header\");  header.append(linkContainer);};const renderContent = (memo = { name: \"\", content: \"\" }) =\u003e {  const oldContent = document.getElementById(\"content\");  const oldLabel = document.getElementById(\"label\");  if (oldContent) {    app.removeChild(oldContent);    app.removeChild(oldLabel);  }  const label = document.createElement(\"h1\");  label.setAttribute(\"id\", \"label\");  label.append(memo.name);  app.appendChild(label);  const content = document.createElement(\"div\");  content.setAttribute(\"id\", \"content\");  content.innerHTML = marked(memo.content);  app.appendChild(content);};const getMemosJson = async () =\u003e {  const memosJson = await fetch(`./memos.json`).then((response) =\u003e    response.text()  );  return JSON.parse(memosJson);};main();```"},{"name":"oneliner.md","content":"# [git] 'tmp-' で始まるブランチを全て削除git branch --list \"tmp-*\" | cut -b 3- | xargs -n 1 -I{} git branch -D {}curl -s https://api.github.com/users/kis9a/repos | grep \\\"clone_url\\\" | awk '{print $2}' | sed -e 's/\"//g' -e 's/,//g' | xargs -n1 git clonecurl -s https://api.github.com/users/$target_user/gists | grep \\\"raw_url\\\" | awk '{print $2}' | sed -e 's/\"//g' -e 's/,//g' | xargs -n1 curl -Oxargs -n 1 -P 4 curl -OL \u003c urllist.txtcurl -Ls $URL | xmllint --html --xpath '//img/@src' - | xargs -n 1 | cut -d= -f2 | sed 's/^\\/\\//https:\\/\\//' | xargs -n 1 curl -L#Oopen \"$(brew --prefix sfmono-square)/share/fonts\"# Convert all jpg files to png files:fd -e jpg -x convert {} {.}.png# Unpack all zip files (if no placeholder is given, the path is appended):fd -e zip -x unzip# Convert all flac files into opus files:fd -e flac -x ffmpeg -i {} -c:a libopus {.}.opus# Count the number of lines in Rust files (the command template can be terminated with ';'):fd -x wc -l \\; -e rs# if statement curl -s \"https://api.github.com/users/kis9a/repos\" | jq '.[] | select(.fork == false) | .'"},{"name":"openresty.md","content":"OpenResty は nginx のほかに ngx_lua をはじめとする C で書かれた各種サードパーティモジュールと ngx_lua の API を利用した resty モジュール、そして Lua/LuaJIT で構成されています。OpenResty に含まれている nginx 自体は本家の nginx と基本同じなので、別に OpenResty を利用しなくても自分で ngx_lua を組み込んだり、サーバ上に resty モジュールを配布することで似たような環境を構築することは可能ですが、OpenResty であれば主要なモジュールやライブラリが./configure、make、make install の一連の流れですべてゴソッとインストールされますし、OpenResty の configure スクリプトは nginx の configure スクリプトを継承したものなので nginx の configure オプションをほぼそのまま利用することもできます。"},{"name":"opensource.md","content":"- ドキュメントが必要な理由は新参者がプロジェクトに参加しやすくするため。- 新参者がコミュニティのウェブサイトを訪問して 30 秒で参加するかどうかを決めるため、最初の声明文は重要になる。- - プロジェクトを世に出すにあたって最初に見てもらうところがウェブサイトであり、その印象がプロジェクトにも持ち込まれるため、見た目もコード以上にプロジェクトを成功させる重要な要因の一つになる。- - ハードウェアアーキテクチャの差がなくなり、ソフトウェアで差別化を図って売っていかなければ生き残れなくなったメーカーは、ソフトウェアの改変を規制し始めた。それがオープンソースの始まり。- - ガイドラインを作成するだけではダメで、それを必要としている人たち、プロジェクトに関わりのない人たちも含めて目に付きやすいところに掲げ、明確にわかるようにしなければならない。- - 新参者にライセンスについて探させない、マウスクリックさせない、負担をかけないように、予めライセンスはソースと README に書いておく。- - 本来一匹狼である開発者たちを結びつける唯一の原動力は、個別にやるよりも協調したほうが、よりよいものができるという共通認識のみ。- - 開発者向けには開発者向けのガイドラインを用意する- - 重要な決定を内輪でこっそり行うのは、まるでそのプロジェクトに「貢献者よけスプレー」を振りまくようなもの、特別に隠す必要があるもの以外はすべて公開しなければならない。- - プロジェクトの安定性は、開発者の間で徐々にできあがっていく集合知によってもたらされる。- - ボランティアの人たちの真の行動原理を理解しておけば、うまくやっていけるでしょう。- - 複数の人間が資源を共有して作業を進めていく以上、政治的な話は避けることができない。誰かがアクションを起こせば誰かが影響を受ける。- - 新入りのメンバーが困っていることに気づいたら、それはガイドラインをきちんと設定すべき事案なのに、それがまだできていないという証拠。新入りが劣っているというわけではない。- - コミット権を与えるか否かを決める主要な条件は、技術力ではなくその人が正しい状況判断ができるかどうかです。技術は後で勉強すればいいのです。- - ボランティアの集まりにおいては、いわゆるソーシャルスキル、つまり「集団の中でうまくやっていく能力」は技術力と同じくらい重要で、技術が優れているだけでは私たちは彼をコミッターにはしないでしょう。- - ひとつの管理作業を 2 人に任せると、その 2 人の間のコミュニケーションというオーバーヘッドが発生します。上手く作業が進む場合もあるし、お互い責任をなすりつけあって時間が浪費される危険性もあるでしょう。- - マネージャーの仕事で重要なのは、「誰かが自分の担当分野の作業をしていることに気づいたら、その人がうまくやっていけるように自分の方針を伝える。そして、みんなの作業が競合しないようにする」ということ。- - プロジェクトには、パッチマネージャー、翻訳マネージャー、ドキュメントマネージャー、バグマネージャー、リリースマネージャーがいます。これらの役割というのはあくまでも責任の範囲に関するものであり、独占させるためのものではない。- - 平等主義や協力体制を壊してしまう縄張り主義の登場を防ぐために、多くのプロジェクトではソースファイルから作者名や保守担当者名を取り除く方式を採用している。- - ボランティアを管理することも一種の「技術」であるといえる。- - セキュリティ脆弱性の処理のしかたは、攻撃者がコミットログをチェックしている可能性があるので、、修正が完了するまではバグのことを口外せず、バグがあったことをアナウンスすると同時に修正プログラムを公開するようにする。- - 1 日にメールが数百件以上飛び交うほどの大きなプロジェクトになると、ツールとしてのメーリングリストのシステムは破たんする。そして古参の開発者は質問の質が低いメールをノイズと感じるようになりコミュニティを去ってしまい新参者だけが残る。- - たくさんの意見が行きかい「誰がいつ何を言ったのか」を追いかけるのが面倒になってしまうということ知っていて、あえて長文を送り付け議事進行妨害をする口やかましい少数派がいることがあるので気をつける。- - 初期段階で開発言語を決めるとき、それが他の言語より優れているからではなく、それがいちばん書き慣れているからという理由で選択すると、宗教戦争に陥らずに済む。- - ハッカー界、そして特にフリーソフトウェア文化においては、wonderful hacker のような肩書きに頼る人は排他的な臆病者とみなされます。- - 競合するプロジェクトについて否定的な意見を述べるのはやめる。理由は 1.建設的でないフレームウォーが起こりがち 2.将来競合プロジェクトで働く人が出る可能性がある 3.競合相手が実際に優れている点を無視し客観的な判断ができなくなるから。- - 口コミによるマーケティングも無視はできない。- - コミュニティにお金を払ったとしても自分が望んだ機能をつけてもらえるとは限らないし、逆にボランティアのモチベーションが下がりプロジェクトから去ってしまうこともある。- - 投票は問題解決の 1 つの手段ではあるが、その瞬間から創造的な考えをやめさせてしまうことになるので、問題解決のあらゆる議論や手段が全てなくなるまで安易に投票に頼ってはいけない。- - オープンソースプロジェクトは複製すればすぐ別のプロジェクトにすることが容易なので全てを決定する独裁者は存在せず、民主主義的な意思決定のしかたをする。同様にプロジェクトは分裂しやすい。"},{"name":"opp.md","content":"### Class```class クラス名 {    プロパティ名： プロパティのデータ型    constructor(コンストラクタの引数: コンストラクタの引数のデータ型){        ...    }    関数(引数: 引数のデータ型): 返り値のデータ型 {        ...    }}```### アクセス修飾子public：クラスの外からアクセス可（デフォルト）protected：同じクラスのメンバー、派生クラス(継承先のクラス)のメンバーからのみアクセス可private：同じクラスからのみアクセス可### getter, setter```//getterget プロパティ名(): 返り値のデータ型 {    return this.プライベートプロパティ名}//setterset プロパティ名(引数: プロパティのデータ型){    this.プライベートプロパティ名 = 引数;}```### staticstatic は・インスタンスを生成しなくても静的メソッドを実行できる。・親クラスから派生したインスタンスがプロパティを共有できる。### 継承```class クラス名 extends 継承元クラス名 {    ...}```"},{"name":"order.md","content":"| O 記法                                                                                                                                                                                                    | 概要                                                                            | 使用例 || --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------- | ------ || O(1)                                                                                                                                                                                                      | **\u003c定数時間\u003e**                                                                  || 処理時間がデータ量に依存しない。必ず一発で取得できる。                                                                                                                                                    | 配列要素へのアクセス、ハッシュテーブルによるデータ検索、連結リストへの追加/削除 || O(logN)                                                                                                                                                                                                   | **\u003c対数時間\u003e**                                                                  || 処理をひとつ行うたびに処理対象を何割か減らせるようなアルゴリズム。データ量が増えても計算時間がほとんど増えない。多くの場合、これ以上の改善はする必要はない。                                              | ソート済み配列の二分探索                                                        || O(N)                                                                                                                                                                                                      | **\u003c線形時間\u003e**                                                                  || データ量の分だけ時間がかかる。for ループ１回分。N 回もしくは N に比例する回数以内のループで処理が終わる場合。                                                                                             | 非ソート配列の探索                                                              || O(NlogN)                                                                                                                                                                                                  | **\u003c準線形、線形対数時間\u003e**                                                      || ちょっと重い O(N)程度。マージソートのように二分木でデータを分割し、かつそれらをリニアサーチするようなアルゴリズムの計算量。二分木のオーダー(logN)× リニアサーチのオーダー(N)をかけあわせて NlogN になる。 | クイックソート、マージソート、ヒープソート                                      || O(N^2)                                                                                                                                                                                                    | **\u003c二乗時間\u003e**                                                                  || 要素からすべての組み合わせのペアについて調べるようなアルゴリズム。工夫しないソート処理など。二重の for ループ。これ以上は処理が遅すぎて使いにくい。                                                       | 挿入ソート、バブルソート                                                        || O(N^3)                                                                                                                                                                                                    | **\u003c多項式時間\u003e**                                                                || 三重ループを伴う配列全体の走査。                                                                                                                                                                          | 行列計算                                                                        || O(k^N)                                                                                                                                                                                                    | **\u003c指数時間\u003e**                                                                  || 要素を取り出すときのすべての組み合わせについて調べるようなアルゴリズム。N 軒の家をどの順序で回ったら最短距離になるか。                                                                                    | ルービックキューブの総当たりによる解法                                          || O(N!)                                                                                                                                                                                                     | **\u003c階乗時間\u003e**                                                                  || N の階乗に比例した時間。                                                                                                                                                                                  | 巡回セールスマン問題の総当たりによる解法                                        |"},{"name":"organization.md","content":"- [ティールな組織の四天王 - Qiita](https://qiita.com/yasuabe2613/items/8629babd67ef539d0bb2)### 自主経営 〜 self-management組織の構成メンバーが自己組織的に方向性を定め、状況に応じて自律的に変化・進化しながら業務を遂行する組織運営。ピラミッド型の序列や中間管理職もないため、購買などでの上司決裁から出世階段を登るためのエネルギー浪費まで、いろいろ無駄がなくなる。ただしヒエラルキーがないといっても悪平等 1 とは違って、経験や得意分野により、その都度役割分担（リーダーシップも含めて）が最適に形成される。意思決定などでも、従来とは違った知恵と工夫を凝らしたり、学術的に確立した手順を踏んだりするなど、単純な多数決とも行きあたりばったりなカオスとも異なる。### 全体性 〜 wholeness仕事用の自分とプライベートな自分を分離せず、人格全体で働くことを良しとする。仕事だからと割り切って、機械の歯車になって自己を抑圧する態度 2 は、本来の発揮できる能力の阻害要因と捉える。「全体」といっても滅私奉公や自己犠牲とは逆であり、かと言ってもちろんエゴとも別物で、個人と組織の方向性（あるいは魂が）が一致するからこそ共に働くという考え方。従ってティールな組織ではこの一致が採用時にも特に重視される（お互いに）。また個人だけではなく組織としても全体性の回復が追求される。### 存在目的 〜 evolutionary purpose3組織の価値観や方向性のことだが、ティール組織では、利益 4 や市場シェア、なんなら株主や組織の存続そのものよりも高優先とされるのが従来型組織と異なる。額に入れて飾って終わりの社是や社訓とは違って、常に「存在目的に耳を傾け」て感じ取り、行動や変化が組織全体に伝播する事が要求される。|               |                                                    || ------------- | -------------------------------------------------- || 雇用形態:     | 正社員のみ                                         || 勤務地:       | 東京都台東区台東 2-10-2 竹田ビル 4F                || 勤務時間:     | 10:00 - 13:00、14:00 ~ 17:00 (6 時間労働)          || 休日:         | 完全週休 2 日、祝日、夏休み(2 日)、冬休み(変動)    || 有給休暇:     | 試用期間終了時に 20 日支給、毎年 20 日支給         || 給料日:       | 当月分を翌月 10 日に支給。休日に当たるときは前倒し || 給与:         | 正社員全員同一額                                   || 評価:         | 評価制度なし                                       || 昇給:         | 会社の業績により判断。保証なし                     || 交通費:       | 1 ヶ月あたり最大 3 万円が上限                      || 賞与:         | 会社の業績により判断。10 月末に支給。最低保証なし  || 法定福利厚生: | 社会保険、厚生年金、労働保険、雇用保険             || 退職金:       | 退職金制度あり                                     || 勤怠:         | 社内チャットツールへの書き込み                     || 健康診断:     | 年 1 回人間ドックへ。                              || 副業:         | 業務に支障が無い範囲であれば可                     || 遠隔勤務:     | 条件付き採用                                       |"},{"name":"permission.md","content":"| 種別 | 意味 || --- | --- || - | ファイル || d | ディレクトリ || l | シンボリックリンク || モード(数字) | モード(アルファベット) | 権限 || --- | --- | --- || 4 | r | 読み取り || 2 | w | 書き込み || 1 | x | 実行 || 変更対象 | 意味 || --- | --- || u | ユーザー || g | グループ || o | その他 || a | すべて || 変更方法 | 意味 || --- | --- || = | 指定した権限にする || + | 指定した権限を付与する || - | 指定した権限を除去する || 変更内容 | 意味 || --- | --- || r | 読み取り || w | 書き込み || x | 実行 |- [GitHub - kis9a/dotfiles](https://github.com/kis9a/dotfiles)| 種別 | 概要 || --- | --- || オーナ－ | ファイル/ディレクトリの所有者のアクセス権 || グループ | ファイル/ディレクトリの所有グループに所属しているユーザーのアクセス権 || その他 | オーナーでも所有グループでもないユーザーのアクセス権 || アスセス権 | 2進数 | 8進数 || --- | --- | --- || rwx | 111 | 7 || rw- | 110 | 6 || r-x | 101 | 5 || r-- | 100 | 4 || -wx | 011 | 3 || -w- | 010 | 2 || --x | 001 | 1 || --- | 000 | 0 || 権限 | 数値 | 概要 || --- | --- | --- || rw-r--r-- | 644 | オーナー以外は読み取り専用 || rw-rw-rw- | 666 | テキストファイルなど || rwxr-xr-x | 755 | 実行スクリプトなど |HTMLファイル , 画像ファイル →　６４４ rw-r--r--CGI実行ファイル →　７５５ rwxr-xrCGIが格納されているディレクトリ → ７５５ rwxr-xr-xCGI　JavaScript のライブラリ →　６４４ rw-r--r--ログなどの保存用ファイル →　６６６ rw-rw-rw-```$ ls -ldrwxr-xr-x. 20 root  root  2077 Jul  5 14:34 bin/cat```\u003c!--{{{--\u003e表示\t意味d\tファイルタイプrwxr-xr-x.\tファイルモード20\tリンク数root\tファイルの所有者（オーナー）root\tファイルが所属する所有グループ2077\tサイズJul　5　 4:34\tタイムスタンプbin/cat\tファイル名もしくはディレクトリ名記号\tファイルタイプ-\t通常ファイルd\tディレクトリl\tシンボリックリンク記号\t意味r\t読み取り(read)w\t書き込み(write)x\t実行(execute)ユーザ種別\t読み取り\t書き込み\t実行　　オーナー　　　\t許可\t許可\t許可rootグループに所属するユーザ\t許可\t未許可\t許可その他のユーザ\t許可\t未許可\t許可記号\t意味r\t読み取り：ディレクトリに含まれるファイル一覧の取得w\t書き込み：ディレクトリの下にあるファイル・ディレクトリの作成・削除x\t実行：ディレクトリをカレントディレクトリにする```chmod u+w file.txt```記号\t意味u(user)\tオーナーg(group)\tグループo(other)\tその他のユーザーa(all)\tugo全て記号\t意味+\t権限を追加する-\t権限を禁止する=\t指定した権限と等しくする意味　\t数字読み取り(r)\t4書き込み(w)\t2実行(x)「-rw-r--r--」や「drwxr-xr-x」の先頭の謎の10文字についてですが、最初の１文字目はファイル種別を表しています。-rw-r--r--種別\t意味-\tファイルd\tディレクトリl\tシンボリックリンク2文字目から4文字目はファイルの所有者に対する権限を表し、5文字目から7文字目はファイルの所有グループに対する権限を表し、8文字目から10文字目はその他に対する権限を表しています\u003c!--}}}--\u003e"},{"name":"php-fpm.md","content":"PHP: FastCGI Process Manager (FPM) - ManualFPM ( FastCGI Process Manager ) は PHP の FastCGI 実装のひとつで、 主に高負荷のサイトで有用な追加機能を用意しています。/etc/php5/fpm/pool.d/www.conf```; The address on which to accept FastCGI requests.; Valid syntaxes are:;   'ip.add.re.ss:port'    - to listen on a TCP socket to a specific address on;                            a specific port;;   'port'                 - to listen on a TCP socket to all addresses on a;                            specific port;;   '/path/to/unix/socket' - to listen on a unix socket.; Note: This value is mandatory.; listen = /var/run/php5-fpm.sock; nginxのsites-available/defaultのfastcgi_passと同じpassにする;listen = 127.0.0.1:9000;listen = /var/run/php5-fpm.sock```/etc/nginx/nginx.conf```# デフォルトサーバの設定server {    # バーチャルサーバが使用するアドレス、ポートを指定    listen 80 default_server;    # サーバの公開ディレクトリを指定    # $document_root の値になる    root /var/www;    # インデックスページを指定    index index.php index.html index.htm;    # バーチャルサーバで使用するホスト名を指定    server_name localhost;    # URIごとにどのファイルを配信するか設定    location / {        # 指定したパスにファイルが存在するかどうか        if (-f $request_filename) {            # キャッシュの有効期限を設定            expires 30d;            break;        }    }    location ~ [^/]\\.php(/|$) {        # PATH_INFO 部の分割に使用する正規表現を指定        # 一つ目 ( .+\\.php ) は $fastcgi_script_name の値になり、二つ目 ( /.+ ) は $fastcgi_path_info の値になる        fastcgi_split_path_info ^(.+\\.php)(/.+)$;        if (!-f $document_root$fastcgi_script_name) {            return 404;        }        # FastCGI サーバへリクエストをプロキシする        #fastcgi_pass 127.0.0.1:9000;                #fastcgi_pass unix:/var/run/php5-fpm.sock;        # スラッシュで終わる URI の後に追加されるファイル名を設定        # $fastcgi_script_name の値になる        fastcgi_index index.php;        # 設定ファイルを読み込む        include fastcgi_params;        # FastCGI サーバに渡されるべきパラメータを設定        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        fastcgi_param PATH_INFO $fastcgi_path_info;        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;    }}```"},{"name":"php.md","content":"$\\_SESSIONセッションは、シンプルな方法で個々のユーザーのデータを格納する仕組みで、 個々のユーザーに対して一意なセッション ID を用意します。 これを用いて、複数ページにまたがるリクエストの間で状態の情報を永続させることができます。 セッション ID をブラウザに送信するときには、通常はセッションクッキーを利用します。 また、その ID を使って既存のセッションデータを取得します。 その ID やセッションクッキーが存在しなければ PHP に対して新たなセッションを作るよう伝え、 新たなセッション ID を生成します。セッションの処理の流れは単純です。セッションを開始すると、 PHP はまず、(通常はセッションクッキーから受け取る) ID を使って既存のセッションを取得しようとします。 ID を受け取らなかった場合は新しいセッションを作成します。 セッションを開始すると、PHP はスーパーグローバル $\\_SESSION にすべてのセッションデータを格納します。PHP スクリプトの処理が終了するときには、 スーパーグローバル $\\_SESSION の中身を自動的に受け取ってシリアライズし、 ストレージに送信します。この一連の操作にはセッション保存ハンドラを使います。- [【PHP 超入門】Cookie とセッションについて - Qiita](https://qiita.com/7968/items/ce03feb17c8eaa6e4672)[PHP のセッションを使ったログイン認証はなぜ安全なのか？ | あぱーブログ](https://blog.apar.jp/php/12373/)"},{"name":"plantuml.md","content":"- [GoのコードからPlantUMLコードを生成する静的解析ツールを作っている - 日記マン](https://i101330.hatenablog.com/entry/2019/04/14/205522)# plantumlhttps://plantuml.com/sequence-diagram\u003e\u003chttps://zenn.dev/kitabatake/articles/ff586edd162789862d71\u003e\u003chttps://qiita.com/ogomr/items/0b5c4de7f38fd1482a48\u003e\u003chttps://qiita.com/sky0621/items/8b6e88f4327b42ade5d7\u003e\u003chttps://qiita.com/munieru_jp/items/088dfc3e5e91b5ea17c3\u003e@startumlBob -\u003e Alice : hello@enduml---@startumlclass ユーザーclass 記事class コメントclass マガジンclass タグclass ジャンルclass 支払先 {- 銀行コード- 支店コード- 口座番号  }  note left of 支払先 : サービス上で得た報酬を振り込む先の情報class 個人支払先 {- 姓- 名  }  class 法人支払先 {- 法人名  }note top of カード情報 : サービス上で支払を行うための情報class カード情報 {- カード番号- カード名義  }  ユーザー \"1\" -up- \"0..1\" カード情報ユーザー \"1\" -up- \"0..1\" \"支払先\"\"個人支払先\" --|\u003e \"支払先\"\"法人支払先\" --|\u003e \"支払先\"ユーザー \"1\" -- \"_\" 記事記事 \"1\" -- \"_\" コメントユーザー \"1\" -- \"\\*\" コメントジャンル \"1.._\" -- \"_\" 記事タグ \"_\" -- \"_\" 記事マガジン \"0..1\" -- \"\\*\" 記事package リアクション {class サポート { - サポートするユーザー - サポートされるユーザー - 金額}ユーザー \"1\" --\u003e \"_\" サポートサポート \"_\" --\u003e \"1\" ユーザー    class フォロー {        - フォローするユーザー        - フォローされるユーザー    }    (ユーザー, ユーザー).. フォロー    class スキ    ユーザー \"1\" -- \"*\" スキ    スキ \"*\" -- \"1\" 記事}class SNS アカウントユーザー \"1\"-up-\"\\*\" SNS アカウントclass Twitter アカウントclass Facebook アカウントTwitter アカウント --|\u003e SNS アカウントFacebook アカウント --|\u003e SNS アカウント@enduml```Cross platform (macos/linux/windows)Synchronised scrollingFast asynchronous updatesKatex for typesetting of mathPlantumlMermaidChart.jssequence-diagramsflowchartdotTocEmojiTask listsLocal imagesFlexible configuration```@startuml' 可視性のアイコンを非表示にするskinparam classAttributeIconSize 0' モノクロにするskinparam monochrome true' 影をなくすskinparam shadowing false' 手描き風にするskinparam handwritten trueclass 車 { +車種 +ナンバープレート +走る() +止まる() +曲がる()}note left: 車class タイヤ {}class ドライバー { +アクセルを踏む() +ブレーキを踏む() +ハンドルを切る()}class 運転免許証 {}車 \"1\" \\*-- \"4\" タイヤ車 -- ドライバードライバー \"1\" o-- \"1\" 運転免許証@enduml"},{"name":"port.md","content":"典型的なポート番号:- FTP : 20~21- HTTP : 80 (URL 上で省略した場合は 80 番にアクセスする)- HTTPS : 443 (URL 上で省略した場合は 443 番にアクセスする)- SSH : 22 (リモートログイン)- SMTP : 25 (メール送受信)- DNS : 53 (ドメイン名解析)- TCP 20 : FTP (データ)- TCP 21 : FTP (制御)- TCP 22 : SSH- TCP 23 : Telnet- TCP 25 : SMTP- UDP 53 : DNS- UDP 67 : DHCP（サーバ）- UDP 68 : DHCP（クライアント）- TCP 80 : HTTP- TCP 110 : POP3- UDP 123 : NTP- TCP 443 : HTTPS1 凡例2 ウェルノウンポート番号 (0–1023)3 登録済みポート番号 (1024–49151)4 動的・プライベート ポート番号 (49152–65535)5 関連項目6 出典・脚注7 外部リンク凡例\u003chttps://ja.wikipedia.org/wiki/TCPやUDPにおけるポート番号の一覧\u003e"},{"name":"posix-cron.md","content":"[Crontab.guru - The cron schedule expression editor](https://crontab.guru/)```This example triggers the workflow every day at 5:30 and 17:30 UTC:on:  schedule:    # * is a special character in YAML so you have to quote this string    - cron:  '30 5,17 * * *'Cron syntax has five fields separated by a space, and each field represents a unit of time.┌───────────── minute (0 - 59)│ ┌───────────── hour (0 - 23)│ │ ┌───────────── day of the month (1 - 31)│ │ │ ┌───────────── month (1 - 12 or JAN-DEC)│ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)│ │ │ │ ││ │ │ │ ││ │ │ │ │* * * * *You can use these operators in any of the five fields:``````// 毎日毎時 30 分 (UTC) に実行する:30 * * * *// 毎日 10:45 (UTC) に実行する:45 10 * * *// 3 日毎に 1 回 08:00 (UTC) に実行する:0 8 */3 * *// 毎週月曜日の 15:00 (UTC) に実行する:0 15 * * 1// Every Monday at 1PM UTC (9AM EST)0 13 * * 1// At the end of every day0 0 * * *// Every 10 minutes*/10 * * * *```"},{"name":"posix.md","content":"admin - create and administer SCCS files (DEVELOPMENT)alias - define or display aliasesar - create and maintain library archivesasa - interpret carriage-control charactersat - execute commands at a later timeawk - pattern scanning and processing languagebasename - return non-directory portion of a pathnamebatch - schedule commands to be executed in a batch queuebc - arbitrary-precision arithmetic languagebg - run jobs in the backgroundc99 - compile standard C programscal - print a calendarcat - concatenate and print filescd - change the working directorycflow - generate a C-language flowgraph (DEVELOPMENT)chgrp - change the file group ownershipchmod - change the file modeschown - change the file ownershipcksum - write file checksums and sizescmp - compare two filescomm - select or reject lines common to two filescommand - execute a simple commandcompress - compress datacp - copy filescrontab - schedule periodic background workcsplit - split files based on contextctags - create a tags file (DEVELOPMENT, FORTRAN)cut - cut out selected fields of each line of a filecxref - generate a C-language program cross-reference table (DEVELOPMENT)date - write the date and timedd - convert and copy a filedelta - make a delta (change) to an SCCS file (DEVELOPMENT)df - report free disk spacediff - compare two filesdirname - return the directory portion of a pathnamedu - estimate file space usageecho - write arguments to standard outputed - edit textenv - set the environment for command invocationex - text editorexpand - convert tabs to spacesexpr - evaluate arguments as an expressionfalse - return false valuefc - process the command history listfg - run jobs in the foregroundfile - determine file typefind - find filesfold - filter for folding linesfort77 - FORTRAN compiler (FORTRAN)fuser - list process IDs of all processes that have one or more files opengencat - generate a formatted message catalogget - get a version of an SCCS file (DEVELOPMENT)getconf - get configuration valuesgetopts - parse utility optionsgrep - search a file for a patternhash - remember or report utility locationshead - copy the first part of filesiconv - codeset conversionid - return user identityipcrm - remove an XSI message queue, semaphore set, or shared memory segment identifieripcs - report XSI interprocess communication facilities statusjobs - display status of jobs in the current sessionjoin - relational database operatorkill - terminate or signal processeslex - generate programs for lexical tasks (DEVELOPMENT)link - call link functionln - link fileslocale - get locale-specific informationlocaledef - define locale environmentlogger - log messageslogname - return the user's login namelp - send files to a printerls - list directory contentsm4 - macro processormailx - process messagesmake - maintain, update, and regenerate groups of programs (DEVELOPMENT)man - display system documentationmesg - permit or deny messagesmkdir - make directoriesmkfifo - make FIFO special filesmore - display files on a page-by-page basismv - move filesnewgrp - change to a new groupnice - invoke a utility with an altered nice valuenl - line numbering filternm - write the name list of an object file (DEVELOPMENT)nohup - invoke a utility immune to hangupsod - dump files in various formatspaste - merge corresponding or subsequent lines of filespatch - apply changes to filespathchk - check pathnamespax - portable archive interchangepr - print filesprintf - write formatted outputprs - print an SCCS file (DEVELOPMENT)ps - report process statuspwd - return working directory nameqalter - alter batch jobqdel - delete batch jobsqhold - hold batch jobsqmove - move batch jobsqmsg - send message to batch jobsqrerun - rerun batch jobsqrls - release batch jobsqselect - select batch jobsqsig - signal batch jobsqstat - show status of batch jobsqsub - submit a scriptread - read a line from standard inputrenice - set nice values of running processesrm - remove directory entriesrmdel - remove a delta from an SCCS file (DEVELOPMENT)rmdir - remove directoriessact - print current SCCS file-editing activity (DEVELOPMENT)sccs - front end for the SCCS subsystem (DEVELOPMENT)sed - stream editorsh - shell, the standard command language interpretersleep - suspend execution for an intervalsort - sort, merge, or sequence check text filessplit - split files into piecesstrings - find printable strings in filesstrip - remove unnecessary information from strippable files (DEVELOPMENT)stty - set the options for a terminaltabs - set terminal tabstail - copy the last part of a filetalk - talk to another usertee - duplicate standard inputtest - evaluate expressiontime - time a simple commandtouch - change file access and modification timestput - change terminal characteristicstr - translate characterstrue - return true valuetsort - topological sorttty - return user's terminal nametype - write a description of command typeulimit - set or report file size limitumask - get or set the file mode creation maskunalias - remove alias definitionsuname - return system nameuncompress - expand compressed dataunexpand - convert spaces to tabsunget - undo a previous get of an SCCS file (DEVELOPMENT)uniq - report or filter out repeated lines in a fileunlink - call the unlink functionuucp - system-to-system copyuudecode - decode a binary fileuuencode - encode a binary fileuustat - uucp status enquiry and job controluux - remote command executionval - validate SCCS files (DEVELOPMENT)vi - screen-oriented (visual) display editorwait - await process completionwc - word, line, and byte or character countwhat - identify SCCS files (DEVELOPMENT)who - display who is on the systemwrite - write to another userxargs - construct argument lists and invoke utilityyacc - yet another compiler compiler (DEVELOPMENT)zcat - expand and concatenate data"},{"name":"postgres.md","content":"Creating user, database and adding access on PostgreSQLCreating user. $ sudo -u postgres createuser \u003cusername\u003eCreating Database. $ sudo -u postgres createdb \u003cdbname\u003eGiving the user a password. $ sudo -u postgres psql. ...Granting privileges on database. psql=# grant all privileges on database \u003cdbname\u003e to \u003cusername\u003e ;\\du```$ psql -d postgresd : データベースを指定（未指定でログインユーザー名のデータベース）U : ユーザーを指定（未指定だとログインユーザー）h : ホスト名（未指定だとlocalhost)データベース一覧$ psql -lユーザー一覧表示# \\duデータベース一覧# \\lユーザーを作る# create user username;CREATE ROLEユーザーにパスワードを指定する# \\password username（エンターキー）Enter new password:Enter it again:データベースを作る# create database db_name;CREATE DATABASE接続中のデータベースの情報を表示postgres=# \\conninfoテーブル一覧を表示postgres=# \\z他のデータベースに接続postgres=# \\c dbnamepsqlの終了postgres=# \\qファイルからコマンドを実行postgres=# \\i filename.sqlコマンドラインの履歴の表示postgres=# \\s'\\'に関するヘルプの表示postgres=# \\?``````テーブル一覧の表示\\dt;テーブル構造の表示\\d テーブル名;テーブル内のデータを一覧select * from テーブル名;指定したカラムの内容を小さい順に表示select * from テーブル名 order by カラム;指定したカラムの内容を大きい順に表示select * from テーブル名 order by カラム desc;表示数指定select * from テーブル名 limit 数;表示の開始位置指定select * from テーブル名 offset 数;カラム内の任意の文字を表示select distinct カラム名 from テーブル名;カラム内の合計値select sum(カラム名) from テーブル名;カラム内の最大値select max(カラム名) from テーブル名;カラム内の最小値select min(カラム名) from テーブル名;カラム内の平均値select avg(カラム名) from テーブル名;データの更新update テーブル名 set 更新内容;データの削除delete from テーブル名 where 条件;テーブルのオーナーの変更alter table テーブル名 owner to オーナー名;viewの作成create view ビュー名 as viewに指定するコマンド;view一覧の確認\\dv;viewの使用方法select * from ビュー名;viewの削除drop view ビュー名;インデックス追加create index インデックス名 on テーブル名(カラム名);インデックス削除drop index インデックス名;カラムの追加alter table テーブル名 add カラム名 データ型;カラムの削除alter table テーブル名 drop カラム名;カラム名の変更alter table テーブル名 rename カラム名 to 新カラム名;カラムのデータ型を変更するalter table テーブル名 alter カラム名 type データ型;文字数select length(カラム名) from テーブル名;文字列連結select concat(文字列, 文字列, ...) from テーブル名;サービスの起動postgres -D /usr/local/var/postgres``````sqlcreate table test01 (  val1 serial, -- 自動増分4バイト整数  val2 numeric(10, 2), -- 数値  val3 char(10), -- 固定長文字列  val4 varchar(10), -- 可変長文字列  val5 timestamp, -- 日付と時刻  val6 date, -- 日付  val7 bytea, -- バイナリ  primary key (val1, val2) -- 主キー);# テーブルが存在しない場合作成する場合# create table if not exists テーブル名``````sql-- Database: goauthCREATE DATABASE goauth WITH OWNER = postgres ENCODING = 'UTF8' TABLESPACE = pg_default CONNECTIONLIMIT = - 1;-- Table: usersCREATE TABLE IF NOT EXISTS users (        id serial PRIMARY KEY,        name VARCHAR(100) NOT NULL,        PASSWORD VARCHAR(355) NOT NULL,        email VARCHAR(355) UNIQUE NOT NULL,        created_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,        updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP    )ALTER TABLE users OWNER TO postgres;```"},{"name":"principle.md","content":"- [GitHub のスターは金にならない - Qiita](https://qiita.com/rana_kualu/items/db62ad8d7dc0a4cce9db)"},{"name":"productivity.md","content":"# Productivity# Increase Developer Productivity\u003c!--{{{--\u003e## 1. BE LESS RUNDUM- start work time- take break time## 2. STOP WASTING TIME- Cut down social media, news, etc- Decrease your overall productivity- Hinders your focus- Turn off notification## 3. WELL PLANNED PROJECT STRUCTURE- Create a strict template/framework for your projects- All projects are different. you may need multiple templates- Chunk work into smaller task- Look to auto certain part of your workflow## 4. PROJECT MANAGEMENT- Don't keep everything in your head- Don't use client or management emails as your project management system## 5. CODE FASTER- Use snippets, keyboard shortcut- Find tool that help speed up certail tasks- Practice typing faster- Bug trackers, testing framework, browser extensions, etc## 6.DON'T WORK TOO MUCH \u0026 TAKE BREAKS- Overworking can cause burnout and loss of ambition \u0026 drive- Make sure take consistent breaks- Breaks can help clear your head and solve problems- I suggest 5-10mins every couple hours## 7. MINIMIZE DISTRACTION- set limmitations- task to co-workers or family menbers if you work from home- Create a peaceful and productive work environment## 8. ALWAYS BE LEARNING- Dont get complacent just because you are working- LEarn new thigs- Keep your passion for what you do- task advantage of certain times to learn\u003c!--}}}--\u003e1. Integration time management infomation2. ecosystem for essential abilities3. code library, automation, templates4. dicide hobit routines and trust this process5. force focus a project6. unification task management tools- We have to do.  Make more clear and simply tasks and manage implementer.- I have to do.  Prioritize task and feedback speed more than quality.- You have to do.  clearly incentive and make gamification to mind manage.\u003c!--}}}--\u003e"},{"name":"programing-manner.md","content":"YAGNI の法則DRY の法則KISS の法則粗結合なモジュール設計依存関係の単純化・一方向化定数の活用大きすぎるモジュールは分割する(目安として 4 種類以上がシグナル)SOLID 原則:- Single Responsibility Principle：単一責任の原則:  一つのクラスにメソッドを詰め込みすぎると、変更するときに２つ以上の要素を変えないといけなくなる。とにかく分割継承して役割単一にして、物体を変更する際には理由が１つだけになる事。- Open/closed principle：オープン/クロースドの原則:  拡張に対して開かれて、修正に対して閉じる、と書いても意味がわかりづらいが、interface にしてメソッドとしては開きつつ元の関数は修正あまりさせない感じ。これがわかりやすい。- Liskov substitution principle：リスコフの置換原則:  派生元と派生先は置換しても大丈夫でなければいけない。変に派生先で独自メソッドやパラメータを入れると置換できなくなり、これを修正した際に大量の物体を修正する必要が出る。- Interface segregation principle：インターフェース分離の原則:  ビジネスロジックの中で、使わないメソッドを依存しない。これは単純に継承して使えないなどたくさんデメリットがある。- Dependency inversion principle：依存性逆転の原則:  上位のモジュールは下位のモジュールに依存してはならなくて、どちらも抽象に依存してる状態にする事。これは上述通り。"},{"name":"protcol.md","content":"NAT言わず と知れたパブリック IP アドレスとプライベート IP アドレスを変換するプロトコル。パブリック IP アドレスの特定のポートを、特定のプライベート IP アドレスの特定のポートに固定的に対応づけたものをポートマッピングといいます。STUNパブリック IP アドレスを発見し、ピアとの直接接続を妨害するルーターの制限を特定するためのプロトコル。クライアントが STUN サーバーに問い合わせると、パブリック IP アドレス・ポートとルーターの NAT 内部にアクセス可能かどうかを確認することができます。TURN「Symmetric NAT」 と呼ばれるルーターの制限を回避するためのプロトコル。具体的にはパブリック IP を持っている TURN サーバがクライアントに IP と Port を貸し出します。SDP送受信するメディア(動画・音声)の解像度、フォーマット、コーデック、暗号化などの、接続のマルチメディアコンテンツを記述するためのプロトコル。P2P 接続によって送受信されるデータを説明するためのメタデータと思っていいようです。ICEブラウザ間で P2P 接続を可能にするフレームワーク。これにより、P2P 接続するための経路を決定する。- NAT ザ通過するためには STUN サーバーからポートマッピングを取得する。- ファイアウォールなどの理由から直接接続が難しい場合は、TURN サーバーを経由する。  通信経路の候補を「ICE Candidate」と呼び、  すべての ICE Candidate が出揃ってから、SDP とまとめて交換する方式を「Vanilla ICE」、先に SDP だけを交換してから ICE Candidate を順次交換する方式を「Trickle ICE」と呼びます。WEBRTCLSP- [GitHub - ish-xyz/go-onion-routing: A Go simulation of the onion routing protocol](https://github.com/ish-xyz/go-onion-routing)"},{"name":"pyenv-mac-devenv.md","content":"python 環境整備- pyenv uninstall  https://t.co/MFjtOUYXqj?amp=1- system pip wrappers after an upgrade  https://github.com/pypa/pip/issues/5599- use python3 default  ls -l /usr/local/bin/python*  ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python  https://t.co/UaYslJqNih?amp=1- pip upgrade  python3 -m pip install --upgrade pip#ascii 使ってみるgithub.com/joelibaceta/vi…github.com/qeesung/image2…https://github.com/joelibaceta/video-to-asciihttps://github.com/qeesung/image2ascii"},{"name":"python-pandas-table.md","content":"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_html.html```import pandas as pdurl = 'http://blog.game-de.com/pm-sm/sm-allstats/'dfs = pd.read_html(url)print(dfs)```"},{"name":"react.md","content":"- React hooks を基礎から理解する- [今から始める React 入門 〜 Mobx 編 - Qiita](https://qiita.com/TsutomuNakamura/items/f10491060f0f1640afd9)- [blog.nunusuke/index.md at · sato-hirokazu/blog.nunusuke · GitHub](https://github.com/sato-hirokazu/blog.nunusuke/blob/22c891685686102d8e37b5d393181a250e93ec8a/src/contents/20201013-react-re-render-history/index.md)- 再レンダリング =[React の Context の更新による不要な再レンダリングを防ぐ 〜useContext を利用した時に発生する不要な再レンダリングを防ぐ方法に関して〜 - Qiita](https://qiita.com/soarflat/items/b154adc768bb2d71af21)- [any 型で諦めない React.EventCallback - Qiita](https://qiita.com/Takepepe/items/f1ba99a7ca7e66290f24)- [javascript - spread syntax vs slice method - Stack Overflow](https://stackoverflow.com/questions/51164161/spread-syntax-vs-slice-method)- [react で useState と useCallback を使う - Qiita](https://qiita.com/Climber22/items/2c6103b4e1ef7a1f2f7c)- [雰囲気で使わない React hooks の useCallback/useMemo - Qiita](https://qiita.com/seya/items/8291f53576097fc1c52a)メソッド名 呼び出されるタイミングcomponentWillMount() マウントが行われる直前componentDidMount() マウントが行われた直後componentWillReceiveProps() マウントされたコンポーネントが新しい props を受け取る前shouldComponentUpdate() 新しい props や state を受け取った時componentWillUpdate() 新しい props や state を受け取った時、レンダリングする直前componentDidUpdate() 更新が行われた直後componentWillUnmount() コンポーネントがアンマウントされ、破棄される直前componentDidCatch() エラー発生時[お前らの React は遅い - Qiita](https://qiita.com/teradonburi/items/5b8f79d26e1b319ac44f)"},{"name":"redis-cluster.md","content":"[Redis cluster tutorial – Redis](https://redis.io/topics/cluster-tutorial)[Redis Cluster Specification – Redis](https://redis.io/topics/cluster-spec)[Redis cluster specification \u0026mdash; Redis Documentation (Japanese Translation)](https://redis-documentasion-japanese.readthedocs.io/ja/latest/topics/cluster-spec.html)"},{"name":"redis.md","content":"1stcasecreate api to return first 20post and thread length.2stcaseインメモリデータベースディスクではなく高速なメインメモリにデータを格納高速かつ安定したパフォーマンスを提供大容量のデータに不向き部分的なデータ保存に向いている定期的にディスクに書き込みデータを永続化する別名データ構造サーバキーに紐づく値の一般的な関係はもちろん複雑なデータ構造も扱えるKVSKey, Value Store の頭文字キーに紐づく値のこと例）Name(key): \"Taro\"(value)長いキーは推奨されていないデータ・タイプString：シンプルなデータ例）Name: \"Taro\"List：順番に並べた複数の要素例）時系列的なデータSet：順不同の複数の要素（重複を許さない）例）タグ，ソーシャルグラフSorted Set：Set の特徴を持ちつつも個々の要素にスコアが付く例）ランキングHashe：連想配列例）わかりやすいラベルと値のセット```brew install redisredis-serverredis-cli\u003e select number\u003e bgsave\u003e set keyname value\u003e get key\u003e mget key1 key2\u003e get age\u003e incr age\u003e decr age\u003e incrby age 10\u003e decrby age 10\u003e keys *\u003e keys [an]*\u003c!-- keyの表示 --\u003e\u003c!-- 形式 --\u003e\u003c!-- すべてのkeyの取得：keys * --\u003e\u003c!-- 条件指定：keys 正規表現 --\u003e\u003c!-- 使える正規表現 --\u003e\u003c!-- ? ・・・任意の1文字 --\u003e\u003c!-- * ・・・ 任意の文字列 --\u003e\u003c!-- [ ] ・・・ 角カッコ内の文字のどれか1文字 --\u003e\u003e exisits name\u003e exsist image\u003e rename age nenrai\u003e keys age\u003e keys nenrai\u003e del keyname 20 \u003c- second\u003e expire keyname 10 \u003c- second\u003e sort ...\u003e rpush keyname value value2 value3\u003e rpush lindex students 1\u003e lrange students 0 -1\u003e llen students \u003c- length\u003e sadd keyname value value2 value3 \u003c- set value\u003e smembers keyname \u003c- display value list\u003e srem keyname value \u003c- delete value和集合：sunion キー名1 キー名2差集合：sdiff キー名1 キー名2積集合：sinter キー名1 キー名2\u003e sorted set\u003e zrank keyname value\u003e zrem key# キー一覧keys *# キーの値を取得get #{key名}# キーをセットset #{key名} #{値}# キーを削除del #{key名}# ttl取得 (-1の場合は値がないか、期限がない)ttl #{key名}# キーを全削除flushall```newconnectset_timeoutset_timeoutsset_keepaliveget_reused_timescloseinit_pipelinecommit_pipelinecancel_pipelinehmsetarray_to_hashread_replyadd_commands"},{"name":"redux.md","content":"- [たぶんこれが一番分かりやすいと思います React + Redux のフロー図解 - Qiita](https://qiita.com/mpyw/items/a816c6380219b1d5a3bf)- [React + Redux で Todo アプリを作ってみよう！『Add Todo 編』 - Qiita](https://qiita.com/micropig3402/items/8e44bc042eda13b98c95)  [ぼくのかんがえたさいきょうの useState + useContext よりも Redux のほうが大抵勝っている](https://zenn.dev/kazuma1989/articles/68c2339e056530)  [Redux と Context API の違い、そして何を使うべきかについて](https://zenn.dev/luvmini511/articles/61e8e54853bc13)"},{"name":"regex-examples.md","content":"```echo \"apple(25)\" | cut -d\"(\" -f2 | cut -d\")\" -f1echo \"apple(25)\" | sed -e \"s/^.*(\\(.*\\)).*$/\\1/\"```括弧で囲まれた文字列を、括弧は除いて選択したいという場合は、肯定的先読み (?=○○○) および肯定的後読み (?\u003c=○○○) を用いて以下のように記述します。(?\u003c=\\()[^\\(\\)]+(?=\\))"},{"name":"regex.md","content":"- [基本的な正規表現一覧 | murashun.jp](https://murashun.jp/article/programming/regular-expression.html)| 正規表現の例 | 意味 | マッチする例 || --- | --- | --- || 通常の文字 | そのままの文字 | 「abc」なら「abc」 || . | 任意の1文字 | 「a」でも「b」でも何でも || \\\\n | 改行 |  || \\\\t | タブ |  || \\\\. \\\\( \\\\) \\\\[ \\\\] \\\\^ \\\\$ \\\\\\ | 記号ではなく文字 | 「.」「(」「)」「[」「]」「^」「$」「\\\\」 || 正規表現の例 | 意味 | マッチする例 || --- | --- | --- || [abc] | abcのうち1文字 | 「a」「b」「c」のいずれか || [^abc] | abc以外の1文字 | 「d」など || [A-Za-z] | AからZ、aからzのうちの1文字 | 「d」など || \\\\d | 数字1文字 | 「0」から「9」までのいずれか || \\\\w | 英数字1文字 | 「a」「B」「7」など || \\\\s | 空白文字1文字 | 空白、改行、タブなど || \\\\p{InBasicLatin} | ラテン文字1文字 | 「a」「B」記号など || \\\\p{InHiragana} | 平仮名1文字 | 「あ」「ん」など || \\\\p{InKatakana} | 片仮名1文字 | 「ア」「ン」など || \\\\p{InCJKUnifiedIdeographs} | 漢字1文字 | 「漢」「字」など || 正規表現の例 | 意味 | マッチする例 || --- | --- | --- || ^ | 行頭 | 「^un」は「un」で始まる文字列 || $ | 行末 | 「ing$」は「ing」で終わる文字列 || 正規表現の例 | 意味 | マッチする例 || --- | --- | --- || ? | 直前の文字が0個か1個 | 「e?grep」は「grep」か「egrep」 || \\* | 直前の文字が0個以上 | 「.\\*」は 0文字以上の任意の文字列 || + | 直前の文字が1個以上 | 「.+」は 1文字以上の任意の文字列 || \\\\{n} | 直前の文字がn個 | 「a\\\\{2}」は「aa」 || \\\\{n,} | 直前の文字がn個以上 | 「a\\\\{2,}」は「aa」「aaa」... || \\\\{n,m} | 直前の文字がn個以上,m個以下 | 「a\\\\{2,3}」は「aa」「aaa」 || +? | 直前の文字が1個以上，ただしマッチする最小の範囲 |  || 正規表現の例 | 意味 | 備考 || --- | --- | --- || tdu\\|dendai | tdu または dendai | 範囲を区切るため全体を()で囲むことが多い || () | グループ分け | group(n)でn番目のグループにマッチした文字列を参照できる |\\d{4}-\\d{2}-\\d{2}"},{"name":"roadmap-go.md","content":"# Go Developer Roadmap \u003chttps://raw.githubusercontent.com/Alikhll/golang-developer-roadmap\u003e\u003e Roadmap to becoming a [Go](https://golang.org/) developer in 2021:Below you can find a chart demonstrating the paths that you can take and the libraries that you would want to learn to become a Go developer. I made this chart as a tip for everyone who asks me, \"_What should I learn next as a Go developer?_\"[简体中文版](./i18n/zh-CN/ReadMe-zh-CN.md)[繁體中文版](./i18n/zh-TW/ReadMe-zh-TW.md)[日本語版](./i18n/ja-JP/ReadMe-ja-JP.md)[Versão em Português do Brasil](./i18n/pt-BR/ReadMe-pt-BR.md)[한국어](./i18n/ko-KR/ReadMe-ko-KR.md)[Русский](./i18n/ru-RU/ReadMe-ru-RU.md)[Українська](./i18n/uk-UA/ReadMe-uk-UA.md)## Disclaimer\u003e The purpose of this roadmap is to give you an idea about the landscape. The road map will guide you if you are confused about what to learn next, rather than encouraging you to pick what is hype and trendy. You should grow some understanding of why one tool would be better suited for some cases than the other and remember hype and trendy does not always mean best suited for the job.## Give a Star! :star:If you like or are using this project to learn or start your solution, please give it a star. Thanks!## Roadmap![Roadmap](./golang-developer-roadmap.png)## Resources1. Prerequisites   - [Go](https://golangbot.com/)   - [Go Modules](https://blog.golang.org/using-go-modules)   - [SQL](https://www.w3schools.com/sql/default.asp)2. General Development Skills   - Learn GIT, create a few repositories on GitHub, share your code with other people   - Know HTTP(S) protocol, request methods (GET, POST, PUT, PATCH, DELETE, OPTIONS)   - Don't be afraid of using Google, [Power Searching with Google](http://www.powersearchingwithgoogle.com/)   - Read a few books about algorithms and data structures   - Learn about implementation of a basic Authentication   - Solid principles, architectural \u0026 design patterns, ecc   - Basics of software testing (unit, integration, e2e)3. CLI Tools   1. [cobra](https://github.com/spf13/cobra)   2. [urfave/cli](https://github.com/urfave/cli)4. Web Frameworks + Routers   1. [Beego](https://github.com/astaxie/beego)   2. [Chi](https://github.com/go-chi/chi)   3. [Echo](https://github.com/labstack/echo)   4. [Fiber](https://github.com/gofiber/fiber)   5. [Gin](https://github.com/gin-gonic/gin)   6. [Revel](https://github.com/revel/revel)5. Databases   1. Relational      1. [SQL Server](https://www.microsoft.com/en-us/sql-server/sql-server-2017)      2. [PostgreSQL](https://www.postgresql.org/)      3. [MariaDB](https://mariadb.org/)      4. [MySQL](https://www.mysql.com/)      5. [CockroachDB](https://www.cockroachlabs.com/)   2. Cloud Databases      - [CosmosDB](https://docs.microsoft.com/en-us/azure/cosmos-db)      - [DynamoDB](https://aws.amazon.com/dynamodb/)   3. Search Engines      - [ElasticSearch](https://www.elastic.co/)      - [Solr](http://lucene.apache.org/solr/)      - [Sphinx](http://sphinxsearch.com/)   4. NoSQL      - [MongoDB](https://www.mongodb.com/)      - [Redis](https://redis.io/)      - [Apache Cassandra](http://cassandra.apache.org/)      - [RavenDB](https://github.com/ravendb/ravendb)      - [CouchDB](http://couchdb.apache.org/)6. ORMs   1. [Gorm](https://github.com/go-gorm/gorm)   2. [Xorm](https://github.com/go-xorm/xorm)7. Caching   1. [GCache](https://github.com/bluele/gcache)   2. Distributed Cache      1. [Go-Redis](https://github.com/go-redis/redis)      2. [GoMemcached](https://github.com/bradfitz/gomemcache)8. Logging   1. Log Frameworks      - [Zap](https://github.com/uber-go/zap)      - [ZeroLog](https://github.com/rs/zerolog)      - [Logrus](https://github.com/sirupsen/logrus)   2. Log Management System      - [Sentry.io](http://sentry.io)      - [Loggly.com](https://loggly.com)   3. Distributed Tracing      - [Jaeger](https://www.jaegertracing.io/)9. Real-Time Communication   1. [Socket.IO](https://socket.io/)10. API Clients    1. REST       - [Gentleman](https://github.com/h2non/gentleman)       - [GRequests](https://github.com/kennethreitz/grequests)       - [heimdall](https://github.com/gojek/heimdall)    2. [GraphQL](https://graphql.org/)       - [gqlgen](https://github.com/99designs/gqlgen)       - [graphql-go](https://github.com/graph-gophers/graphql-go)11. Good to Know    - [Validator](https://github.com/go-playground/validator)    - [Glow](https://github.com/pytorch/glow)    - [GJson](https://github.com/tidwall/gjson)    - [Authboss](https://github.com/volatiletech/authboss)    - [Go-Underscore](https://github.com/ahl5esoft/golang-underscore)12. Testing    1. Unit, Behavior, Integration Testing       1. [GoMock](https://github.com/golang/mock)       2. [Testify](https://github.com/stretchr/testify)       3. [GinkGo](https://github.com/onsi/ginkgo)       4. [GoMega](https://github.com/onsi/gomega)       5. [GoCheck](https://github.com/go-check/check)       6. [GoDog](https://github.com/DATA-DOG/godog)       7. [GoConvey](https://github.com/smartystreets/goconvey)       8. [Dockertest](https://github.com/ory/dockertest)    2. E2E Testing       - [Selenium](https://github.com/tebeka/selenium)       - [Endly](https://github.com/viant/endly)13. Task Scheduling    - [Gron](https://github.com/roylee0704/gron)    - [JobRunner](https://github.com/bamzi/jobrunner)    - [Gocron](https://github.com/go-co-op/gocron)14. MicroServices    1. Message-Broker       - [RabbitMQ](https://www.rabbitmq.com/tutorials/tutorial-one-go.html)       - [Apache Kafka](https://kafka.apache.org/)       - [ActiveMQ](https://github.com/apache/activemq)       - [Azure Service Bus](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview)    2. Building message-driven       - [Watermill](https://github.com/ThreeDotsLabs/watermill)       - [Message-Bus](https://github.com/vardius/message-bus)    3. Frameworks       - [GoKit](https://github.com/go-kit/kit)       - [go-zero](https://github.com/tal-tech/go-zero)       - [Micro](https://github.com/micro/go-micro)       - [rpcx](https://github.com/smallnest/rpcx)    4. RPC       - [Protocol Buffers](https://github.com/protocolbuffers/protobuf)       - [gRPC-Go](https://github.com/grpc/grpc-go)       - [gRPC-Gateway](https://github.com/grpc-ecosystem/grpc-gateway)       - [Twirp](https://github.com/twitchtv/twirp)15. [Go-Patterns](https://github.com/tmrts/go-patterns)## Wrap UpIf you think the roadmap can be improved, please do open a PR with any updates and submit any issues. Also, I will continue to improve this, so you might want to star this repository to revisit.Idea from : [ASP.NET Core Developer Roadmap](https://github.com/MoienTajik/AspNetCore-Developer-Roadmap)## ContributionThe roadmap is built using [Draw.io](https://www.draw.io/). Project file can be found at `golang-developer-roadmap.xml` file. To modify it, open draw.io, click **Open Existing Diagram** and choose `xml` file with project. It will open the roadmap for you. Update it, upload and update the images in readme and create a PR (export as png with 400% zoom and minify that with [Compressor.io](https://compressor.io/compress)).- Open a pull request with improvements- Discuss ideas in issues- Spread the word## License[![License: CC BY-NC-SA 4.0](https://img.shields.io/badge/License-CC%20BY--NC--SA%204.0-lightgrey.svg)](https://creativecommons.org/licenses/by-nc-sa/4.0/)"},{"name":"rust.md","content":"- [GitHub - tokio-rs/tokio: A runtime for writing reliable asynchronous applications with Rust. Provides I/O, networking, scheduling, timers, ...](https://github.com/tokio-rs/tokio)[RustCoder ―― AtCoder と Rust で始める競技プログラミング入門](https://zenn.dev/toga/books/rust-atcoder)[Rust と Lambda の相性が良い 7 つの理由 〜Rust で Lambda をやっていく〜](https://zenn.dev/hinastory/articles/b603b76bf01ccc)[Rust で簡易ウェブクローラを作る](https://zenn.dev/shotaro_tsuji/books/32df27b4cc54df4fa7a5)[Rust でつくる Git 入門](https://zenn.dev/uzimaru0000/books/impl-git-in-rust)[Rust で web サーバ開発ハンズオン](https://zenn.dev/susiyaki/books/b927a18723da01a6066b)[Typescript の次は Rust かもしれない](https://zenn.dev/akfm/articles/81713d4c1275ac64a75c)"},{"name":"science.md","content":"[コグニカル](https://cognicull.com/ja)"},{"name":"sed.md","content":"'#'で始まるコメント行を削除する。sed '/^#/d' source.txt空行を削除sed '/^$/d' source.txt先頭#の行と空行を削除cat source.txt | grep -v '^#' | sed '/^$/d'file1.txt の 15 行目から 26 行目までを削除して file2.txt に保存する。sed '15,26d' file1.txt \u003e file2.txt指定行の間でコメントアウト解除する(89 ～ 94 行目の先頭の#を外す)sed -i -e \"89,94s:^#::\" source.txtCR+LF を LF にするsed -i -e 's/\\r//g' source.txtLF に CR を追加して CR+LF にする #よく間違うのが's/\\n/\\r\\n/'では置換出来ないので注意sed -i -e 's/$/\\r/' source.txt1 ～ 9 行目を削除するsed '1,9d' sample.txt1 番目に出現した'Linux'を'リナックス'にsed -e '0,/claudio/ s/claudio/claudia/' nomised -e 's/Linux/リナックス/' source.txt3 番目に出現した'Linux'を'リナックス'にsed -e 's/Linux/リナックス/3' source.txtすべての'Linux'を'リナックス'にsed -e 's/Linux/リナックス/g' source.txt'Linux LINUX linux' をすべて'リナックス'へsed -e 's/(Linux|LINUX|linux)/リナックス/g' source.txt#もしくは末尾に大文字小文字無視の i をつけてもいいsed -e 's/linux/リナックス/gi' source.txt特定文字を含む行に対して置換# /～/ を前置すると～を含む行という条件になる# /～/!で前置すると～を含まない行という条件になる# ,で始まる行に対しての例# ,で始まる行で大文字小文字を無視してすべての'linux'を'リナックス'にsed -e '/^,/s/linux/リナックス/gi' source.txt# ,で始まらない行に対しての例# ,で始まらない行で大文字小文字を無視してすべての'linux'を'リナックス'にsed -e '/^,/!s/linux/リナックス/gi' source.txt正規表現でマッチして文字を追加#'\u003e'を含む行で、A-Z の 6 ケタ[ ¥([A-Z]\\{6\\}¥) ]の文字を見つけたら、それに対して'\\_'を付与する# \u003e CENTOS67 という文字を対象にした場合、\u003e CENTOS_67 に置換されるsed -e 's/^\u003e¥([A-Z]\\{6\\}¥)/\\1\\_/g' source.txt置換した行だけ表示する(p)sed -n 's/linux/リナックス/p' source.txt複数の条件で置換するsed -e 's/AAA/BBB/g' -e 's/CCC/DDD/g' source.txt置換範囲を限定する#11 行目～ 25 行目まで AAA を BBB に置換するsed -e '11,25 s/AAA/BBB/g' source.txt開始と終了の文字列を指定して置換する# '#START'から'#END'く括られた範囲で置換をするsed -e '/#START/,/#END/ s/YYYYMM/201603/g' source.txt特定文字列が出たら読み飛ばす# '#SKIP'が出たら次の行(N;)は読み飛ばす、数行読み飛ばす場合は N;N;みたいにするsed '/#SKIP/{N; s/YYYY/2016/g}' source.txt文字列の変換sed -e \"s/oldtext/newtext/g\"文字列の削除sed -e \"s/text//\"行頭に text があった場合削除sed -e \"s/^text//\"行末に text があった場合削除sed -e \"s/text\\$//\"abc の後に文字列を追加sed -e \"s/abc/abcxyz/g\"行頭に文字列を追加sed -e \"s/^/text/\"行末に文字列を追加sed -e \"s/\\$/text/\"._は全ての文字列を abc にsed -e \"s/._/abc/\"タブをスペースに変換sed -e 's/\u003ctab\u003e/\u003cspace\u003e/g'複数のスペースを 1 つのスペースに変換sed -e 's/\u003cspace\u003e\u003cspace\u003e\\*/\u003cspace\u003e/g'ホワイトスペースを 1 つのスペースに変換sed -e 's/[\u003cspace\u003e\u003ctab\u003e][\u003cspace\u003e\u003ctab\u003e]\\*/\u003cspace\u003e/g'行頭のホワイトスペースを削除sed -e 's/^[\u003cspace\u003e\u003ctab\u003e]\\*//'行末のホワイトスペースを削除sed -e 's/[\u003cspace\u003e\u003ctab\u003e]\\*$//'text を含んだ行を削除sed -e \"/text/d\"空白行を削除sed -e '/^$/d'5 行目から 20 行目を変換sed -e \"5,20s/oldtext/newtext/g\"1 行目を削除sed -e '1d'1 行目を表示sed -n '1p'特定行数ごとに何かする# 45 行毎に改行を入れるsed 's/.\\{45\\}/\u0026\\n/g' source.txtメタ文字(よく忘れるので)^ 先頭$ 後尾. 任意の 1 文字- 直前の文字の 0 回以上の繰り返し  \\+ 直前の文字の 1 回以上の繰り返し  \\? 直前の文字が 0 回または 1 回のみ出現  [] 文字クラス、[abc0-9] ならば数字と a, b, c のどれか 1 文字  \\| OR、[ab|ap] ならば ab または ap  \\{3\\} 直前の文字が 3 回だけ出現  \\{3,5\\} 直前の文字が 3〜5 回出現  \\b 単語区切り  アドレスコマンド(ほぼ s しか使わないかも)  d その行を出力しない  p その行を出力する、-n をつけると変換前のものは出力しない  s 置換  y 一文字ずつ置換  q 終了  SED のオプション(大体はパイプを通すので上書きオプションとか忘れがち)# 条件式スクリプトを直接指定-e 'スクリプト'# 条件式スクリプトが記述されているファイルを指定-f 'スクリプトファイル名'# 表示を抑制（明示的にスクリプト中で p をすれば表示も可能）-n 'スクリプト'# 拡張正規表現を使ったスクリプトを記述-r '正規表現を使ったスクリプト'-i 入力ファイルの上書き# 上書き前のファイルに拡張子.bak をつけて保管することもできるsed -i.bak -e '/^#/d' config.txtSED の条件式行数 処理する行数を指定する行数,行数 指定した行数間の文字列を処理する。$を指定すると最後の行を表せる/文字列/     指定した文字列が現れる行を処理する。先頭に「^」を付けると指定した文字列から始まる行，末尾に「$」を付けると指定した文字列で終わる行が対象になる。行数の範囲指定でも利用できる:ラベル b および t コマンド用のラベル #コメント コメント{..} 括弧（かっこ）内をブロックとして扱う= 現在の行番号を表示するa 文字列 文字列を追加する。ただし改行をしたい場合はその前に\\を付けるi 文字列 文字列を挿入する。ただし改行をしたい場合はその前に\\を付けるq 処理を中断し sed を終了するr ファイル名 指定したファイルを読み出し，追加するb ラベル 指定したラベルに移動するt ラベル s///が成功していれば指定したラベルに移動するc 文字列 選択している行を文字列に置換する。ただし改行をしたい場合はその前に\\を付けるd パターン・スペースを削除するD パターン・スペース内の最初の改行までを削除するh パターン・スペースをホールド・スペースにコピーするH パターン・スペースをホールド・スペースに追加するg ホールド・スペースをパターン・スペースにコピーするG ホールド・スペースをパターン・スペースに追加するx ホールド・スペースとパターン・スペースを入れ替えるn 次の行をパターン・スペースに読み込むN 次の行をパターン・スペースに追加するp 現在のパターン・スペースを表示するP 現在のパターン・スペースの最初に現われる改行までを表示するw ファイル名 現在のパターン・スペースを指定したファイルに書き込むs/置換条件/置換文字/ 置換条件を置換文字に変換する。最後に g を付けた場合は置換条件に当てはまるすべての文字列が置換されるy/変換対象の文字/変換文字/ 変換対象の文字を変換文字に変換するecho 'VIRTUALBOX UTILITIES' | boxes | sed -e 's/\\*/#/g' | sed -e 's/\\//#/g'``` UNIX         |  SED -------------+---------------------------------------------------------------- cat          |  sed ':' cat -s       |  sed '1s/^$//p;/./,/^$/!d' tac          |  sed '1!G;h;$!d' grep         |  sed '/patt/!d' grep -v      |  sed '/patt/d' head         |  sed '10q' head -1      |  sed 'q' tail         |  sed -e ':a' -e '$q;N;11,$D;ba' tail -1      |  sed '$!d' tail -f      |  sed -u '/./!d' cut -c 10    |  sed 's/\\(.\\)\\{10\\}.*/\\1/' cut -d: -f4  |  sed 's/\\(\\([^:]*\\):\\)\\{4\\}.*/\\2/' tr A-Z a-z   |  sed 'y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/' tr a-z A-Z   |  sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/' tr -s ' '    |  sed 's/ \\+/ /g' tr -d '\\012' |  sed 'H;$!d;g;s/\\n//g' wc -l        |  sed -n '$=' uniq         |  sed 'N;/^\\(.*\\)\\n\\1$/!P;D' rev          |  sed '/\\n/!G;s/\\(.\\)\\(.*\\n\\)/\u0026\\2\\1/;//D;s/.//' basename     |  sed 's,.*/,,' dirname      |  sed 's,[^/]*$,,' xargs        |  sed -e ':a' -e '$!N;s/\\n/ /;ta' paste -sd:   |  sed -e ':a' -e '$!N;s/\\n/:/;ta' cat -n       |  sed '=' | sed '$!N;s/\\n/ /' grep -n      |  sed -n '/patt/{=;p;}' | sed '$!N;s/\\n/:/' cp orig new  |  sed 'w new' orig hostname -s  |  hostname | sed 's/\\..*//'```"},{"name":"sequel-ace.md","content":"brew install --cask sequel-aceKeyboard ShortcutsGet the most out of Sequel Ace by remembering the following keyboard shortcuts.Main TabsKeyboard shortcut Description⌘ 1 Table Structure⌘ 2 Table Content⌘ 3 Table Relations⌘ 4 Table Info⌘ 5 Custom Query⌘ 6 Table TriggersGeneral ShortcutsKeyboard shortcut Description⌘ N New Window (Connection File)⌘ T New Tab (Connection File)⇧ ⌘ A Add Connection To Favorites⌘ O Open (Connection File or SQL File)⌥ ⌘ O Open current Connection File in New Window⌘ S Save (Connection File)⇧ ⌘ S Save As (Connection File)^ ⌘ S Save Query⌘ W Close (Connection File)⌥ ⌘ W Close All (Connection File)⌘ P Print⇧ ⌘ I Import⇧ ⌘ K Show Console Window⌘ K Clear Console⌃ ⌥ ← Back in History⌃ ⌥ → Forward in History⌃ ⇥ Select Next Tab⌃ ⇧ ⇥ Select Previous Tab⌃ ⇧ N Insert NULL value⇧ ⌘ C Copy Create Table Syntax⌥ ⌘ S Show Create Table Syntax⇧ ⌘ R Refresh Databases⇧ ⌘ D Choose Database⇧ ⌘ V Show Server Variables⌥ ⌘ P Show Server Processes⌃ ⌘ R Refresh Tables⇧ ⌘ F Flush Privileges⌘ U User Accounts⌘ C Copy selection / Copy selected row(s)⌥ ⌘ C Copy selected row(s) with column names⌃ ⌥ ⌘ C Copy selected row(s) as SQL INSERT⇧ ⌘ T Show/Hide Toolbar⌃ ⌘ F Filter Table Content⌃ ⌥ ⌘ F Filter Tables⌃ ⌥ ⌘ B Bundle Editor⌃ ⌥ ⌘ N NavigatorSelectKeyboard shortcut Description⌃ W Select current word⌃ L Select current line⇧ ⌘ B Select enclosing brackets⌘ A Select allTable Structure TabKeyboard shortcut Description⌥ ⌘ A Add a new field⌫ Delete selected field⌘ D Duplicate selected field⌘ R Refresh table structure⌘ 4 Edit table detailsTable Content TabKeyboard shortcut Description⌥ ⌘ A Add a new row⌫ Delete selected row(s)⌘ D Duplicate selected row⌘ R Refresh table contentsCustom Query TabKeyboard shortcut Description⌥ ⌘ R Run all queries⌅ or ⌘ R Run current query or selection⌘ [ Shift line or selection rightwards⌘ ] Shift line or selection leftwards⌘ / (Un)Comment line or selection⌥ ⌘ / (Un)Comment current query⎋ Completion (narrow-down list / fuzzy search)↩, ⇥, Double-Click Insertion of an item⇧ + ↩, ⇧ ⇥, ⇧ Double-Click Insertion full schema referenceKeep Window Open after Insertion by holding down ⌃ while insertionKeyboard shortcut Description⌃ ⎋ Fuzzy Search⎋ Close WindowF5 Spell Checker Completion (narrow-down list)⌃ Y Select current query⇧ ⌘ H Show MySQL help for current word or selection⌥ ⌘ F Open query favorites popup menu⌥ ⌘ Y Open query history popup menu⌃ + ↑ Insert previous history item (successively)⌃ ↓ Insert next history item (successively)⌥ ⌘ 1 Show all database names as completion list⌥ ⌘ 2 Show all table and view names as completion list⌥ ⌘ 3 Show all table names from current database as completion list"},{"name":"serial.md","content":"# Generate serial code## In short```sh# create csvfor n in {1..900000}; do shuf -zer -n10 {a..z} {0..9};echo; done | perl -ne 's/\\W//g;print $_ . \"\\n\"' | sort | uniq | sort -R | head -n 800000 \u003e result.csv# checkcat result.csv | wc -l##expected: 800000cat result.csv | sort | uniq -c | awk '{if($1 \u003e 1) { print $2 }}'##expected: ''```## Create 900000 rows csv### for n in {1..900000}; do shuf -zer -n10 {a..z} {0..9};echo; done \u003e zserial.csvor### for n in {1..900000}; do echo $(bash serial.bash); done \u003e bserial.csv```bash#!/bin/bashchars=abcdefghijklmnopqrstuvwxyz0123456789for i in {1..10}; do echo -n \"${chars:random%${#chars}:1}\"doneecho ''```or### for n in {1..900000}; do echo $(php keygen.php); done \u003e serial.csv```php\u003c?phpfunction keygen($len, $chars = false){  if (!isset($len)) $len = 10;  if (!$chars) $chars = 'abcdefghijklmnopqrstuvwxyz0123456789';  $key = '';  $clen = strlen($chars);  for ($i = 0; $i \u003c $len; $i++) {    $key .= $chars[rand(0, $clen - 1)];  }  return $key;}print(keygen(10));```## Uniq and squeeze to 800000 rowscat $file | sort | uniq | sort -R | head -n 800000 \u003e $squeezedfiletime( for n in {1..1000}; do; shuf -zer -n10 {a..z} {0..9}; echo; done; )1.13s user 1.46s system 72% cpu 3.566 totaltime ( ./main; )0.01s user 0.00s system 83% cpu 0.012 total```gopackage mainimport ( \"crypto/rand\" \"fmt\")func main() { const l = \"abcdefghijklmnopqrstuvwxyz0123456789\" for range make([]int, 1000) {  b := make([]byte, 10)  rand.Read(b)  var r string  for _, v := range b {   r += string(l[int(v)%len(l)])  }  fmt.Println(r) }}```"},{"name":"serverless.md","content":"- serverless framework- Auth0- Algolia- stdlib- dynamodb / lambda / s3 / sqs / api gateway / cloud watch / sns / cloudwatch event"},{"name":"shell-gei.md","content":"```echo あいうえお| grep -o . | tac | awk '{a=a?$0a$0:$0;print a}' | xargs -I@ bash -c 'printf \"%*s\\n\" $(( (27 + $(printf @ | wc -c)) / 2 )) @' | sed 's/   /　/g'echo あいうえお|grep -o .|tac|awk '{a=a?$0a$0:$0;$0=a;printf(\"%9s\\n\",a)}'|tac|tee \u003e(tac)|sed 's/  /　/g;1i.' | uniqecho あいうえお|grep -o .|awk '{a=a?a$0:$0;\"echo \"a\"|rev|sed s/^.//\"|getline b;printf(\"%9s\\n\",a b)}'|tac|tee \u003e(tac)|sed 's/  /　/g'|uniqecho 響け！ユーフォニアム|sed ':a;p;s/\\(.\\)\\(.*\\)/\\2\\1/;ba'|xargs -I@ bash -c 'clear;echo @|sed -ne\"p;s/\\(.\\)\\(.*\\)/\\\\2\\\\1/;#\"{0..9}|grep --color=always 響;sleep 0.1'echo 1213141516170819 | rev | sed -r -e's/[0-9]{4}/\u0026,/g' -e's/,/'{万,億,兆,京,垓}'/1' -e's/0+([^0-9])/\\1/g;s/([^0-9])([^0-9])/\\2/g;s/[^0-9]$//g' -e's/([0-9]{3})([0-9])/\\1,\\2/g' | revscript -fq \u003e(awk '{print strftime(\"%F %T \") $0}{fflush() }'\u003e\u003e PATH)seq 3 8 | nl | xargs -n2 bash -c 'seq $1 | sed \"s/^/printf \\$(tput setaf 0)\\$(tput setab $(($0 % 9)))$1\\$(tput sgr0)\\\": \\\"/g;s/$/;echo;/g\"|bash'echo $(( 3 ** 3 ))階乗yes | nl | xargs -L 1 bash -c 'sleep 0.1; sed -n $((${0} % $(wc -l \u003c /Users/kis9a/dev/Vim/neovim/runtime/menu.vim)))p | lolcat /Users/kis9a/dev/Vim/neovim/runtime/menu.vim'yes | nl | xargs -L 1 bash -c 'sleep 0.1; sed -n $((${0} % $(wc -l \u003c /Users/kis9a/dev/Vim/neovim/runtime/menu.vim)))p /Users/kis9a/dev/Vim/neovim/runtime/menu.vim'```- [個人的なシェル芸(シェルワンライナー)のまとめ | 俺的備忘録 〜なんかいろいろ〜](https://orebibou.com/ja/documents/shellgei/)"},{"name":"shell-script.md","content":"\u003chttps://github.com/lfkdev/bashtemplate\u003e\u003chttps://gnu.org/savannah-checkouts/gnu/bash/manual/bash.html\u003e\u003chttps://github.com/google/styleguide/blob/gh-pages/shellguide.md\u003e\u003chttps://github.com/iamcco/coc-diagnostic\u003e\u003chttps://github.com/josa42/coc-sh\u003e\u003chttps://github.com/koalaman/shellcheck\u003e[シェルスクリプトを書くときに気をつける9箇条 - Qiita](https://qiita.com/b4b4r07/items/9ea50f9ff94973c99ebe)### 1. グローバル変数は大文字### 2. awk を知る### 3. bash に依存しているのに #!/bin/sh と書かない### 4. 改行コードに気をつける### 5. サブシェルを意識するcd なども同じです。サブシェルでの移動は影響しないです。カレントディレクトリを一時的に変更して、すぐに戻りたい場合なんかに利用するといいでしょう。sh( cd ~/src \u0026\u0026 tar cf - myproject ) | gzip -c \u003e myproject.tar.gz### 嵌りやすい場合### 利用してやる場合### 6. 汎用性を高める### 7. 例外に関する対応### 8. @(#) を書き示す### 9. 環境変数 PATH を管理する# [シェルの変数展開 - Qiita](https://qiita.com/bsdhack/items/597eb7daee4a8b3276ba)| 記述 | 機能 || --- | --- || ${parameter:-word} | デフォルト値への置換 || ${parameter:=word} | デフォルト値の代入 || ${parameter:?[word]} | 値の検査とエラー || ${parameter:+word} | 代替値の使用 || ${#parameter} | 文字列長の取得 || ${parameter%word} | 最短後置パターンの削除 || ${parameter%%word} | 最長後置パターンの削除 || ${parameter#word} | 最短前置パターンの削除 || ${parameter##word} | 最長前置パターンの削除 |### bash インクリメント```shi=0while [ $((i++)) -lt 10 ]do  echo $idone```### csv to array```shcat data.csv | while read linedo  cols=(`echo $line | tr ',' ' '`)  for ((i=0; i \u003c ${#cols[@]}; i++)) {    echo \"Column $((i+1)): ${cols[$i]}\"  }done```### is pipe```function is_pipe() {    if [ -p /dev/stdin ]; then    #if [ -p /dev/fd/0  ]; then    #if [ -p /proc/self/fd/0 ]; then    #if [ -t 0 ]; then        # echo a | is_pipe        return 0    elif [ -p /dev/stdout ]; then        # is_pipe | cat        return 0    else        # is_pipe (Only!)        return 1    fi}```url_encode() {  while read -r line # 入力を1行ずつ取り出す  do    echo \"$line\" |      nkf -W8MQ | # ←ここで複数行に分割される      sed 's/=$//' |      tr '=' '%' |      paste -s -d '\\0' - | # ←ここで1行に戻す      sed -e 's/%7E/~/g' \\          -e 's/%5F/_/g' \\          -e 's/%2D/-/g' \\          -e 's/%2E/./g'  done}```- [Shell Script Tips 完全版 - Qiita](https://qiita.com/syui/items/565cf3b6e2120beeda04)"},{"name":"shell-watch.md","content":"```#!/bin/sh# see also http://mizti.hatenablog.com/entry/2013/01/27/204343usage() {  echo \"実行するには2個の引数が必要です。  第一引数: 監視対象ファイル名  第二引数: 監視対象ファイルが更新された際に実行されるコマンド  例： ./autoexec.sh a.cpp 'g++ a.cpp \u0026\u0026 ./a.cpp'\"}update() {  echo `openssl sha256 -r $1 | awk '{print $1}'`}if [ $# -ne 2 ];then  usage  exit 1fiINTERVAL=1 #監視間隔, 秒で指定no=0last=`update $1`while true;do  sleep $INTERVAL  current=`update $1`  if [ \"$last\" != \"$current\" ];  then    nowdate=`date '+%Y/%m/%d'`    nowtime=`date '+%H:%M:%S'`    echo \"no:$no\\tdate:$nowdate\\ttime:$nowtime\\tfile:$1\"    eval $2    last=$current    no=`expr $no + 1`  fi  done```"},{"name":"skhd.md","content":"```# focus windowshift + cmd - x : yabai -m window --focus recentshift + cmd - h : yabai -m window --focus westshift + cmd - j : yabai -m window --focus southshift + cmd - k : yabai -m window --focus northshift + cmd - l : yabai -m window --focus eastshift + cmd - z : yabai -m window --focus stack.prevshift + cmd - c : yabai -m window --focus stack.next# swap windowshift + alt - x : yabai -m window --swap recentshift + alt - h : yabai -m window --swap westshift + alt - j : yabai -m window --swap southshift + alt - k : yabai -m window --swap northshift + alt - l : yabai -m window --swap east# # move window# shift + cmd - h : yabai -m window --warp west# shift + cmd - j : yabai -m window --warp south# shift + cmd - k : yabai -m window --warp north# shift + cmd - l : yabai -m window --warp east# # move window# shift + ctrl - a : yabai -m window --move rel:-20:0# shift + ctrl - s : yabai -m window --move rel:0:20# shift + ctrl - w : yabai -m window --move rel:0:-20# shift + ctrl - d : yabai -m window --move rel:20:0# increase window sizeshift + alt - a : yabai -m window --resize left:-20:0shift + alt - s : yabai -m window --resize bottom:0:20shift + alt - w : yabai -m window --resize top:0:-20shift + alt - d : yabai -m window --resize right:20:0# decrease window sizeshift + cmd - a : yabai -m window --resize left:20:0shift + cmd - s : yabai -m window --resize bottom:0:-20shift + cmd - w : yabai -m window --resize top:0:20shift + cmd - d : yabai -m window --resize right:-20:0# rotate treealt - r : yabai -m space --rotate 90# mirror tree y-axisalt - y : yabai -m space --mirror y-axis# mirror tree x-axisalt - x : yabai -m space --mirror x-axis# toggle desktop offsetalt - a : yabai -m space --toggle padding \u0026\u0026 yabai -m space --toggle gap# toggle window fullscreen zoom# alt - f : yabai -m window --toggle zoom-fullscreenctrl + cmd - f : yabai -m window --toggle zoom-fullscreen# toggle window native fullscreenshift + alt - f : yabai -m window --toggle native-fullscreen# toggle window split typealt - e : yabai -m window --toggle split# float / unfloat window and restore position# alt - t : yabai -m window --toggle float \u0026\u0026 /tmp/yabai-restore/$(yabai -m query --windows --window | jq -re '.id').restore 2\u003e/dev/null || truealt - t : yabai -m window --toggle float \u0026\u0026 yabai -m window --grid 4:4:1:1:2:2```"},{"name":"sleep-cycle.md","content":"Sleep Cycle Freemium vs. Premium FeaturesSleep Cycle Freemium includes:Intelligent wake-upSleep analysisNightly sleep graphAlarm melodiesSnoozeApple Health integration (iPhone only)Google Fit integration (Android only)Database exportSleep Cycle Premium includes:Online back-up with SleepSecureFull access to all statisticsSleep aidSnore detectionSound detection (iPhone only)Sleep notesWake-up moodWake-up weather reportHeart rate tracking (iPhone only)Philips Hue integration (iPhone only)Homekit integration (iPhone only)More alarm soundsChoose your own alarm sound from your music libraryabout sleep \u003chttps://www.sleepcycle.com/about-sleep/\u003e"},{"name":"snippets.md","content":"```// mirrorfor (${1:int} ${2:i} = ${3:0}; $2 \u003c ${4}; $2++) {    ${0}}// placeholdersnippet     if    if ${1:foo} {        ${2:bar}    }// tab stopsnippet     if    if ${1} {        ${2}    }// snippet trigersnippet     if    if (${1:#:condition}) {        ${0:TARGET}    }```"},{"name":"spa.md","content":"import { h, text, app, memo } from \"/js/lib/hyperapp.js\";//////Declare the variables for home, about \u0026 contact html pages{{{////let home = \"\";////let about = \"\";////let contact = \"\";/////\\*_//// _//// _ @param {String} page - Represents the page information that needs to be retrieved//// _ @returns {String} resHtml - The Page's HTML is returned from the async invocation//// \\*/////const loadPage = async (page) =\u003e {//// const response = await fetch(page);//// const resHtml = await response.text();//// return resHtml;////};/////\\*_//// _ The Async function loads all HTML to the variables 'home', 'about' \u0026 'contact'//// \\*/////const loadAllPages = async () =\u003e {//// // home = await loadPage(\"home.html\");//// home = \"\u003cdiv\u003eHello\u003c/div\u003e\"//// // about = await loadPage(\"about.html\");//// // contact = await loadPage(\"contact.html\");////};//////Get the Element with the Id 'root'////const rootDiv = document.getElementById(\"root\");/////\\*_//// _ The Main Function is an async function that first loads All Page HTML to the variables//// _ Once the variables are loaded with the contents, then they are assigned to the 'routes' variable//// _/////const main = async () =\u003e {//// await loadAllPages();//// rootDiv.innerHTML = home;//// routes = {//// \"/\": home,//// \"/contact\": contact,//// \"/about\": about,//// };////};/////\\*_//// _//// _ @param {String} pathname - Pass the 'pathname' passed from onClick function of the link (index.html)//// _ The function is invoked when any link is clicked in the HTML.//// _ The onClick event on the HTML invokes the onNavClick \u0026 passes the pathname as param//// _/////const onNavClick = (pathname) =\u003e {//// window.history.pushState({}, pathname, window.location.origin + pathname);//// rootDiv.innerHTML = routes[pathname];////};/////\\*_//// _ The Function is invoked when the window.history changes//// \\*/////window.onpopstate = () =\u003e {//// rootDiv.innerHTML = routes[window.location.pathname];////};////// Invoke the Main function//// main();//}}}//const push = () =\u003e {// console.log(\"push\");//};//const replace = () =\u003e {// console.log(\"push\");// console.log(\"push\");// console.log(\"push\");// console.log(\"push\");//};//const onLocationChanged = () =\u003e {// console.log(\"on location changed\");//};//const onRoute = () =\u003e {const pathname = window.location.pathname;console.log(\"on route\", pathname);};//window.addEventListener(\"popstate\", onLocationChanged);window.history.pushState = () =\u003e {console.log(\"pushState\");onRoute();};// window.history.replaceState = () =\u003e {// console.log(\"replaceState\");// onRoute();// };//history.replaceState(null, null, \"/hoge3\");// function onLocationChanged() {// const pathname = window.location.pathname;// debug([pathname]);// for (const route of props.routes) {// route.\\_pathSegs = route.\\_pathSegs || splitPath(route.path);// const params = matchPath(pathname, route.\\_pathSegs);// if (params) {// props.matched({ route, params }, dispatch);// return;// }// }// props.matched(undefined, dispatch);// }const randomHex = () =\u003e \"0123456789ABCDEF\"[Math.floor(Math.random() * 16)];const randomColor = () =\u003e \"#\" + Array.from({ length: 6 }, randomHex).join(\"\");const listView = (list) =\u003eh(\"p\",{style: {backgroundColor: randomColor(),color: randomColor(),},},text(list));const MoreItems = (state) =\u003e ({ ...state, list: [...state.list, randomHex()] });const Increment = (state) =\u003e ({ ...state, counter: state.counter + 1 });const nview = () =\u003e h(\"h1\", {}, text(\"nview\"));const fview = () =\u003e h(\"h1\", {}, text(\"fview\"));const ChangeUrl = (state) =\u003e {window.history.replaceState(\"\", \"\", \"/about\");onRoute();return { ...state };};const ToHome = (state) =\u003e {window.history.replaceState(\"\", \"\", \"/\");onRoute();return { ...state };};// const route = (state) =\u003e {// console.log(\"just routel\", state);// state.// };app({init: {list: [\"a\", \"b\", \"c\"],counter: 0,route: \"home\",},view: (state) =\u003eh(\"main\", {}, [h(\"button\", { onclick: MoreItems }, text(\"Grow list\")),h(\"button\", { onclick: Increment }, text(\"+1 to counter\")),h(\"button\", { onclick: ChangeUrl }, text(\"change\")),h(\"button\", { onclick: ToHome }, text(\"change\")),h(\"p\", {}, text(`Counter: ${state.counter}`)),h(\"p\", {}, text(\"Regular view showing list:\")),listView(state.list),h(\"p\", {}, text(\"Memoized view showing list:\")),memo(listView, state.list),state.route == \"home\" \u0026\u0026 nview(),state.route == \"about\" \u0026\u0026 fview(),]),subscriptions: (state) =\u003e {const path = window.location.pathname;if (path == \"/about\") {state.route = \"about\";} else if (path == \"/\") {state.route = \"home\";}// console.log(\"path\", path);// state.route = \"about\";console.log(state.route);},node: document.getElementById(\"app\"),});// history.replaceState(null, null, \"/hoge\")```https://yourname.github.io/repo-name/book/123 といった URL でアクセスすると、カスタム 404.html ページが呼び出される。404.html の中の JavaScript で、https://yourname.github.io/repo-name にリダイレクトする。このとき、URL から /book/123 というパラメータを抽出し、?q=book%2F123 のように URL エンコードしたクエリパラメータとして付加する。Web サイトトップの index.html が呼び出されるので、JavaScript を使って URL 末尾のクエリ文字列 (?q=book%2F123を取り出し、もとのパラメータの形 (/book/123) に戻す。window.history.replaceState() で Web ブラウザのアドレスを /book/123 にセットし、React Router を動作させる（このときサーバーアクセスは発生しません）。\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e  \u003cmeta charset=\"utf-8\"\u003e  \u003ctitle\u003eMy App\u003c/title\u003e  \u003cscript\u003e    // Web サイトをサブディレクトリに配置するなら、この値を 1 にする。    const SEGMENT_COUNT = 0;    // 例えば、SEGMENT_COUNT = 1 の場合、    // https://yourname.github.io/repo-name/book/123 のような URL のうち、    // repo-name までをベースアドレスとみなし、末尾のパス (books/123)    // をエンコードして次のような URL へリダイレクトする。    // https://yourname.github.io/repo-name?p=book%2F123    const loc = window.location    const origin = loc.origin;  //=\u003e https://yourname.github.io    const path = loc.href.substr(origin.length + 1);  //=\u003e repo-name/book/123    const segments = path.split('/');  //=\u003e [repo-name, book, 123]    const repo = segments.slice(0, SEGMENT_COUNT).join('/');  //=\u003e repo-name    const param = segments.slice(SEGMENT_COUNT).join('/');  //=\u003e book/123    const url = origin + '/' + repo + '?p=' + encodeURIComponent(param);    loc.replace(url);  \u003c/script\u003e\u003c/head\u003e\u003cbody\u003e\u003c/body\u003e\u003c/html\u003e``````import * as React from 'react';import { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';import { Main } from './Main';import { Top } from './Top';const ROUTER_BASENAME =  process.env.NODE_ENV === 'development' ? '/' : '/repo-name';export const App: React.FC = () =\u003e {  return (\u003cdiv style={{margin: '1em'}}\u003e    \u003cRouter basename={ROUTER_BASENAME}\u003e      \u003cSwitch\u003e        \u003cRoute path=\"/\" exact={true} component={Top} /\u003e        \u003cRoute path=\"/main\" component={Main} /\u003e        \u003cRedirect to=\"/\" /\u003e      \u003c/Switch\u003e    \u003c/Router\u003e  \u003c/div\u003e);};```"},{"name":"sql.md","content":"# [SQLBolt - Learn SQL - Introduction to SQL](https://sqlbolt.com/)## SQL Lesson 1: SELECT queries 101```sqlSELECT title FROM movies;SELECT * FROM movies;SELECT title, description FROM movies;```### SQL Lesson 2: Queries with constraints (Pt. 1)```sqlSELECT id, title FROM movies WHERE id = 6;# Find the movies released in the years between 2000 and 2010 ✓SELECT title, year FROM movies WHERE year BETWEEN 2000 AND 2010;# Find the movies not released in the years between 2000 and 2010 ✓SELECT title, year FROM movies WHERE year \u003c 2000 OR year \u003e 2010;show table status from emails where name='email_threads_10'\"select * from email_threads_10 where bid=\", bid, \"limit 20\" SHOW TABLES FORM wordpress LIKE \"%meta\";``````DROP TABLE test_db_transaction_lua;CREATE TABLE IF NOT EXISTS test_db_transaction_lua (    id BIGINT(20) AUTO_INCREMENT NOT NULL PRIMARY KEY,    name VARCHAR(255) NOT NULL,    ins_t TIMESTAMP DEFAULT CURRENT_TIMESTAMP)  ENGINE=INNODB;INSERT INTO test_db_transaction_lua (name) VALUES (\"one\");DESCRIBE article;DROP DATABASE media;```CREATE DATABASE db;SHOW databases;USE db;.CREATE TABLE no.test (id INT VARCHAR(56) AUTO_INCREMENT NOT NULL PRIMARY KEY,title VARCHAR(50),content TEXT,created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);\"SELECT from*unixtime(ins_t, '%Y/%m/%d') as '日付け',SUM( CASE WHEN msg LIKE 'Greet-suc%' THEN 1 ELSE 0 END) AS 'あたり数',SUM( CASE WHEN msg LIKE 'fuck-fail%' THEN 1 ELSE 0 END) AS 'はずれ数',SUM( CASE WHEN msg LIKE 'Greet-suc%' OR msg LIKE 'fuck-fail%' THEN 1 ELSE 0 END) AS '参加数'FROM msgs*$bid WHERE oname='line' AND `from`='bot' AND ins_t between $start and $endAND msg LIKE 'Greet-suc%' OR msg LIKE 'fuck-fail%' GROUP BY from_unixtime(ins_t, '%Y/%m/%d');\"SELECTDate(from_unixtime(ins_t)) as date,SUM( CASE WHEN msg LIKE 'Greet-suc%' THEN 1 ELSE 0 END) AS 'suc',SUM( CASE WHEN msg LIKE 'fuck-fail%' THEN 1 ELSE 0 END) AS 'fail'FROM msgs_741 WHERE oname='line' AND `from`='bot' AND ins_t between 1 and 1625497200 AND msg LIKE 'Greet-suc%' OR msg LIKE 'fuck-fail%' GROUP BY Date(from_unixtime(ins_t));SELECT oid as uid,SUM( CASE WHEN msg LIKE 'Greet-suc%' THEN 1 ELSE 0 END) AS 'suc',SUM( CASE WHEN msg LIKE 'fuck-fail%' THEN 1 ELSE 0 END) AS 'fail'FROM msgs_741 WHERE oname='line' AND `from`='bot' AND ins_t between 1 and 1625497200 AND msg LIKE 'Greet-suc%' OR msg LIKE 'fuck-fail%' GROUP BY CAST(ins_t as DATE);SELECT CASE WHEN name LIKE 'nick-1%' THEN 'nick'WHEN name LIKE 'vicky-1%' THEN 'vicky'ELSE NULL END AS Name,COUNT(\\*) AS CountFROM dummytableGROUP BY CASE WHEN name LIKE 'nick-1%' THEN 'nick'WHEN name LIKE 'vicky-1%' THEN 'vicky'ELSE NULL ENDSELECT oid as uid, count(oid) as count from msgs_741 WHERE oname='line' AND `from`='bot' AND ins_t between 1 and 1625497200 AND msg LIKE 'fuck_fail%' GROUP BY oidSELECT dept,SUM( CASE WHEN gender = \"1\" THEN 1 ELSE 0 END) AS \"男性社員の人数\",SUM( CASE WHEN gender = \"2\" THEN 1 ELSE 0 END) AS \"女性社員の人数\",SUM( CASE WHEN gender = \"3\" THEN 1 ELSE 0 END) AS \"その他の社員の人数\"FROM name_dept_gender_scoreGROUP BY dept;SELECT oid as uid,SUM( CASE WHEN msg LIKE)SUM( CASE WHEN msg LIKE 'Greet-suc%' THEN 1 ELSE 0 END) AS 'suc',SUM( CASE WHEN msg LIKE 'fuck_fail%' THEN 1 ELSE 0 END) AS 'fail',FROM msgs_741GROUP BY oidSELECT oid as uid,SUM( CASE WHEN msg LIKE 'Greet-suc%' THEN 1 ELSE 0 END) AS 'suc',SUM( CASE WHEN msg LIKE 'fuck_fail%' THEN 1 ELSE 0 END) AS 'fail'FROM msgs_741GROUP BY oid;SELECT CASEWHEN msg LIKE 'fuck_fail%' THEN 'fail'WHEN msg LIKE 'Greet-suc%' THEN 'suc'ELSE NULL END as Name,COUNT(\\*) AS CountFROM msgs_741 WHERE oname='line' AND `from`='bot'GROUP BY CASEWHEN msg LIKE 'fuck_fail%' THEN 'fail'WHEN msg LIKE 'Greet-suc%' THEN 'suc'ELSE NULL END;``````"},{"name":"sqlite.md","content":"https://qiita.com/0829/items/ce92a752bf832a06bcf2https://github.com/vim-scripts/dbext.vimhttps://github.com/tpope/vim-dadbodSQLite version 3.32.3 2020-06-18 14:16:19Enter \".help\" for usage hints.sqlite\u003e .help.auth ON|OFF             Show authorizer callbacks.backup ?DB? FILE        Backup DB (default \"main\") to FILE.bail on|off             Stop after hitting an error.  Default OFF.binary on|off           Turn binary output on or off.  Default OFF.cd DIRECTORY            Change the working directory to DIRECTORY.changes on|off          Show number of rows changed by SQL.check GLOB              Fail if output since .testcase does not match.clone NEWDB             Clone data into NEWDB from the existing database.databases               List names and files of attached databases.dbconfig ?op? ?val?     List or change sqlite3_db_config() options.dbinfo ?DB?             Show status information about the database.dump ?TABLE?            Render database content as SQL.echo on|off             Turn command echo on or off.eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN.excel                   Display the output of next command in spreadsheet.exit ?CODE?             Exit this program with return-code CODE.expert                  EXPERIMENTAL. Suggest indexes for queries.explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto.filectrl CMD ...        Run various sqlite3_file_control() operations.fullschema ?--indent?   Show schema and the content of sqlite_stat tables.headers on|off          Turn display of headers on or off.help ?-all? ?PATTERN?   Show help text for PATTERN.import FILE TABLE       Import data from FILE into TABLE.imposter INDEX TABLE    Create imposter table TABLE on index INDEX.indexes ?TABLE?         Show names of indexes.limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT.lint OPTIONS            Report potential schema issues..log FILE|off            Turn logging on or off.  FILE can be stderr/stdout.mode MODE ?TABLE?       Set output mode.nullvalue STRING        Use STRING in place of NULL values.once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE.open ?OPTIONS? ?FILE?   Close existing database and reopen FILE.output ?FILE?           Send output to FILE or stdout if FILE is omitted.parameter CMD ...       Manage SQL parameter bindings.print STRING...         Print literal STRING.progress N              Invoke progress handler after every N opcodes.prompt MAIN CONTINUE    Replace the standard prompts.quit                    Exit this program.read FILE               Read input from FILE.recover                 Recover as much data as possible from corrupt db..restore ?DB? FILE       Restore content of DB (default \"main\") from FILE.save FILE               Write in-memory database into FILE.scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off.schema ?PATTERN?        Show the CREATE statements matching PATTERN.selftest ?OPTIONS?      Run tests defined in the SELFTEST table.separator COL ?ROW?     Change the column and row separators.session ?NAME? CMD ...  Create or control sessions.sha3sum ...             Compute a SHA3 hash of database content.shell CMD ARGS...       Run CMD ARGS... in a system shell.show                    Show the current values for various settings.stats ?on|off?          Show stats or turn stats on or off.system CMD ARGS...      Run CMD ARGS... in a system shell.tables ?TABLE?          List names of tables matching LIKE pattern TABLE.testcase NAME           Begin redirecting output to 'testcase-out.txt'.testctrl CMD ...        Run various sqlite3_test_control() operations.timeout MS              Try opening locked tables for MS milliseconds.timer on|off            Turn SQL timer on or off.trace ?OPTIONS?         Output each SQL statement as it is run.vfsinfo ?AUX?           Information about the top-level VFS.vfslist                 List all available VFSes.vfsname ?AUX?           Print the name of the VFS stack.width NUM1 NUM2 ...     Set column widths for \"column\" mode"},{"name":"subscribes.md","content":"- managed accounts.awswakatimeqiitadockerzenn.devdiscordslackicloudgmailgooglelineyoutubeinstagram~~spotify~~ -\u003e youtube(music)- subscriptions.| service          | price       || ---------------- | ----------- || aws              | 5$ ~ 30$ /m || youtube-premium  | 3$ /m       |\u003c!-- | wakatime-premium | 9$ /m       | --\u003ereduce wakatime-premium -\u003e create time tracking and totalization for me."},{"name":"talks-workflow.md","content":"# Introduce my workflow and how to manage sources## zsh\u003c!--{{{--\u003esh, bash, **zsh**, fish.### roadmap- set basic configure and export path.- zsh plugins with zsh plugin manager. I recommend zinit- command history search, autocomplete.- history of moved directory search with z command- prompt customize example: ~ {direcotry} {git status symbol}- startuptime expected: $(time zsh -i -c exit) \u003c 0.4 seconds. this is just my feel.- make or customize (zsh|bash) scripts for productivity. f, ff, gt, mdl, ...### links- [GitHub - unixorn/awesome-zsh-plugins](https://github.com/unixorn/awesome-zsh-plugins)- [b4b4r07 (Masaki ISHIYAMA) · GitHub](https://github.com/b4b4r07)- [fzf を活用して Terminal の作業効率を高める - Qiita](https://qiita.com/kamykn/items/aa9920f07487559c0c7e)---\u003c!--}}}--\u003e## tmux\u003c!--{{{--\u003etmux is a terminal multiplexer.### roadmap- set your favorite prefix key.- custom bindkeys- tmux plugins with tmux plugin manager tmp### links- [GitHub - rothgar/awesome-tmux](https://github.com/rothgar/awesome-tmux)---\u003c!--}}}--\u003e## neovim\u003c!--{{{--\u003e- [GitHub - neovim/neovim: Vim-fork focused on extensibility and usability](https://github.com/neovim/neovim)### roadmap- too many, so you have to copy and paste configures by searched item with google.- and try to hard. my configure is most simple and poweful. kis9a/dotfiles (master)\u003c!--}}}--\u003e## learn just \"edditting\"\u003c!--{{{--\u003e- Basically all editors provide same solution.- and basically baseed on same technology (LSP)- [language server protocol について (前編) - Qiita](https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4)- but have characteristic\u003c!--}}}--\u003e### this case vscode is prefer\u003c!--{{{--\u003e- initialcost in the os what surpport gui.- team development.- stranger filetypes.- explain to beginner.- live coding.- mob programming....\u003c!-- }}} --\u003e### this case (neo)vim is prefere\u003c!--{{{--\u003e#### nice comunity**vim-jp** (slack, conferences)\u003c!--}}}--\u003e### Why use (neo)vim\u003c!--{{{--\u003e- speed- nice comunity.- one of the preformancefor why use neovim\u003c!--}}}--\u003e## dotfiles\u003c!--{{{--\u003emanage your configures and ...- [最強の dotfiles 駆動開発と GitHub で管理する運用方法 - Qiita](https://qiita.com/b4b4r07/items/b70178e021bef12cd4a2)\u003c!--}}}--\u003e# consolution\u003c!--{{{--\u003emanage snippets.manage\u003c!--}}}--\u003e````\u003c!--{{{--\u003e**!! Simple but Powerful !!**## Pre Installation### tmux, neovim```sh# tmuxbrew install tmuxbrew install reattach-to-user-namespacegit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm# neovimbrew install neovim --HEADbrew install nodebrew install luabrew install pythonbrew install python@3.8brew install ruby@2.4npm install -g neovimpip install neovimgem install neovim# nvim -v# expected: NVIM v0.5.0-dev+... Build type: Debug LuaJIT 2.1.0-beta3 ...# execute :checkhealth in nvim# toolsbrew tap homebrew/cask-fontsbrew install --cask font-hack-nerd-fontbrew install alaclittybrew install fzfbrew install fdbrew install ripgrepbrew install batbrew install gh# other, I uses.brew install tigbrew install amethystbrew install git-deltabrew install translate-shellbrew install watchman## parserbrew install jqbrew install yqbrew install pup# formatter, linterbrew install lua-formatbrew install shfmtbrew install gofmtbrew install clang-formatbrew install psalmbrew install vintbrew install shellcheck# otherbrew install archeybrew install cowsaybrew install figletbrew install lolcatbrew install boxesbrew install mpvbrew install youtube-dlbrew install tmux-xpanes...````## Installation```sh# backupmkdir dotbackupcp -r .zshrc .zshenv .tmux.conf .gitconfig .config/ bin/ ./dotbackupls -la ./dotbackup# clonecd ~/git clone https://github.com/kis9a/dotfilescd dotfiles/```\\# vim .gitconfig```toml[user]\tname = kis9a # change your name\temail = kis9ax@gmail.com # change to your email[github]\tuser = kis9a #change to your userId ...```\\# vim .zshenv```shexport PROFILE=$HOME/kis9a # change to your gihtub id.# To PATH profiles repository https://github.com/kis9a/kis9a```\\# vim .git/config```sh[remote \"origin\"]\turl = https://github.com/kis9a/dotfiles # change to your remote\tfetch = +refs/heads/*:refs/remotes/origin/*...``````sh# pushgh auth logingh create repo dotfilesgit add . \u0026\u0026 git commit -m \"init\"git push -u origin master``````# deploycd ~/rm -rf .config/ bin/make deployzshnvim```### Usage\\# ...### QA · FQA##### o What is Tmux ?Tmux is a terminal multiplexer.  \u003chttps://github.com/tmux/tmux\u003e  \u003chttps://github.com/rothgar/awesome-tmux\u003e##### o What is Neovim ?Vim extended functions and comunity.  \u003chttps://github.com/neovim/neovim\u003e##### o What is the COC ?Language-Server-Protocol(LSP) client for neovim.  \u003chttps://github.com/neoclide/coc.nvim\u003e##### o zsh plugins\u003chttps://github.com/unixorn/awesome-zsh-plugins\u003e```\u003c!--}}}--\u003e```"},{"name":"terraform.md","content":"# terraformbasics\u003c!--{{{--\u003e| 用語          | 意味                                                                                        || ------------- | ------------------------------------------------------------------------------------------- || Configuration | インフラ設定のコード。要するに `*.tf` ファイルに DSL で書く Terraform のコードのこと。      || HCL           | HashiCorp Configuration Language の略。                                                     || Resource      | Terraform で管理する対象の基本単位。                                                        || Data Source   | Terraform 管理外だけど、Terraform 内で参照したい参照専用の外部データ。                      || Provider      | Resource や Data Source などを作成/更新/削除するプラグイン。aws/google/azurerm など。       || Provisioner   | リソースの作成/削除時に実行するスクリプトなどのプラグイン。local-exec/remote-exec/chef など || State         | Terraform が認識しているリソースの状態。 `*.tfstate` ファイルのこと。                       || Backend       | State の保存先。local/s3/gcs など。                                                         || Module        | Resource や Data Source などを再利用可能なようにまとめた Configuration の単位。             || 項目       | 意味                                 || ---------- | ------------------------------------ || type       | リソースの種類です。                 || depends_on | リソース間の依存です。               || primary    | アクティブなインスタンスの状態です。 || deposed    | 削除予定のインスタンスです。         || ファイル    | 説明                                      || ----------- | ----------------------------------------- || main.tf     | resource を定義します                     || output.tf   | 他の Module で利用する値を定義します      || variable.tf | Module への入力するための変数を定義します |blocks- Input: Variables serve as parameters for a Terraform module, so users can customize behavior without editing the source.- Output: Values are like return values for a Terraform module.- Local: Values are a convenience feature for assigning a short name to an expression.- Resource: Each resource block describes one or more infrastructure objects, such as virtual networks, compute instances, or higher-level components such as DNS records.\u003c!--}}}--\u003ecommands:\u003c!--{{{--\u003eMain commands:init Prepare your working directory for other commandsvalidate Check whether the configuration is validplan Show changes required by the current configurationapply Create or update infrastructuredestroy Destroy previously-created infrastructureAll other commands:console Try Terraform expressions at an interactive command promptfmt Reformat your configuration in the standard styleforce-unlock Release a stuck lock on the current workspaceget Install or upgrade remote Terraform modulesgraph Generate a Graphviz graph of the steps in an operationimport Associate existing infrastructure with a Terraform resourcelogin Obtain and save credentials for a remote hostlogout Remove locally-stored credentials for a remote hostoutput Show output values from your root moduleproviders Show the providers required for this configurationrefresh Update the state to match remote systemsshow Show the current state or a saved planstate Advanced state managementtaint Mark a resource instance as not fully functionaluntaint Remove the 'tainted' state from a resource instanceversion Show the current Terraform versionworkspace Workspace managementGlobal options (use these before the subcommand, if any):-chdir=DIR Switch to a different working directory before executing thegiven subcommand.-help Show this help output, or the help for a specified subcommand.-version An alias for the \"version\" subcommand.\u003c!--}}}--\u003e\u003c!--practice {{{--\u003e- 公式ドキュメントを読もう- tf ファイルを書く技術  - インデントを揃える  - 組み込み関数に親しむ  - lifecycle ブロックを使う    - リソースの差分を無視する    - リソース再生成のときに新しいのを作ってから古いのを削除する    - リソースのうっかり削除の保護  - テンプレートを使う    - 外部ファイルを文字列として読み込む    - テンプレートに変数を埋め込む  - モジュールでコードを共通化する    - モジュールの作り方    - production/staging などの環境差分を管理する    - モジュール間で値を参照する    - State を跨いで値を参照する  - 条件分岐したい    - 条件によって変数の値を変える    - 条件によってリソースを作成したりしなかったり- Terraform のバージョンを管理する技術  - Terraform をバージョンアップする  - Terraform のバージョンを切り替える  - Terraform のバージョンを固定する  - Terraform プロバイダをバージョンアップする  - Terraform プロバイダのバージョンを固定する- tfstate ファイルを書く技術  - ローカルでミニマムの State を見てみる  - リモートの State を見る  - 強制的にリソースを再生成する  - Terraform 管理外の既存のリソースを Terraform 管理下に入れる  - tf ファイルをリファクタリングする- Terraform をデバッグする技術  - デバッグログを出力する  - Terraform のソースコードをコンパイルする  - デバッグログにソースコードのファイル名と行番号を付ける  - Terraform をデバッガでステップ実行する\u003c!--}}}--\u003e- [第 1 回「EC2」@Baby Step Terraform for AWS - Qiita](https://qiita.com/sky0621/items/4fa9a9e0f7c9de4b46bf){{{1. アプリ（※）を EC2 上で動かしてみる。2. マネージドな DB に接続しにいく。3. デフォルトのネットワークを使うのではなく vpc、subnet を定義する。4. マルチ AZ(アベイラビリティゾーン)化とロードバランサーを導入する。 (5. 画像ファイルを S3 に置いて CloudFront 経由でアクセスさせる。) ※5. アプリ（※）を Docker 化して ECS で動かすようにする。6. 最後は CI/CD。GitHub にアプリのソースをプッシュしたら自動でビルド・デプロイが走るようにする。7. Route 53 使って独自ドメインでアクセスできるようにする。8. デフォルトユーザーを変える(ec2-user)9. https での接続10. ECS で作成11. 秘匿情報をパラメーターストアで管理12. RDS にログの追加13. メールサーバーの設定14. VPN の導入15. 本番運用を想定した記述。tfstate の管理\u003c!--}}}--\u003e- [Terraform 職人再入門 2020 - Qiita](https://qiita.com/minamijoyo/items/3a7467f70d145ac03324)- [Documentation - Terraform by HashiCorp](https://www.terraform.io/docs/index.html)- [Terraform 入門 - Qiita](https://qiita.com/kobayashi-m42/items/247cf9708044db8a234e)- [10 分で理解する Terraform - Qiita](https://qiita.com/Chanmoro/items/55bf0da3aaf37dc26f73)- [Terraform 設計・運用のノウハウ - Qiita](https://qiita.com/naomichi-y/items/4501331d114b4ef9d584)- [Terraform をしばらく書いて覚えた個人的な Tips について | DevelopersIO](https://dev.classmethod.jp/articles/my-terraform-tips/)- [【Terraform】module のアンチパターンとそれに対するベストプラクティス 5 選 - Qiita](https://qiita.com/bigwheel/items/2b420183639416b5c6bb)best practice.- [terraform-best-practices](https://www.terraform-best-practices.com/)- [Terraform のモジュール設計の 3 つのベストプラクティス](https://zenn.dev/aquamarinearia/articles/terraform_module_best_practice)- 依存関係の反転 (Dependency Inversion)- マルチクラウドの抽象化 (Multi-cloud Abstractions)- data ブロックのみのモジュール (Data-only Modules)- [Terraform から Ansible の playbook を実行する - Qiita](https://qiita.com/hayaosato/items/ee0d6eabb7b3d0a22136)resources| 種別     | リソース種類                   | 名前        | 備考                                                              || -------- | ------------------------------ | ----------- | ----------------------------------------------------------------- || resource | aws_iam_role                   | default     | IAM ロール                                                        || data     | aws_iam_policy_document        | assume_role | 信頼ポリシー（ポリシードキュメント）                              || resource | aws_iam_policy                 | default     | IAM ポリシー                                                      || resource | aws_iam_role_policy_attachment | default     | IAM ポリシーのアタッチ（IAM ロールに IAM ポリシーをアタッチする） || 種別     | リソース種類                      | 名前    | 備考                                                || -------- | --------------------------------- | ------- | --------------------------------------------------- || resource | aws_s3_bucket                     | private | プライベートバケット                                || resource | aws_s3_bucket_public_access_block | private | プライベートバケットのパブリックアクセス定義        || resource | aws_s3_bucket                     | public  | パブリックバケット                                  || resource | aws_s3_bucket                     | alb_log | ログバケット（後に定義する ALB 用のログを格納する） || data     | aws_iam_policy_document           | alb_log | ALB ログを書き込むための IAM ポリシー               || 種別 | リソース種類            | 名前    | 備考                                                           || ---- | ----------------------- | ------- | -------------------------------------------------------------- || data | aws_elb_service_account | alb_log | ログの書き込みに使用されるアカウント ID を自動的にフェッチする || 調整前リスト No. | 名称                                             | 調整後リスト No. || ---------------- | ------------------------------------------------ | ---------------- || リスト 7.2       | パブリックサブネット                             | リスト 7.12      || リスト 7.６      | パブリックサブネット用ルートテーブルの関連付け   | リスト 7.13      || リスト 7.7       | プライベートサブネット                           | リスト 7.14      || リスト 7.８      | プライベートサブネット用ルートテーブルと関連付け | リスト 7.16      || リスト 7.9       | プライベートサブネット用の EIP                   | リスト 7.15      || リスト 7.10      | プライベートサブネット用の NAT ゲートウェイ      | リスト 7.15      || リスト 7.11      | プライベートサブネット用のルート                 | リスト 7.16      || 種別     | リソース種類                | 名前          | 備考                                                     || -------- | --------------------------- | ------------- | -------------------------------------------------------- || resource | aws_vpc                     | example       | VPC                                                      || resource | aws_internet_gateway        | example       | インターネットゲートウェイ                               || resource | aws_subnet                  | public_0      | AZ0 のパブリックサブネット                               || resource | aws_subnet                  | public_1      | AZ1 のパブリックサブネット                               || resource | aws_route_table             | public        | パブリックサブネット用ルートテーブル                     || resource | aws_route                   | public        | パブリックサブネット用ルート（ルートテーブルのレコード） || resource | aws_route_table_association | public_0      | AZ0 のパブリックサブネットとルートテーブルの関連付け     || resource | aws_route_table_association | public_1      | AZ1 のパブリックサブネットとルートテーブルの関連付け     || resource | aws_subnet                  | private_0     | AZ0 のプライベートサブネット                             || resource | aws_subnet                  | private_1     | AZ1 のプライベートサブネット                             || resource | aws_eip                     | nat_gateway_0 | AZ0 の NAT ゲートウェイ用 EIP                            || resource | aws_eip                     | nat_gateway_1 | AZ1 の NAT ゲートウェイ用 EIP                            || resource | aws_nat_gateway             | nat_gateway_0 | AZ0 の NAT ゲートウェイ                                  || resource | aws_nat_gateway             | nat_gateway_1 | AZ1 の NAT ゲートウェイ                                  || resource | aws_route_table             | private_0     | AZ0 のプライベートサブネットのルートテーブル             || resource | aws_route_table             | private_1     | AZ1 のプライベートサブネットのルートテーブル             || resource | aws_route                   | private_0     | AZ0 のプライベートサブネットのルート                     || resource | aws_route                   | private_1     | AZ1 のプライベートサブネットのルート                     || resource | aws_route_table_association | private_0     | AZ0 のプライベートサブネットのルートテーブルの関連付け   || resource | aws_route_table_association | private_1     | AZ1 のプライベートサブネットのルートテーブルの関連付け   || 種別     | リソース種類            | 名前    | 備考                                         || -------- | ----------------------- | ------- | -------------------------------------------- || resource | aws_security_group      | default | セキュリティグループ                         || resource | aws_security_group_rule | ingress | セキュリティグループルール（インバウンド）   || resource | aws_security_group_rule | egress  | セキュリティグループルール（アウトバウンド） || 種別     | リソース種類         | 名前                   | 備考                                                                               || -------- | -------------------- | ---------------------- | ---------------------------------------------------------------------------------- || resource | aws_lb               | example                | ALB                                                                                || module   | -                    | http_sg                | HTTP 用セキュリティグループ                                                        || module   | -                    | https_sg               | HTTPS 用セキュリティグループ                                                       || module   | -                    | http_redirect_sg       | HTTP から HTTPS へのリダイレクト用セキュリティグループ                             || resource | aws_lb_listener      | http                   | HTTP リスナーの定義(HTTPS 化を行わない場合)                                        || resource | aws_lb_listener      | https                  | HTTPS リスナーの定義(HTTPS 化を行う場合)                                           || resource | aws_lb_listener      | redirect_http_to_https | HTTP から HTTPS へのリダイレクトリスナーの定義(HTTPS 化を行う場合)                 || resource | aws_lb_target_group  | example                | ターゲットグループ                                                                 || resource | aws_lb_listener_rule | example                | リスナールール（HTTPS 化を行う場合と行わない場合で listener_arn の設定値が異なる） || 種別     | リソース種類       | 名前                | 備考                                                 || -------- | ------------------ | ------------------- | ---------------------------------------------------- || data     | aws_route53_zone   | example             | ホストゾーンの参照(ホストゾーンがすでにある場合)     || resource | aws_route53_zone   | example_test        | ホストゾーンの作成(ホストゾーンを新規に作成する場合) || resource | aws_route53_record | example             | ALB の DNS レコード                                  || resource | aws_route53_record | example_certificate | SSL 証明書の検証用レコード                           || 種別     | リソース種類                   | 名前    | 備考                                                                                                                  || -------- | ------------------------------ | ------- | --------------------------------------------------------------------------------------------------------------------- || resource | aws_acm_certificate            | example | SSL 証明書                                                                                                            || resource | aws_acm_certificate_validation | example | SSL 証明書の検証完了まで待機（apply 時に SSL 証明書の検証が完了するまで待つ。何かのリソースが作られるわけではない。） || 種別     | リソース種類            | 名前     | 備考                                                         || -------- | ----------------------- | -------- | ------------------------------------------------------------ || resource | aws_ecs_cluster         | example  | ECS クラスター                                               || resource | aws_ecs_task_definition | example  | ECS タスク定義                                               || resource | aws_ecs_service         | example  | ECS サービス（起動タスクの数やタスクの維持、ALB との橋渡し） || module   | -                       | nginx_sg | Nginx 用セキュリティグループ                                 || 種別     | リソース種類             | 名前                           | 備考                                                                  || -------- | ------------------------ | ------------------------------ | --------------------------------------------------------------------- || resource | aws_cloudwatch_log_group | for_ecs                        | CloudWatch Logs                                                       || data     | aws_iam_policy           | ecs_task_execution_role_policy | ECS タスク実行 IAM ロールポリシーの参照（AWS が管理しているポリシー） || data     | aws_iam_policy_document  | ecs_task_execution             | ECS タスク実行 IAM ロールのポリシードキュメント                       || module   | -                        | ecs_task_execution_role        | ECS タスク実行 IAM ロール                                             || 種別     | リソース種類            | 名前          | 備考                    || -------- | ----------------------- | ------------- | ----------------------- || resource | aws_ecs_task_definition | example_batch | バッチ用 ECS タスク定義 || 種別     | リソース種類                | 名前                    | 備考                                   || -------- | --------------------------- | ----------------------- | -------------------------------------- || resource | aws_cloudwatch_log_group    | for_ecs_scheduled_tasks | バッチ用 CloudWatch Logs               || module   | -                           | ecs_events_role         | CloudWatch イベント IAM ロール         || data     | aws_iam_policy              | ecs_events_role_policy  | CloudWatch イベント IAM ロールポリシー || resource | aws_cloudwatch_event_rule   | example_batch           | CLoudWatch イベントルール              || resource | aws_cloudwatch_event_target | example_batch           | CloudWatch イベントターゲット          || 種別     | リソース種類      | 名前        | 備考                        || -------- | ----------------- | ----------- | --------------------------- || resource | aws_ssm_parameter | db_username | DB のユーザ名の定義         || resource | aws_ssm_parameter | db_password | DB のダミーパスワードの定義 || 種別     | リソース種類  | 名前    | 備考                                                         || -------- | ------------- | ------- | ------------------------------------------------------------ || resource | aws_kms_key   | example | カスタマーマスターキー                                       || resource | aws_kms_alias | example | エイリアスの定義(カスタマーキーの UUID では判別しづらいため) || 種別     | リソース種類           | 名前     | 備考                                                                                        || -------- | ---------------------- | -------- | ------------------------------------------------------------------------------------------- || resource | aws_db_parameter_group | example  | DB パラメータグループ                                                                       || resource | aws_db_option_group    | example  | DB オプショングループ（DB エンジンにオプション機能を追加する。例は MariaDB 監査プラグイン） || resource | aws_db_subnet_group    | example  | DB サブネットグループ(DB を稼働させるサブネットの定義)                                      || resource | aws_db_instance        | example  | DB インスタンス                                                                             || module   | -                      | mysql_sg | DB インスタンスのセキュリティグループ                                                       || 種別     | リソース種類                      | 名前     | 備考                                                       || -------- | --------------------------------- | -------- | ---------------------------------------------------------- || resource | aws_elasticache_parameter_group   | example  | ElastiCache パラメータグループ                             || resource | aws_elasticache_subnet_group      | example  | ElastiCache サブネットグループ                             || resource | aws_elasticache_replication_group | example  | ElastiCache レプリケーショングループ（Redis サーバの作成） || module   | -                                 | redis_sg | ElastiCache レプリケーショングループのセキュリティグループ || 種別     | リソース種類             | 名前    | 備考                       || -------- | ------------------------ | ------- | -------------------------- || resource | aws_ecr_repository       | example | ECR レポジトリ             || resource | aws_ecr_lifecycle_policy | example | ECR ライフサイクルポリシー || 種別     | リソース種類  | 名前     | 備考                             || -------- | ------------- | -------- | -------------------------------- || resource | aws_s3_bucket | artifact | アーティファクトストア用バケット || 種別     | リソース種類            | 名前           | 備考                                           || -------- | ----------------------- | -------------- | ---------------------------------------------- || data     | aws_iam_policy_document | codebuild      | CodeBuild サービスロールのポリシードキュメント || module   | -                       | codebuild_role | CodeBuild サービルロール                       || resource | aws_codebuild_project   | example        | CodeBuild プロジェクト                         || 種別     | リソース種類              | 名前              | 備考                                                                                 || -------- | ------------------------- | ----------------- | ------------------------------------------------------------------------------------ || data     | aws_iam_policy_document   | codepipeline      | CodePipeline サービスロールのポリシードキュメント                                    || module   | -                         | codepipeline_role | CodePipeline サービスロール                                                          || resource | aws_codepipeline          | example           | CodePipeline(例では 3 つのステージで実装する)                                        || resource | aws_codepipeline_webhook  | example           | CodePipeline Webhook                                                                 || resource | github_repository_webhook | example           | GitHub Webhook(GitHub 上でのイベントを検知し、コードの変更を通知する Webhook の定義) || 種別     | リソース種類      | 名前         | 備考                                     || -------- | ----------------- | ------------ | ---------------------------------------- || resource | aws_ssm_parameter | github_token | GitHub Token を SSM パラメータとして定義 || 種別     | リソース種類             | 名前                  | 備考                                                                                                                              || -------- | ------------------------ | --------------------- | --------------------------------------------------------------------------------------------------------------------------------- || data     | aws_iam_policy_document  | ec2_for_ssm           | オペレーションサーバ用ポリシードキュメント                                                                                        || data     | aws_iam_policy           | ec2_for_ssm           | Session Manager 用に定義されているポリシーをベースに利用する                                                                      || module   | -                        | ec2_for_ssm_role      | オペレーションサーバ用 IAM ロール                                                                                                 || resource | aws_iam_instance_profile | ec2_for_ssm           | インスタンスプロファイル(EC2 は直接 IAM ロールを関連付けられないため、IAM ロールをラップしたインスタンスプロファイルを関連付ける) || resource | aws_instance             | example_for_operation | オペレーションサーバ用 EC2 インスタンス                                                                                           || 種別     | リソース種類  | 名前                  | 備考                                           || -------- | ------------- | --------------------- | ---------------------------------------------- || resource | aws_s3_bucket | operation_instance_id | オペレーションログを保存する S3 バケットの定義 || 種別     | リソース種類             | 名前      | 備考                                         || -------- | ------------------------ | --------- | -------------------------------------------- || resource | aws_cloudwatch_log_group | operation | オペレーションログを保存する CloudWatch Logs || 種別     | リソース種類     | 名前                      | 備考                            || -------- | ---------------- | ------------------------- | ------------------------------- || resource | aws_ssm_document | session_manager_run_shell | Session Manager 用 SSM document || 種別     | リソース種類  | 名前            | 備考                           || -------- | ------------- | --------------- | ------------------------------ || resource | aws_s3_bucket | cloudwatch_logs | CloudWatch Logs 永続化バケット || 種別     | リソース種類                         | 名前                       | 備考                                                                                                                                 || -------- | ------------------------------------ | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------ || data     | aws_iam_policy_document              | kinesis_data_firehose      | Kinesis Data Firehose IAM ロールのポリシードキュメントの定義                                                                         || module   | -                                    | kinesis_data_firehose_role | Kinesis Data Firehose 用 IAM ロール                                                                                                  || resource | aws_kinesis_firehose_delivery_stream | example                    | Kinesis Data Firehose 配信ストリーム(Kinesis Data Firehose にログが流れるとこの配信ストリームに設定した S3 バケットへログを保存する) || 種別     | リソース種類                           | 名前                 | 備考                                              || -------- | -------------------------------------- | -------------------- | ------------------------------------------------- || data     | aws_iam_policy_document                | cloudwatch_logs      | CloudWatch Logs 用 IAM ロールポリシードキュメント || module   | -                                      | cloudwatch_logs_role | CloudWatch Logs 用 IAM ロール                     || resource | aws_cloudwatch_log_subscription_filter | example              | CloudWatch Logs サブスクリプションフィルタ        |- [GitHub - hashicorp/setup-terraform: Sets up Terraform CLI in your GitHub Actions workflow.](https://github.com/hashicorp/setup-terraform)"},{"name":"terragrunt.md","content":"### COMMAND\u003c!--{{{--\u003erun-allplan-all (DEPRECATED: use run-all)apply-all (DEPRECATED: use run-all)output-all (DEPRECATED: use run-all)destroy-all (DEPRECATED: use run-all)validate-all (DEPRECATED: use run-all)terragrunt-infovalidate-inputsgraph-dependencieshclfmtaws-provider-patch---options:terragrunt-configterragrunt-tfpathterragrunt-no-auto-initterragrunt-no-auto-retryterragrunt-non-interactiveterragrunt-working-dirterragrunt-download-dirterragrunt-sourceterragrunt-source-mapterragrunt-source-updateterragrunt-ignore-dependency-errorsterragrunt-iam-roleterragrunt-iam-assume-role-durationterragrunt-exclude-dirterragrunt-include-dirterragrunt-strict-includeterragrunt-ignore-dependency-orderterragrunt-ignore-external-dependenciesterragrunt-include-external-dependenciesterragrunt-parallelismterragrunt-debugterragrunt-checkterragrunt-hclfmt-fileterragrunt-override-attr\u003c!--}}}--\u003e### Terraform built-in functions\u003c!--{{{--\u003efind_in_parent_folderspath_relative_to_includepath_relative_from_includeget_envget_platformget_terragrunt_dirget_parent_terragrunt_dirget_original_terragrunt_dirget_terraform_commands_that_need_varsget_terraform_commands_that_need_inputget_terraform_commands_that_need_lockingget_terraform_commands_that_need_parallelismget_aws_account_idget_aws_caller_identity_arnget_terraform_commandget_terraform_cli_argsget_aws_caller_identity_user_idrun_cmdread_terragrunt_configsops_decrypt_fileget_terragrunt_source_cli_flag\u003c!--}}}--\u003e### Configuration Blocks and Attributes\u003c!--{{{--\u003eBlocksterraformremote_stateincludelocalsdependencydependenciesgenerateAttributesinputsdownload_dirprevent_destroyskipiam_roleiam_assume_role_durationterraform_binaryterraform_version_constraintterragrunt_version_constraintretryable_errors\u003c!--}}}--\u003e### consept1. Keep your Terraform code DRY   -\u003e DRY common Terraform code with Terragrunt generate blocks2. Keep your remote state configuration DRY3. Keep your Terraform CLI arguments DRY4. Promote immutable, versioned Terraform modules across environments| Terraform Version | Terragrunt Version                                                           || ----------------- | ---------------------------------------------------------------------------- || 0.15.x            | \u003e= [0.29.0](https://github.com/gruntwork-io/terragrunt/releases/tag/v0.29.0) || 0.14.x            | \u003e= [0.27.0](https://github.com/gruntwork-io/terragrunt/releases/tag/v0.27.0) |### terragrunt.hcl"},{"name":"tmuxconf.md","content":"```tmux# set {{{set -g base-index 1set -s escape-time 0set -g display-time 10000set -g history-limit 10000set -g focus-events onset -g visual-activity offset -g default-command \"$SHELL\"set -g default-terminal 'screen-256color'set -ga terminal-overrides ',xterm-256color:Tc'set -ga terminal-overrides ',screen-256color:Tc'set -ga terminal-overrides '*:Ss=\\E[%p1%d q:Se=\\E[ q'# set -g status on# set -g status-bg default# set -g status-style fg=colour240,bg=black# set -g status-left-length 100# set -g status-right-length 100# set -g status-right ''# set -g status-left '#[fg=red,bg=black]\u003c #S#(${HOME}/dotfiles/bin/tmux-git-branch) \u003e #[default]'# set -g pane-border-style fg=colour240,bg=black# set -g pane-active-border-style fg=colour240,bg=black# set -g window-status-separator \"\"# set -g display-panes-colour 'red'# set -g display-panes-active-colour 'red'# set -g clock-mode-colour \"red\"# set -g clock-mode-style 24# set -g message-style fg=red,bg=black# set -g message-command-style fg=red,bg=black# set -g mode-style fg=red,bg=black# }}}# set-window-option {{{setw -g mode-keys visetw -g pane-base-index 1setw -g monitor-activity on# setw -g window-status-format '#{?pane_synchronized,#[bg=red],}#I:#W  '# setw -g window-status-current-format '#{?pane_synchronized,#[bg=red],}#I:#W  '# setw -g window-status-current-style fg=red,bg=black# setw -g window-status-activity-style fg=colour240,bg=black# setw -g window-status-style fg=colour240,bg=black# }}}# set-option {{{set-option -g mouse onset-option -g set-titles onset-option -g repeat-time 0set-option -g status-position topset-option -g status-interval 1set-option -g status-justify \"left\"# }}}# --- Key bindings --- {{{## set prefix ctrl - aset -g prefix \"C-a\"## disable default bindingsunbind \"C-b\"unbind '\"'unbind %## reload ~/.tmux.conf filebind r source-file ~/.tmux.conf## Move jkhlbind j select-pane -Dbind k select-pane -Ubind h select-pane -Lbind l select-pane -Rbind | split-window -hc \"#{pane_current_path}\"bind - split-window -vc \"#{pane_current_path}\"bind c new-window -c \"#{pane_current_path}\"bind + break-panebind H resize-pane -L 10bind J resize-pane -D 5bind K resize-pane -U 5bind L resize-pane -R 10bind-key o resize-pane -Zbind i choose-treebind w choose-tree -wbind P switch-client -nbind N switch-client -p## binded run custom shell script ~/bin/tmux-session-fzfbind f run -b tmux-session-fzf## brew install reattach-to-user-namespace## reattach-to-user-namespace to share clipboard while tmux and macos.## echo $0 # expected current shell nameset-option -g default-command \"reattach-to-user-namespace -l $0\"## To start copy-mode, type (ctrl - a - ])## when typed v, start select textbind-key -T copy-mode-vi v send-keys -X begin-selection## when typed y, selected text is clippedbind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \"reattach-to-user-namespace pbcopy\"# }}}# --- Plugins ---{{{## tmux-tpm auto installationif \"test ! -d ~/.tmux/plugins/tpm\" \\   \"run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm \u0026\u0026 ~/.tmux/plugins/tpm/bin/install_plugins'\"run -b '~/.tmux/plugins/tpm/tpm'set -g @plugin 'tmux-plugins/tpm'## https://github.com/tmux-plugins/tmux-yankset -g @plugin 'tmux-plugins/tmux-yank'## ctrl - a - F## https://github.com/sainnhe/tmux-fzfset -g @plugin 'sainnhe/tmux-fzf'## ctrl - a - u## https://github.com/wfxr/tmux-fzf-urlset -g @plugin 'wfxr/tmux-fzf-url'set -g @plugin 'jabirali/tmux-powertab'set -g @powertab-pathname on# }}}```| コマンド          | 役割                                   || ----------------- | -------------------------------------- || prefix + ?        | キーバインド一覧                       || prefix + s        | セッションの一覧表示                   || prefix + c        | 新規ウィンドウ作成・追加               || prefix + w        | ウィンドウの一覧                       || prefix + \u0026        | ウインドウの破棄                       || prefix + n        | 次のウインドウへ移動                   || prefix + p        | 前のウインドウへ移動                   || prefix + \\|       | 左右にペイン分割                       || prefix + *-        | 上下にペイン分割                       || prefix + h        | 左のペインに移動                       || prefix + j        | 下のペインに移動                       || prefix + k        | 上のペインに移動                       || prefix + l        | 右のペインに移動                       || prefix + H        | ペインを左にリサイズ                   || prefix + J        | ペインを下にリサイズ                   || prefix + K        | ペインを上にリサイズ                   || prefix + L        | ペインを右にリサイズ                   || prefix + x        | ペインの破棄                           || prefix + スペース | ペインのレイアウト変更                 || prefix + Ctrl + o | ペインの入れ替え                       || prefix + {        | ペインの入れ替え(上方向)               || prefix + }        | ペインの入れ替え(下方向)               || prefix + [        | コピーモードの開始(カーソルキーで移動) || prefix + v        | コピー開始位置決定(vi モード)          || prefix + y        | コピー終了位置決定(vi モード)          || prefix + Crtl + p | コピー内容の貼り付け                   |"},{"name":"tput.md","content":"$ tput setaf \u003c色番号\u003e #文字色を色番号にする$ tput setab \u003c色番号\u003e #文字色を色番号にする$ tput cup \u003cy 座標\u003e \u003cx 座標\u003e # 上から x 行目左から y 文字目にカーソル移動$ tput bold #太字$ tput clear # clear コマンドと同じ効果$ tput sgr0 # 装飾解除$ tput cols # ターミナルの横幅を文字数で出力$ tput lines # ターミナルの縦幅を文字数で出力$ tput civis # カーソル非表示$ tput cnorm # カーソル表示| 色番号 | 色       || ------ | -------- || 0      | 黒       || 1      | 赤       || 2      | 緑       || 3      | 黄色     || 4      | 青       || 5      | マゼンタ || 6      | シアン   || 7      | 白       |"},{"name":"transaction.md","content":"SHOW VARIABLES LIKE '%commit%';- [x] make table for test db_trans.- [x] sort out what kind of sql operations.- [x] try lua error, pcall method.- [ ] functions compare pcall xcall trycall.- [ ] mysql error method.- [ ] rollback function.[Search Conversations](https://groups.google.com/g/openresty/search?q=mysql%20transaction)```DROP TABLE test_db_transaction_lua;CREATE TABLE IF NOT EXISTS test_db_transaction_lua (    name VARCHAR(255) NOT NULL,    id bigint(20) NOT NULL AUTO_INCREMENT,    ins_t TIMESTAMP DEFAULT CURRENT_TIMESTAMP)  ENGINE=INNODB;INSERT INTO test_db_transaction_lua (name) VALUES (\"one\");INSERT INTO test_db_transaction_lua (name) VALUES (\"two\");INSERT INTO test_db_transaction_lua (name) VALUES (\"three\");INSERT INTO test_db_transaction_lua (name) VALUES (\"four\");DELETE FROM test_db_transaction_lua where name = four```INSERT INTO test (name) VALUES (\"one\");INSERT INTO test (name) VALUES (\"two\");INSERT INTO test (name) VALUES (\"three\");INSERT INTO test (name) VALUES (\"four\");DELETE FROM test where name = four\u003c!-- - [ ] --\u003e- [「トランザクション」とは何か？を超わかりやすく語ってみた！ - Qiita](https://qiita.com/zd6ir7/items/6568b6c3efc5d6a13865)複数の処理を 1 つにまとめたもの。ただし、これら「複数の処理」は分離させることはできない。「トランザクション」は成功か失敗のいずれか- To start a transaction, you use the START TRANSACTION statement. The BEGIN or BEGIN WORK are the aliases of the START TRANSACTION.- To commit the current transaction and make its changes permanent, you use the COMMIT statement.- To roll back the current transaction and cancel its changes, you use the ROLLBACK statement.- To disable or enable the auto-commit mode for the current transaction, you use the SET autocommit statement.supportdb trans の流れPHP のサンプルhttps://stackoverflow.com/questions/2708237/php-mysql-transactions-examplesMySQL のサンプルhttps://www.mysqltutorial.org/mysql-transaction.aspx/以下の場所で書きましょうdb.luadb_trans(schema:string, queries:array)テスト用の functiontests/test_db.luatrans()注意事項複数台の db がある場合は、書き込みは全部 master、読み込みは slaveなので、最初からlocal db = db_conn($schema, false)で一個の master へのコネクションを取得し、その後の処理は全部同じ db connection を使用する必要があります終わったらエラーがなければ db:set_keepalive(conf.db_keepalive, db.db_poolsize)Q: dbc_query2.3 – エラー処理Lua は組み込み型の拡張言語なので、Lua のすべての活動はホストプログラム内の C のコードが Lua のライブラリ関数を呼ぶことから始まります。 (スタンドアロンの Lua を使うときは lua アプリケーションがホストプログラムです。) Lua のチャンクのコンパイル中や実行中にエラーが発生すると、制御がホストに戻り、適切な処置を取ることができます (例えばエラーメッセージを表示するなど)。Lua のコードからは error 関数を呼ぶことでエラーを明示的に発生できます。 Lua でエラーをキャッチする必要がある場合は、 pcall または xpcall を使って保護モードで関数を呼びます。エラーが発生すると、エラーオブジェクト (エラーメッセージとも言います) がそのエラーに関する情報とともに伝播されます。 Lua 自身からエラーが発生するときは、エラーオブジェクトは必ず文字列ですが、プログラムからは任意の値をエラーオブジェクトとしてエラーを発生させることができます。 それらのエラーオブジェクトをどう扱うかは、その Lua のプログラムやホスト次第です。Performing TransactionsTransactions are a mechanism that ensures data consistency. Transactions should have the following four properties −Atomicity − Either a transaction completes or nothing happens at all.Consistency − A transaction must start in a consistent state and leave the system in a consistent state.Isolation − Intermediate results of a transaction are not visible outside the current transaction.Durability − Once a transaction was committed, the effects are persistent, even after a system failure."},{"name":"ttyrec.md","content":"ttyrecttygifttycastttyplaynroff -man ttyplay.1 | lessターミナル操作のアニメーション化をユースケース毎にまとめてみたhttps://dev.classmethod.jp/articles/terminal-animation-creation-summarize-by-case/ttyrec と ttygif でターミナル操作を gif 画像にする ttygif -in file -out outputfile.gifttygif -in file -out outputfile.gif -s 2ターミナル操作をリアルタイム配信する操作を録画しておくのではなく、リアルタイムに配信することもできます。一番簡単な方法は、ターミナルの記録と配信を同時に行ってくれるラッパを使うことです$ ttyreccast \u003c録画ファイル\u003e$ ttyplay \u003c録画ファイル\u003e | PORT=\u003cポート\u003e ttycast -s \u003c横\u003ex\u003c縦\u003e # http://0.0.0.0:\u003cポート\u003e で内容を確認できる"},{"name":"twitter.md","content":"### Mute\u003c!--{{{--\u003e\" https://twitter.com/settings/muted_keywordsActivityTweetgeneric_activity_highlightsgeneric_activity_momentsbreakingRankedOrganicTweetsuggest_activitysuggest_activity_feedsuggest_activity_highlightssuggest_activity_tweetsuggest_grouped_tweet_hashtagsuggest_pyle_tweetsuggest_ranked_organic_tweetsuggest_ranked_timeline_tweetsuggest_recapsuggest_recycled_tweetsuggest_recycled_tweet_inlinesuggest_sc_tweetsuggest_timeline_tweetsuggest_who_to_followsuggestactivitytweetsuggestpyletweetsuggestrecycledtweet_inline```jsconst delayMs = 500; // change this if you feel like its running too fastconst keywords = `ActivityTweetgeneric_activity_highlightsgeneric_activity_momentsbreakingRankedOrganicTweetsuggest_activitysuggest_activity_feedsuggest_activity_highlightssuggest_activity_tweetsuggest_grouped_tweet_hashtagsuggest_pyle_tweetsuggest_ranked_organic_tweetsuggest_ranked_timeline_tweetsuggest_recapsuggest_recycled_tweetsuggest_recycled_tweet_inlinesuggest_sc_tweetsuggest_timeline_tweetsuggest_who_to_followsuggestactivitytweetsuggestpyletweetsuggestrecycledtweet_inline`.split(/\\W+/);const nativeInputValueSetter = Object.getOwnPropertyDescriptor(  window.HTMLInputElement.prototype,  \"value\").set;const addMutedKeyword = (keyword) =\u003e {  const input = document.querySelector(\"[name='keyword']\");  nativeInputValueSetter.call(input, keyword);  input.dispatchEvent(new Event(\"input\", { bubbles: true }));  document.querySelector(\"[data-testid='settingsDetailSave']\").click();};const delay = () =\u003e {  return new Promise((res) =\u003e setTimeout(res, delayMs));};keywords.reduce(async (prev, keyword) =\u003e {  await prev;  document.querySelector(\"a[href='/settings/add_muted_keyword']\").click();  await delay();  addMutedKeyword(keyword);  return delay();}, Promise.resolve());```\u003c!--}}}--\u003e"},{"name":"type-challenge.md","content":"### Conditional types\u003c!--{{{--\u003e```tsT extends U ? X : Y```### Generics```tsinterface Something\u003cT\u003e {  id: number;  flag: T;}```Generics は型をプレースホルダのように扱う仕組みです。\u003cT\u003e のように型エイリアスを指定します。\u003c!--}}}--\u003e### lib.es5.d.ts\u003c!--{{{--\u003e```tsinterface ArrayLike\u003cT\u003e {    readonly length: number;    readonly [n: number]: T;}/** * Make all properties in T optional */type Partial\u003cT\u003e = {    [P in keyof T]?: T[P];};/** * Make all properties in T required */type Required\u003cT\u003e = {    [P in keyof T]-?: T[P];};/** * Make all properties in T readonly */type Readonly\u003cT\u003e = {    readonly [P in keyof T]: T[P];};/** * From T, pick a set of properties whose keys are in the union K */type Pick\u003cT, K extends keyof T\u003e = {    [P in K]: T[P];};/** * Construct a type with a set of properties K of type T */type Record\u003cK extends keyof any, T\u003e = {    [P in K]: T;};/** * Exclude from T those types that are assignable to U */type Exclude\u003cT, U\u003e = T extends U ? never : T;/** * Extract from T those types that are assignable to U */type Extract\u003cT, U\u003e = T extends U ? T : never;/** * Construct a type with the properties of T except for those in type K. */type Omit\u003cT, K extends keyof any\u003e = Pick\u003cT, Exclude\u003ckeyof T, K\u003e\u003e;/** * Exclude null and undefined from T */type NonNullable\u003cT\u003e = T extends null | undefined ? never : T;/** * Obtain the parameters of a function type in a tuple */type Parameters\u003cT extends (...args: any) =\u003e any\u003e = T extends (...args: infer P) =\u003e any ? P : never;/** * Obtain the parameters of a constructor function type in a tuple */type ConstructorParameters\u003cT extends new (...args: any) =\u003e any\u003e = T extends new (...args: infer P) =\u003e any ? P : never;/** * Obtain the return type of a function type */type ReturnType\u003cT extends (...args: any) =\u003e any\u003e = T extends (...args: any) =\u003e infer R ? R : any;/** * Obtain the return type of a constructor function type */type InstanceType\u003cT extends new (...args: any) =\u003e any\u003e = T extends new (...args: any) =\u003e infer R ? R : any;/** * Convert string literal type to uppercase */type Uppercase\u003cS extends string\u003e = intrinsic;/** * Convert string literal type to lowercase */type Lowercase\u003cS extends string\u003e = intrinsic;/** * Convert first character of string literal type to uppercase */type Capitalize\u003cS extends string\u003e = intrinsic;/** * Convert first character of string literal type to lowercase */type Uncapitalize\u003cS extends string\u003e = intrinsic;```\u003c!--}}}--\u003e## [TypeScript2.8 Conditional Types 活用事例 - Qiita](https://qiita.com/Takepepe/items/a8637d30375374fe8c57){{{### Conditional Types```tstype A1\u003cT\u003e = T extends (a1: infer I, ...rest: any[]) =\u003e any ? I : never;type A2\u003cT\u003e = T extends (a1: any, a2: infer I, ...rest: any[]) =\u003e any  ? I  : never;type MT\u003cT\u003e = (state: A1\u003cT\u003e) =\u003e A1\u003cT\u003e;type MTPL\u003cT\u003e = (state: A1\u003cT\u003e, payload: A2\u003cT\u003e) =\u003e A1\u003cT\u003e;type CR\u003cT\u003e = () =\u003e { type: string };type CRPL\u003cT\u003e = (payload: A2\u003cT\u003e) =\u003e { type: string; payload: A2\u003cT\u003e };type Mutation\u003cT\u003e = MT\u003cT\u003e | MTPL\u003cT\u003e;type Creator\u003cT\u003e = T extends MT\u003cT\u003e ? CR\u003cT\u003e : CRPL\u003cT\u003e;```\u003c!--}}}--\u003e## [実務で使用することが多い TypeScript の型まとめ - Qiita](https://qiita.com/r_ueyama/items/bb693fb012fd3605cd00){{{### Extract Union 型から特定の型を抽出する際```tstype Extract\u003cT, U\u003e = T extends U ? T : never;type Color = \"red\" | \"blue\" | \"yellow\" | \"black\" | \"white\";type ButtonColor = Extract\u003cColor, \"red\" | \"yellow\"\u003e;// type ButtonColor = 'red' | 'yellow'```### Exclude Union Types から特定の型を取り除く際```tstype Exclude\u003cT, U\u003e = T extends U ? never : T;type Color = \"red\" | \"blue\" | \"yellow\" | \"black\" | \"white\";type ButtonColor = Extract\u003cColor, \"red\" | \"yellow\"\u003e;// type ButtonColor = 'blue' | 'black' | 'white';```### keyof```tstype Person = {  name: string;  age: number;  location: string;};type K1 = keyof Person;// \"name\" | \"age\" | \"location\"```### React ComponentProps### Mapped Types```ts{[P in K]: T}ここで、P は識別子、K は文字列に代入可能でなければならない型です。そして T は K に対する値の型になります。Mapped Typesを使用することでスマートに型定義が可能になります。```\u003c!--}}}--\u003e[公式ドキュメントを読んでもinferが理解できない人のためのinferの説明 - Qiita](https://qiita.com/ringtail003/items/733aff32ddad7d4fda90){{{```tstype Code\u003cT\u003e = T extends { code: infer U } ? U : never;// \u003cT\u003e に Book,Ticket を付与した時に Code\u003cT\u003e が決定する// Code\u003cBook\u003e = T extends { code: infer number } ? number : never --\u003e number// Code\u003cTicket\u003e = T extends { code: infer string } ? string : never --\u003e string// ---\u003e Code\u003cT\u003e は number | string と同じ```\u003c!--}}}--\u003e"},{"name":"typescript-discriminate-union-types.md","content":"### Discriminated Union```typescriptinterface Square {  kind: \"square\";  size: number;}interface Rectangle {  kind: \"rectangle\";  width: number;  height: number;}type Shape = Square | Rectangle;function area(s: Shape) {  if (s.kind === \"square\") {    // Now TypeScript *knows* that `s` must be a square ;)    // So you can use its members safely :)    return s.size * s.size;  } else {    // Wasn't a square? So TypeScript will figure out that it must be a Rectangle ;)    // So you can use its members safely :)    return s.width * s.height;  }}```### Exhaustive Checksif added new type case ?```typescriptfunction area(s: Shape) {  if (s.kind === \"square\") {    return s.size * s.size;  } else if (s.kind === \"rectangle\") {    return s.width * s.height;  } else if (s.kind === \"circle\") {    return Math.PI * s.radius ** 2;  } else {    const _exhaustiveCheck: never = s;  }}```use switch```typescriptfunction area(s: Shape) {  switch (s.kind) {    case \"square\":      return s.size * s.size;    case \"rectangle\":      return s.width * s.height;    case \"circle\":      return Math.PI * s.radius * s.radius;    default:      const _exhaustiveCheck: never = s;  }}```### User definition Type Guardcant use typeof / instanceof```typescript/** * Just some interfaces */interface Foo {  foo: number;  common: string;}interface Bar {  bar: number;  common: string;}/** * User Defined Type Guard! */function isFoo(arg: any): arg is Foo {  return arg.foo !== undefined;}/** * Sample usage of the User Defined Type Guard */function doStuff(arg: Foo | Bar) {  if (isFoo(arg)) {    console.log(arg.foo); // OK    console.log(arg.bar); // Error!  } else {    console.log(arg.foo); // Error!    console.log(arg.bar); // OK  }}doStuff({ foo: 123, common: \"123\" });doStuff({ bar: 123, common: \"123\" });```"},{"name":"typescript.md","content":"- [なぜ enum の利用が推奨されないのか？](https://qiita.com/saba_can00/items/696baa5337eb10c37342)1. 値に数値をマッピングした場合に意図しない数値でアクセスする記述ができてしまう2. 利用していない enum の値があっても Tree-shaking がうまく働かずバンドルされてしまう3. アンビエントコンテキストにおける const enum の使用はコンパイルエラーになることがある- [TypeScript 2.1 の keyof とか Mapped types](https://qiita.com/Quramy/items/e27a7756170d06bef22a)- [TypeScript tips zenn](https://zenn.dev/tak_iwamoto/articles/d367f989eb4a33)- [TypeScript の static アクセス修飾子](https://qiita.com/M-ISO/items/7120db767cd539f1c58a)- [TypeScript アクセス修飾子](https://qiita.com/a12345/items/384bff6aaeba288ad7f2)  \u003c!-- acesss {{{--\u003e  public クラス外からのアクセス可能。private クラス内でのみアクセス可能。protected 継承クラス内でのみアクセス可能。static 静的なのでクラスで共有。```ts//スーパークラス定義class Super {  constructor() {    this.public(); //true    this.private(); //true    this.protected(); //true    this.static(); //コンパイルエラー  }  public public(): boolean {    return true;  }  private private(): boolean {    return true;  }  protected protected(): boolean {    return true;  }  static static(): boolean {    return true;  }}//サブクラス定義class Sub extends Super {  constructor() {    super();    this.public(); //true    this.private(); //コンパイルエラー    this.protected(); //true    this.static(); //コンパイルエラー  }}```//インスタンスlet test = new Sub();test.public(); //truetest.private(); //コンパイルエラーtest.protected(); //コンパイルエラーtest.static(); //コンパイルエラー//クラス静的メンバSub.public(); //コンパイルエラーSub.private(); //コンパイルエラーSub.protected(); //コンパイルエラーSub.static(); //true\u003c!--}}}--\u003e- [TypeScript の union 型は or](https://qiita.com/uhyo/items/b1f806531895cb2e7d9a)- [TypeScript の Interface と Type の比較](https://qiita.com/tkrkt/items/d01b96363e58a7df830e)\u003c!-- interface or type {{{--\u003eInterface Type用途 クラスやオブジェクトの規格を定義 型や型の組み合わせに別名を付ける継承 可能 交差型で同じことができる同名要素の宣言 マージされる エラーClass への implement 可能 可能交差型、共用体型、タプル型 不可能 可能Mapped Types 不可能 可能規定しないプロパティの扱い 他にもプロパティが存在しうるものとして扱う 存在しないものとして扱う\u003c!--}}}--\u003eenum or union\u003c!--{{{--\u003eunionconst Commands = {Add: \"add new task\",Complete: \"select completed\",Toggle: \"toggle show completed\",Clean: \"remove completed\",Quit: \"quit interactive mode\",} as consttype typeCommands = typeof objCommands[keyof typeof objCommands]\u003c!--}}}--\u003eenum or union\u003c!--{{{--\u003e// Disposable Mixinclass Disposable {isDisposed: boolean;dispose() {this.isDisposed = true;}}// Activatable Mixinclass Activatable {isActive: boolean;activate() {this.isActive = true;}deactivate() {this.isActive = false;}}class SmartObject implements Disposable, Activatable {constructor() {setInterval(() =\u003e console.log(this.isActive + \" : \" + this.isDisposed), 500);}    interact() {        this.activate();    }    // Disposable    isDisposed: boolean = false;    dispose: () =\u003e void;    // Activatable    isActive: boolean = false;    activate: () =\u003e void;    deactivate: () =\u003e void;}applyMixins(SmartObject, [Disposable, Activatable]);let smartObj = new SmartObject();setTimeout(() =\u003e smartObj.interact(), 1000);function applyMixins(derivedCtor: any, baseCtors: any[]) {baseCtors.forEach(baseCtor =\u003e {Object.getOwnPropertyNames(baseCtor.prototype).forEach(name =\u003e {derivedCtor.prototype[name] = baseCtor.prototype[name];});});}\u003c!--}}}--\u003e[ ./type-challenge.md ]https://github.com/kena0ki/adima"},{"name":"ubuntu-setup.md","content":"sudo apt-get update -ysudo apt-get install build-essential curl git make filesh -c \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\"export PATH='/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin':\"$PATH\"sudo apt-get install build-essentialecho 'eval $(/home/ubuntu/.linuxbrew/bin/brew shellenv)' \u003e\u003e /home/ubuntu/.profileeval $(/home/ubuntu/.linuxbrew/bin/brew shellenv)brew install gccbrew install tmuxbrew install treebrew install neovimbrew install fzfbrew install fdbrew install riggrepbrew install reattach-to-user-namespacebrew install gitbrew install wgetbrew install makebrew install caskbrew install curlbrew install pythonbrew install nodebrewbrew install nodebrew install gobrew install goenvbrew install groffsh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpmnpm install -g yarnnpm install -g neovimbrew install pythonsudo apt-get install pythonsudo apt update pythonpython3 -m pip install pipbrew install rubysudo apt update gemsudo passwd ubuntusudo passwdsudo chsh```apt で入るものflameshot: スクショを撮って画像を加工できますpeek: GIF を撮るのに便利ですsimplescreenrecorder: GIF 以外はこっちを使っていますffmpeg: 撮影した動画をさくっと圧縮するのに便利ですsilversearcher-ag: grep はもう使っていられない…mlocate: locateが使えるようになりますbat: いい感じにシンタックスハイライトしてcatしてくれます（apt版だとコマンドはbatcatです）fd-find: find のオプションも僕には難しすぎるので…（apt版だとコマンドはfdfindです）fzf: これ単体で使うことは少ないですが、色んなツールが依存していたりしますtig: TUI で Git ログを見れますtree: ディレクトリ構造を見れますxsel: 標準出力をクリップボードにコピーできます（pbcopy のエイリアスを作るのがオススメです）htop: これを表示させているだけで仕事している感が出るとか出ないとかjq: JSON ファイルから何かを抽出したい時（ほとんどの人は滅多になさそう）に使えますbrew で入るものripgrep: ag に飽きた方へ（あまり使ってないです）sd: sed の使い方イマイチわからん人でも使えると思いますghq: git clone 時にどこに置くか考えなくて良くなるので便利ですyq: jq の YAML 版です```sudo add-apt-repository ppa:neovim-ppa/unstablesudo apt-get updatesudo apt install neovim/focal"},{"name":"uiux.md","content":"https://zenn.dev/seya/articles/6e41e4d8c7aa5dPartially Persistent Headersマイクロインタラクションのアニメーションを入れよう！"},{"name":"unicage.md","content":"ユニケージとは- 報情システムはコンピュータの中ではなく業務（人の仕事）の中にある- システムは生き物、人に合わせてシステムは育つ- 人が情報を口にするときはコードではなく言葉である- 共有しないものは固有する、共有するものは全有する- ユーザのそばでシステム開発を、ユーザの関心はプログラム作成ではなくデータ処理だ- システム開発の非分業化、セル方式の推進- 手戻り、やり直しはシステム完成度を高めるための重要なプロセス- さまざまな技術を混在させない、素人がシステムを構築できるのが理想- 機械的な効率処理は、劇的なハードウェア性能の向上で解決- データが表現できる情報はなるべく自由であるべき（可変長テキストデータ）- データは重複しても構わない、冗長なデータを作り自由度を高める- 発生データは捨てない、上書き更新はしない、発生データを管理すればよい- 生データを5W1Hに分解して保存、アプリケーションデータは一時ファイル- ファイル名を業務の呼び名にすれば探す手間が少ない- ファイル処理効率は、OSのディレクトリ機能を活用- 過度なリアルタイム性を求めない（間に合えばよい）- シェルスクリプト=100個以内の汎用コマンド（9割）+アプリ専用コマンド（1割）- コマンドは少数精鋭できっちりと作り再利用を強制指導- シェルプログラムは作り捨てにしてもいいくらいに簡単に（バージョン管理しない）- カーネルスケジューラ機能を素直に使えばマルチコア性能がきっちり発揮される- 自分なりに分類してみた。- 1.システム 情報システムはコンピュータの中ではなく業務（人の仕事）の中にある- 1.システム システムは生き物、人に合わせてシステムは育つ- 1.システム ユーザのそばでシステム開発を、ユーザの関心はプログラム作成ではなくデータ処理だ- 1.システム システム開発の非分業化、セル方式の推進- 1.システム 手戻り、やり直しはシステム完成度を高めるための重要なプロセス- 1.システム さまざまな技術を混在させない、素人がシステムを構築できるのが理想- 1.システム 人が情報を口にするときはコードではなく言葉である- 1.システム ファイル名を業務の呼び名にすれば探す手間が少ない- 2.データ データが表現できる情報はなるべく自由であるべき（可変長テキストデータ）- 2.データ データは重複しても構わない、冗長なデータを作り自由度を高める- 2.データ 発生データは捨てない、上書き更新はしない、発生データを管理すればよい- 2.データ 生データを5W1Hに分解して保存、アプリケーションデータは一時ファイル- 2.データ 共有しないものは固有する、共有するものは全有する- 3.シェルスクリプト シェルスクリプト=100個以内の汎用コマンド（9割）+アプリ専用コマンド（1割）- 3.シェルスクリプト コマンドは少数精鋭できっちりと作り再利用を強制指導- 3.シェルスクリプト シェルプログラムは作り捨てにしてもいいくらいに簡単に（バージョン管理しない）- 4.処理効率 ファイル処理効率は、OSのディレクトリ機能を活用- 4.処理効率 機械的な効率処理は、劇的なハードウェア性能の向上で解決- 4.処理効率 過度なリアルタイム性を求めない（間に合えばよい）- 4.処理効率 カーネルスケジューラ機能を素直に使えばマルチコア性能がきっちり発揮される"},{"name":"unicode.md","content":" U+F8FF✔ U+2714❤ U+2764😄 U+1F604🔥 U+1F525👍 U+1F44D⭐U+2B50♥ U+2B50U+1F602U+2764U+1F60DU+1F923U+1F60AU+1F64FU+1F495U+1F62DU+1F525U+1F618U+1F44DU+1F970U+1F60EU+1F606U+1F601U+1F609U+1F914U+1F605U+1F614U+1F644U+1F61CU+2665U+267BU+1F612U+1F629U+263AU+1F601U+1F44CU+1F44FU+1F494U+1F496U+1F499U+1F622U+1F4AAU+1F917U+1F49CU+1F60EU+1F607U+1F339U+1F926U+1F389U+1F49EU+270CU+2728U+1F937U+1F631U+1F60CU+1F338U+1F64CU+1F60B"},{"name":"unix-commands.md","content":"asa - ASA/FORTRAN 紙送り制御を解釈するat - 指定された時間にコマンドを実行するautoload - 定義されていない関数名を示すautomount - 自動マウント機能を構成するawk - awk 言語で書かれたプログラムを処理するbasename - パス名の非ディレクトリー・コンポーネントを戻すbatch - システム負荷が低いときにコマンドを実行するbc - 任意精度の算術計算言語を使用するbg - ジョブをバックグラウンドに移動するbpxmtext - 理由コードのテキストを表示するbpxtrace - プロセスのトレースをアクティブ化または非アクティブ化するbreak - シェル・スクリプト内のループを終了するc++ - C および C++ ソース・コードのコンパイル、実行可能ファイルのリンク・エディット および作成c89 - ホスト環境変数を使用したコンパイラー呼び出しc99 - C ソース・コードのコンパイル、実行可能ファイルのリンク・エディットおよび作成cal - 月または年のカレンダーを表示するcalendar - すべての現在の予約を表示するcancel - 印刷キュー要求を取り消す (スタブ・コマンド)captoinfo - terminfo データベースにある端末項目を出力するcat - テキスト・ファイルを連結または表示するcc - C ソース・コードのコンパイル、実行可能ファイルのリンク・エディットおよび作成cd - 作業ディレクトリーを変更するceebldtx - メッセージ・ソース・ファイルをアセンブラー・ソース・ファイルに変換するchaudit - ファイルの監査フラグを変更するchcp - 端末のために ASCII/EBCDIC コード・ページを照会または設定するchgrp - ファイルまたはディレクトリーのグループ所有者を変更するchlabel - ファイルおよびディレクトリーのセキュリティー・ラベルを設定するchmod - ファイルまたはディレクトリーのモードを変更するchmount - ファイル・システムのマウント属性を変更するchown - ファイルまたはディレクトリーの所有者またはグループを変更するchroot - コマンドの実行のためにルート・ディレクトリーを変更するchtag - ファイル・タグ情報の変更cksum - チェックサムおよびバイト・カウントを計算して表示するclear - 画面の前の出力をすべて消去するcmp – 2 つのファイルを比較するcol - 逆方向行送りを除去する: (コロン) - 何もしない (正常に)comm — 2 つのファイルに共通な行を表示および選択またはリジェクトするcommand - 単純コマンドを実行するcompress - Lempel-Ziv ファイルの圧縮confighfs - HFS ファイル・システム用に vfs_pfsctl 関数を呼び出すconfigstk - AF_UEINT スタックを構成するconfigstrm - STREAMS 物理ファイル・システム構成を設定および照会するcontinue - シェル・スクリプト内のループの次の反復へスキップするcopytree - すべてのファイル属性を保持しながらファイル階層のコピーを作成するcp - ファイルをコピーするcpio - ファイル・アーカイブをコピー・イン/アウトするcron デーモン - 指定された日時にコマンドを実行するcrontab - 定期的なバックグラウンド・ジョブをスケジュールするcsplit - テキスト・ファイルを分割するctags - ex、more、および vi のためにタグ・ファイルを作成するcu - 他のシステムを呼び出す (スタブのみ)cut - ファイルの各行から選択されたフィールドを切り取るcxx - C および C++ ソース・コードのコンパイル、実行可能ファイルのリンク・エディットおよび作成date - 日付および時刻を表示するdbgld - デバッグ用のモジュール・マップを作成するdbx - デバッガーを使用するdd - ファイルを変換し、コピーするdf - ファイル・システム内のフリー・スペースの量を表示するdiff - 2 つのファイルを比較し、違いを表示するdircmp - ディレクトリーを比較するdirname - パス名のディレクトリー・コンポーネントを戻す. (dot) - 現行環境でシェル・ファイルを実行するdspcat - メッセージ・カタログの全体または一部を表示するdspmsg - メッセージ・カタログから選択されたメッセージを表示するdu - ファイル・スペースの使用量を要約するecho — 引数を標準出力に書き込むed - ed 行指向テキスト・エディターを使用するedcmtext - errnojr 理由コードのテキストを表示するegrep - 指定したパターンについてファイルを検索するenv - プロセスのための環境変数を表示または設定するeval — 引数を連結してコマンドを組み立てるex - ex テキスト・エディターを使用するexec - コマンドを実行し、ファイル記述子を開く、クローズする、またはコピーするexit - シェルの親プロセスまたは TSO/E へ戻るexpand - タブをスペースに展開するexport - エクスポート変数を設定するexpr - 引数を式として評価するexrecover デーモン - vi および ex ファイルを検索するextattr — ファイルのための拡張属性を設定、リセット、および表示するfalse - ゼロ以外の終了コードを戻すfc - コマンド・ヒストリー・リストを処理するfg - ジョブをフォアグラウンドに移動するfgrep - 指定したパターンについてファイルを検索するfile — ファイル・タイプを判別するfind - 指定した基準に合致するファイルを検出するfilecache - ファイル・キャッシュを管理するfold - 行を短い行に分割するfunctions - 関数に対する属性を表示するか、関数に属性を割り当てるfuser - オープン・ファイルを持つプロセスのプロセス ID をリストするgencat - メッセージ・カタログを作成または変更するgetconf — 構成値を取得するgetfacl - 所有者、グループ、およびアクセス制御リスト (ACL) の項目を表示するgetopts — ユーティリティー・オプションを解析するgrep - 指定したパターンについてファイルを検索するhash - トラックされた別名を作成するhead - ファイルの最初の部分を表示するhistory - コマンド・ヒストリー・リストを表示するiconv - 文字を 1 つのコード・セットから別のコード・セットに変換するid - ユーザー識別情報を戻すinetd デーモン - ネットワークのサービス管理の提供infocmp - 端末記述を比較または出力するinteger - 各変数に整数値のマークを付けるipcrm - メッセージ・キュー、セマフォー・セット、または共用メモリー ID を除去するipcs - プロセス間通信機能の状況を報告するjobs - 現行セッション内のジョブの状況を戻すjoin - 2 つのソート済みテキスト・リレーショナル・データベースを結合するkill - プロセスまたはジョブを終了させる、またはシグナルを送る左大括弧 — 条件のテストld - リンク・オブジェクト・ファイルlet - 算術式を評価するlex - 字句解析タスク用のプログラムを生成するline - 標準入力の 1 行をコピーするlink - ファイルへのハード・リンクを作成するln - ファイルへのリンクを作成するlocale - ロケール固有情報を入手するlocaledef - ロケール環境を定義するlogger - メッセージをログに記録するlogname - ユーザーのログイン名を戻すlp - ファイルをプリンターに送るlpstat - 印刷キューの状況を表示する (スタブ・コマンド)ls - ファイルおよびディレクトリーの名前と属性をリストするmail - メール・メッセージを読み取り、送信するmailx - 電子メールを送信または受信するmake - プログラム生成ファイルおよび相互依存ファイルを保守するmakedepend - ソースに依存した情報を生成するman - オンライン解説書のセクションを表示するmesg - メッセージを許可または拒否するmkcatdefs - メッセージ・ソース・ファイルをプリプロセスするmkdir - ディレクトリーを作成するmkfifo - FIFO スペシャル・ファイルを作成するmknod - FIFO またはキャラクター・スペシャル・ファイルを作成するmore - ファイルを 1 ページずつ表示するmount - ファイル・システムを論理的にマウントするmv - ファイルまたはディレクトリーを名前変更または移動するnewgrp - 新しいグループに変更するnice — 異なる優先順位でコマンドを実行するnl - ファイルの行に番号付けするnm - オブジェクト、ライブラリーまたは実行可能ファイルのシンボル・テーブルを表示するnohup - ハングアップの影響を受けないプロセスを開始するobrowse - z/OS UNIX ファイルをブラウズするod - 指定されたフォーマットでファイルをダンプするoedit - z/OS UNIX ファイル・システム内のファイルを編集するpack - Huffman コーディングによりファイルを圧縮するpasswd - ユーザーのパスワードまたはパスワード・フレーズを変更するpaste - ファイルの対応行または後続行をマージするpatch - diff 出力を使用してファイルを変更するpathchk - パス名をチェックするpax - 移植可能アーカイブを交換するpcat - Huffman パック・ファイルをアンパックし表示するpg - ファイルを対話式に表示するpr - ファイルをページ編集済み形式にフォーマットし、それを標準出力に送るprint - 引数をシェルから戻すprintenv - 環境変数の値を表示するprintf — 形式化された出力を書き出すps - プロセスの状況を戻すpwd - 作業ディレクトリー名を戻すr - コマンド・ヒストリー・リストを処理するread - 標準入力から行を読み取るreadonly - 変数に読み取り専用のマークを付けるrenice - 実行プロセスの優先順位を変更するreturn - シェル関数または . (ドット) スクリプトから戻るrlogind - rlogin 要求を妥当性検査するrm - ディレクトリー項目を除去するrmdir - ディレクトリーを除去するruncat - mkcatdefs から gencat に出力をパイプ接続するscript — 端末セッションのタイプスクリプトの作成sed - sed 非対話式ストリーム・エディターを開始するset - コマンド・オプションおよび定位置パラメーターを設定または設定解除するsetfacl - アクセス制御リスト (ACL) の設定、削除および変更sh - シェルを起動するshedit — シェル内での対話式コマンドおよびヒストリーの編集shift - 定位置パラメーターをシフトするsleep - プロセスの実行を一定時間中断するskulker - 古いファイルをディレクトリーから除去するsort - ソート・マージ・ユーティリティーを開始するspell - ファイル内のスペル・エラーを検出するsplit - ファイルを管理可能な断片に分割するstop - プロセスまたはジョブを中断するstrings - バイナリー・ファイル内の出力可能ストリングを表示するstrip - 不要な情報を実行可能ファイルから除去するstty - 端末オプションを設定または表示するsu — セッションに関連するユーザー ID を変更するsubmit - バックグラウンド・プロセス用のバッチ・ジョブを実行依頼するsum - チェックサムおよびブロック・カウントを計算して表示するsuspend - 現行シェルに SIGSTOP を送信するsysvar - 静的システム・シンボルを表示するtabs - タブ停止位置を設定するtail – ファイルの末尾部分を表示するtalk - 他のユーザーと通話するtar - ファイルのコピーまたはバックアップを作成するために tar アーカイブ・ファイルを操作するtcsh - C シェルを起動するtee - 出力ストリームを複写するtest - 条件をテストするtic - 端末項目を terminfo データベースに置くtime - コマンドのプロセッサー時間と経過時間を表示するtimes - プロセスと子プロセスの時間を入手するtouch - ファイルのアクセスおよび変更時刻を変更するtput - 端末の特性を変更するtr - 文字を変換するtrap - 異常条件および割り込みをインターセプトするtrue - 値 0 を戻すtso - TSO/E コマンドをシェルから実行するtsocmd - TSO/E コマンドをシェルから実行する (許可コマンドを含む)tsort - ファイルをトポロジー的にソートするtty - ユーザーの端末名を戻すtype - シェルが名前を解釈する方法を指示するtypeset - 変数に属性と値を割り当てるuconvdef - バイナリー変換テーブルを作成するulimit - プロセスの制限を設定するumask - ファイル・モード作成マスクを設定または戻すunalias – 別名定義を削除するuname - 現行オペレーティング・システムの名前を表示するuncompress - ファイルの Lempel-Ziv 圧縮を元に戻すunexpand - スペースをタブに圧縮するuniq — ファイル内の繰り返し行を報告または抽出するunlink - ディレクトリー項目を除去するunmount - ファイル・システムをファイル階層から除去するunpack - Huffman でパックされたファイルをデコードするunset - 変数および関数の値と属性の設定を解除するuptime - システムが実行されていた時間の長さを報告するuucc - UUCP 構成ファイルをコンパイルするuucico デーモン - UUCP ファイル転送要求を処理するuucp - リモート UUCP システム間でファイルをコピーするuucpd デーモン - リモート UUCP システムから TCP/IP 接続のために uucico を起動するuudecode - 送信されたバイナリー・ファイルをデコードするuuencode - ファイルを安全に伝送するためにエンコードするuulog - UUCP イベントに関するログ情報を表示するuuname - リモート UUCP システムのリストを表示するuupick - uuto および uucp で送信されるファイルを管理するuustat - 保留されている UUCP 転送の状況を表示するuuto - ファイルをリモート UUCP システムのユーザーにコピーするuux - リモート UUCP システムでのコマンド実行を要求するuuxqt デーモン - リモート UUCP システムからのコマンド要求を実行するvi - ディスプレイ指向の対話式テキスト・エディターを使用するwait - 子プロセスが終了するのを待つwall - ログインしたユーザーにメッセージをブロードキャストするwc - 改行数、ワード数、およびバイト数をカウントするwhence - シェルがコマンド名を解釈する方法を指示するwho - 現行ユーザーの情報を表示するwhoami - 実効ユーザー名を表示するwrite - 他のユーザーにメッセージを送るwritedown - ユーザーの write-down モードを設定または表示するxlc - カスタマイズ可能構成ファイルを使用したコンパイラー呼び出しxlC - C および C++ ソース・コードのコンパイル、実行可能ファイルのリンク・エディットおよび作成xlc++ - C および C++ ソース・コードのコンパイル、実行可能ファイルのリンク・エディットおよび作成xargs - 引数リストを組み立ててコマンドを実行するyacc - yacc コンパイラーを使用するzcat - データを圧縮解除して表示するzlsof - オープン・ファイル、ソケット、および パイプに関する情報を表示するtailtarunameuptimewcidchmodchowndfwcpingpsnc/netcatnetstatifconfigiostatdiffduinstall Apache + PHP7.2 + MySQL with homebrewinstall memcachedApache Settings , and make php run with apache in your mac[./sed.md][./awk.md][./grep.md][./xargs.md]scriptncscpngrokpv - progresslvnicetopbgcronatnohupteetrcutgrepgunplotsortuniqwcunametimelocalemanchmodlspmset---ripgrepfdpupjqq[diffhexeumpxepr: perform arithmetic or boolean operations or evaluate regular expressionsm4: simple macro processoryes: print a string a lotcal: nice calendarenv: run a command (useful in scripts)printenv: print out environment variables (useful in debugging and scripts)look: find English words (or lines in a file) beginning with a stringcut, paste and join: data manipulationfmt: format text paragraphspr: format text into pages/columnsfold: wrap lines of textcolumn: format text fields into aligned, fixed-width columns or tablesexpand and unexpand: convert between tabs and spacesnl: add line numbersseq: print numbersbc: calculatorfactor: factor integersgpg: encrypt and sign filestoe: table of terminfo entriesnc: network debugging and data transfersocat: socket relay and tcp port forwarder (similar to netcat)slurm: network traffic visualizationdd: moving data between files or devicesfile: identify type of a filetree: display directories and subdirectories as a nesting tree; like ls but recursivestat: file infotime: execute and time a commandtimeout: execute a command for specified amount of time and stop the process when the specified amount of time completes.lockfile: create semaphore file that can only be removed by rm -flogrotate: rotate, compress and mail logs.watch: run a command repeatedly, showing results and/or highlighting changeswhen-changed: runs any command you specify whenever it sees file changed. See inotifywait and entr as well.tac: print files in reversecomm: compare sorted files line by linestrings: extract text from binary filestr: character translation or manipulationiconv or uconv: conversion for text encodingssplit and csplit: splitting filessponge: read all input before writing it, useful for reading from then writing to the same file, e.g., grep -v something some-file | sponge some-fileunits: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also /usr/share/units/definitions.units)apg: generates random passwordsxz: high-ratio file compressionldd: dynamic library infonm: symbols from object filesab or wrk: benchmarking web serversstrace: system call debuggingmtr: better traceroute for network debuggingcssh: visual concurrent shellrsync: sync files and folders over SSH or in local file systemwireshark and tshark: packet capture and network debuggingngrep: grep for the network layerhost and dig: DNS lookupslsof: process file descriptor and socket infodstat: useful system statsglances: high level, multi-subsystem overviewiostat: Disk usage statsmpstat: CPU usage statsvmstat: Memory usage statshtop: improved version of toplast: login historyw: who's logged onid: user/group identity infosar: historic system statsiftop or nethogs: network utilization by socket or processss: socket statisticsdmesg: boot and system error messagessysctl: view and configure Linux kernel parameters at run timehdparm: SATA/ATA disk manipulation/performancelsblk: list block devices: a tree view of your disks and disk partitionslshw, lscpu, lspci, lsusb, dmidecode: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.lsmod and modinfo: List and show details of kernel modules.fortune, ddate, and sl: um, well, it depends on whether you consider steam locomotives and Zippy quotations \"useful\"https://www.gnu.org/software/http://bsd.org/curl -s \"https://www.gnu.org/software/\" | pup \".package-list text{}\" | sed '/^[[:space:]]\\*$/d' | xargs -P3 -I {} brew install {}"},{"name":"unix.md","content":"0: 標準入力1: 標準出力2: 標準エラー出力\u0026\u003e/dev/null\u003e/dev/null 2\u003e\u00261と同じ。標準出力と標準エラー出力の両方共を破棄する。\u003e/dev/null1\u003e/dev/nullと同じ。標準出力を捨てる。[POSIX中心主義](https://ja.wikipedia.org/wiki/POSIXunix.mdE4unix.mdB8unix.mdADunix.mdE5unix.mdBFunix.md83unix.mdE4unix.mdB8unix.mdBBunix.mdE7unix.mdBEunix.mdA9)[UNIX哲学](https://ja.wikipedia.org/wiki/UNIXmemos/unix.mdE5memos/unix.md93memos/unix.mdB2memos/unix.mdE5memos/unix.mdADmemos/unix.mdA6)"},{"name":"vim-buildin-functions.md","content":"USAGE RESULT DESCRIPTION ~ :h vim-functionabs({expr}) Float or Number absolute value of {expr}acos({expr}) Float arc cosine of {expr}add({list}, {item}) List append {item} to |List| {list}and({expr}, {expr}) Number bitwise ANDapi*info() Dict api metadataappend({lnum}, {string}) Number append {string} below line {lnum}append({lnum}, {list}) Number append lines {list} below line {lnum}argc([{winid}]) Number number of files in the argument listargidx() Number current index in the argument listarglistid([{winnr} [, {tabnr}]]) Number argument list idargv({nr} [, {winid}]) String {nr} entry of the argument listargv([-1, {winid}]) List the argument listasin({expr}) Float arc sine of {expr}assert_beeps({cmd}) Number assert {cmd} causes a beepassert_equal({exp}, {act} [, {msg}])Number assert {exp} is equal to {act}assert_equalfile({fname-one}, {fname-two} [, {msg}])Number assert file contents are equalassert_exception({error} [, {msg}])Number assert {error} is in v:exceptionassert_fails({cmd} [, {error}]) Number assert {cmd} failsassert_false({actual} [, {msg}])Number assert {actual} is falseassert_inrange({lower}, {upper}, {actual} [, {msg}])Number assert {actual} is inside the rangeassert_match({pat}, {text} [, {msg}])Number assert {pat} matches {text}assert_nobeep({cmd}) Number assert {cmd} does not cause a beepassert_notequal({exp}, {act} [, {msg}])Number assert {exp} is not equal {act}assert_notmatch({pat}, {text} [, {msg}])Number assert {pat} not matches {text}assert_report({msg}) Number report a test failureassert_true({actual} [, {msg}]) Number assert {actual} is trueatan({expr}) Float arc tangent of {expr}atan2({expr}, {expr}) Float arc tangent of {expr1} / {expr2}browse({save}, {title}, {initdir}, {default})String put up a file requesterbrowsedir({title}, {initdir}) String put up a directory requesterbufadd({name}) Number add a buffer to the buffer listbufexists({expr}) Number |TRUE| if buffer {expr} existsbuflisted({expr}) Number |TRUE| if buffer {expr} is listedbufload({expr}) Number load buffer {expr} if not loaded yetbufloaded({expr}) Number |TRUE| if buffer {expr} is loadedbufname([{expr}]) String Name of the buffer {expr}bufnr([{expr} [, {create}]]) Number Number of the buffer {expr}bufwinid({expr}) Number |window-ID| of buffer {expr}bufwinnr({expr}) Number window number of buffer {expr}byte2line({byte}) Number line number at byte count {byte}byteidx({expr}, {nr}) Number byte index of {nr}'th char in {expr}byteidxcomp({expr}, {nr}) Number byte index of {nr}'th char in {expr}call({func}, {arglist} [, {dict}])any call {func} with arguments {arglist}ceil({expr}) Float round {expr} upchangenr() Number current change numberchanclose({id}[, {stream}]) Number Closes a channel or one of its streamschansend({id}, {data}) Number Writes {data} to channelchar2nr({expr}[, {utf8}]) Number ASCII/UTF8 value of first char in {expr}charidx({string}, {idx} [, {countcc}])Number char index of byte {idx} in {string}cindent({lnum}) Number C indent for line {lnum}clearmatches([{win}]) none clear all matchescol({expr}) Number column nr of cursor or markcomplete({startcol}, {matches}) none set Insert mode completioncomplete_add({expr}) Number add completion matchcomplete_check() Number check for key typed during completioncomplete_info([{what}]) Dict get current completion informationconfirm({msg} [, {choices} [, {default} [, {type}]]])Number number of choice picked by usercopy({expr}) any make a shallow copy of {expr}cos({expr}) Float cosine of {expr}cosh({expr}) Float hyperbolic cosine of {expr}count({list}, {expr} [, {ic} [, {start}]])Number count how many {expr} are in {list}cscope_connection([{num}, {dbpath} [, {prepend}]])Number checks existence of cscope connectionctxget([{index}]) Dict return the |context| dict at {index}ctxpop() none pop and restore |context| from the|context-stack|ctxpush([{types}]) none push the current |context| to the|context-stack|ctxset({context}[, {index}]) none set |context| at {index}ctxsize() Number return |context-stack| sizecursor({lnum}, {col} [, {off}])Number move cursor to {lnum}, {col}, {off}cursor({list}) Number move cursor to position in {list}debugbreak({pid}) Number interrupt process being debuggeddeepcopy({expr} [, {noref}]) any make a full copy of {expr}delete({fname} [, {flags}]) Number delete the file or directory {fname}deletebufline({expr}, {first}[, {last}])Number delete lines from buffer {expr}dictwatcheradd({dict}, {pattern}, {callback})Start watching a dictionarydictwatcherdel({dict}, {pattern}, {callback})Stop watching a dictionarydid_filetype() Number |TRUE| if FileType autocommand event useddiff_filler({lnum}) Number diff filler lines about {lnum}diff_hlID({lnum}, {col}) Number diff highlighting at {lnum}/{col}empty({expr}) Number |TRUE| if {expr} is emptyenviron() Dict return environment variablesescape({string}, {chars}) String escape {chars} in {string} with '\\'eval({string}) any evaluate {string} into its valueeventhandler() Number |TRUE| if inside an event handlerexecutable({expr}) Number 1 if executable {expr} existsexecute({command}) String execute and capture output of {command}exepath({expr}) String full path of the command {expr}exists({expr}) Number |TRUE| if {expr} existsextend({expr1}, {expr2} [, {expr3}])List/Dict insert items of {expr2} into {expr1}exp({expr}) Float exponential of {expr}expand({expr} [, {nosuf} [, {list}]])any expand special keywords in {expr}expandcmd({expr}) String expand {expr} like with `:edit`feedkeys({string} [, {mode}]) Number add key sequence to typeahead bufferfilereadable({file}) Number |TRUE| if {file} is a readable filefilewritable({file}) Number |TRUE| if {file} is a writable filefilter({expr1}, {expr2}) List/Dict remove items from {expr1} where{expr2} is 0finddir({name} [, {path} [, {count}]])String find directory {name} in {path}findfile({name} [, {path} [, {count}]])String find file {name} in {path}flatten({list} [, {maxdepth}]) List flatten {list} up to {maxdepth} levelsfloat2nr({expr}) Number convert Float {expr} to a Numberfloor({expr}) Float round {expr} downfmod({expr1}, {expr2}) Float remainder of {expr1} / {expr2}fnameescape({fname}) String escape special characters in {fname}fnamemodify({fname}, {mods}) String modify file namefoldclosed({lnum}) Number first line of fold at {lnum} if closedfoldclosedend({lnum}) Number last line of fold at {lnum} if closedfoldlevel({lnum}) Number fold level at {lnum}foldtext() String line displayed for closed foldfoldtextresult({lnum}) String text for closed fold at {lnum}foreground() Number bring the Vim window to the foregroundfuncref({name} [, {arglist}] [, {dict}])Funcref reference to function {name}function({name} [, {arglist}] [, {dict}])Funcref named reference to function {name}garbagecollect([{atexit}]) none free memory, breaking cyclic referencesget({list}, {idx} [, {def}]) any get item {idx} from {list} or {def}get({dict}, {key} [, {def}]) any get item {key} from {dict} or {def}get({func}, {what}) any get property of funcref/partial {func}getbufinfo([{expr}]) List information about buffersgetbufline({expr}, {lnum} [, {end}])List lines {lnum} to {end} of buffer {expr}getbufvar({expr}, {varname} [, {def}])any variable {varname} in buffer {expr}getchangelist({expr}) List list of change list itemsgetchar([expr]) Number get one character from the usergetcharmod() Number modifiers for the last typed charactergetcharsearch() Dict last character searchgetcmdline() String return the current command-linegetcmdpos() Number return cursor position in command-linegetcmdtype() String return current command-line typegetcmdwintype() String return current command-line window typegetcompletion({pat}, {type} [, {filtered}])List list of cmdline completion matchesgetcurpos() List position of the cursorgetcwd([{winnr} [, {tabnr}]]) String get the current working directorygetenv({name}) String return environment variablegetfontname([{name}]) String name of font being usedgetfperm({fname}) String file permissions of file {fname}getfsize({fname}) Number size in bytes of file {fname}getftime({fname}) Number last modification time of filegetftype({fname}) String description of type of file {fname}getjumplist([{winnr} [, {tabnr}]])List list of jump list itemsgetline({lnum}) String line {lnum} of current buffergetline({lnum}, {end}) List lines {lnum} to {end} of current buffergetloclist({nr} [, {what}]) List list of location list itemsgetmarklist([{expr}]) List list of global/local marksgetmatches([{win}]) List list of current matchesgetpid() Number process ID of Vimgetpos({expr}) List position of cursor, mark, etc.getqflist([{what}]) List list of quickfix itemsgetreg([{regname} [, 1 [, {list}]]])String or List contents of registergetregtype([{regname}]) String type of registergettabinfo([{expr}]) List list of tab pagesgettabvar({nr}, {varname} [, {def}])any variable {varname} in tab {nr} or {def}gettabwinvar({tabnr}, {winnr}, {name} [, {def}])any {name} in {winnr} in tab page {tabnr}gettagstack([{nr}]) Dict get the tag stack of window {nr}getwininfo([{winid}]) List list of windowsgetwinpos([{timeout}]) List X and Y coord in pixels of the Vim windowgetwinposx() Number X coord in pixels of Vim windowgetwinposy() Number Y coord in pixels of Vim windowgetwinvar({nr}, {varname} [, {def}])any variable {varname} in window {nr}glob({expr} [, {nosuf} [, {list} [, {alllinks}]]])any expand file wildcards in {expr}glob2regpat({expr}) String convert a glob pat into a search patglobpath({path}, {expr} [, {nosuf} [, {list} [, {alllinks}]]])String do glob({expr}) for all dirs in {path}has({feature}) Number |TRUE| if feature {feature} supportedhas_key({dict}, {key}) Number |TRUE| if {dict} has entry {key}haslocaldir([{winnr} [, {tabnr}]])Number |TRUE| if current window executed |:lcd|hasmapto({what} [, {mode} [, {abbr}]])Number |TRUE| if mapping to {what} existshistadd({history}, {item}) String add an item to a historyhistdel({history} [, {item}]) String remove an item from a historyhistget({history} [, {index}]) String get the item {index} from a historyhistnr({history}) Number highest index of a historyhlexists({name}) Number |TRUE| if highlight group {name} existshlID({name}) Number syntax ID of highlight group {name}hostname() String name of the machine Vim is running oniconv({expr}, {from}, {to}) String convert encoding of {expr}indent({lnum}) Number indent of line {lnum}index({list}, {expr} [, {start} [, {ic}]])Number index in {list} where {expr} appearsinput({prompt} [, {text} [, {completion}]])String get input from the userinputlist({textlist}) Number let the user pick from a choice listinputrestore() Number restore typeaheadinputsave() Number save and clear typeaheadinputsecret({prompt} [, {text}])String like input() but hiding the textinsert({list}, {item} [, {idx}])List insert {item} in {list} [before {idx}]interrupt() none interrupt script executioninvert({expr}) Number bitwise invertisdirectory({directory}) Number |TRUE| if {directory} is a directoryisinf({expr}) Number determine if {expr} is infinity value(positive or negative)islocked({expr}) Number |TRUE| if {expr} is lockedisnan({expr}) Number |TRUE| if {expr} is NaNid({expr}) String identifier of the containeritems({dict}) List key-value pairs in {dict}jobpid({id}) Number Returns pid of a job.jobresize({id}, {width}, {height})Number Resize pseudo terminal window of a jobjobstart({cmd}[, {opts}]) Number Spawns {cmd} as a jobjobstop({id}) Number Stops a jobjobwait({ids}[, {timeout}]) Number Wait for a set of jobsjoin({list} [, {sep}]) String join {list} items into one Stringjson_decode({expr}) any Convert {expr} from JSONjson_encode({expr}) String Convert {expr} to JSONkeys({dict}) List keys in {dict}len({expr}) Number the length of {expr}libcall({lib}, {func}, {arg}) String call {func} in library {lib} with {arg}libcallnr({lib}, {func}, {arg}) Number idem, but return a Numberline({expr}) Number line nr of cursor, last line or markline2byte({lnum}) Number byte count of line {lnum}lispindent({lnum}) Number Lisp indent for line {lnum}list2str({list} [, {utf8}]) String turn numbers in {list} into a Stringlocaltime() Number current timelog({expr}) Float natural logarithm (base e) of {expr}log10({expr}) Float logarithm of Float {expr} to base 10luaeval({expr}[, {expr}]) any evaluate Lua expressionmap({expr1}, {expr2}) List/Dict change each item in {expr1} to {expr}maparg({name}[, {mode} [, {abbr} [, {dict}]]])String or Dictrhs of mapping {name} in mode {mode}mapcheck({name}[, {mode} [, {abbr}]])String check for mappings matching {name}match({expr}, {pat}[, {start}[, {count}]])Number position where {pat} matches in {expr}matchadd({group}, {pattern}[, {priority}[, {id}]])Number highlight {pattern} with {group}matchaddpos({group}, {list}[, {priority}[, {id}]])Number highlight positions with {group}matcharg({nr}) List arguments of |:match|matchdelete({id} [, {win}]) Number delete match identified by {id}matchend({expr}, {pat}[, {start}[, {count}]])Number position where {pat} ends in {expr}matchlist({expr}, {pat}[, {start}[, {count}]])List match and submatches of {pat} in {expr}matchstr({expr}, {pat}[, {start}[, {count}]])String {count}'th match of {pat} in {expr}matchstrpos({expr}, {pat}[, {start}[, {count}]])List {count}'th match of {pat} in {expr}max({expr}) Number maximum value of items in {expr}min({expr}) Number minimum value of items in {expr}mkdir({name} [, {path} [, {prot}]])Number create directory {name}mode([expr]) String current editing modemsgpackdump({list}) List dump a list of objects to msgpackmsgpackparse({list}) List parse msgpack to a list of objectsnextnonblank({lnum}) Number line nr of non-blank line \u003e= {lnum}nr2char({expr}[, {utf8}]) String single char with ASCII/UTF8 value {expr}nvim*...({args}...) any call nvim |api| functionsor({expr}, {expr}) Number bitwise ORpathshorten({expr}) String shorten directory names in a pathperleval({expr}) any evaluate |perl| expressionpow({x}, {y}) Float {x} to the power of {y}prevnonblank({lnum}) Number line nr of non-blank line \u003c= {lnum}printf({fmt}, {expr1}...) String format textprompt_setcallback({buf}, {expr}) none set prompt callback functionprompt_setinterrupt({buf}, {text}) none set prompt interrupt functionprompt_setprompt({buf}, {text}) none set prompt textpum_getpos() Dict position and size of pum if visiblepumvisible() Number whether popup menu is visiblepyeval({expr}) any evaluate |Python| expressionpy3eval({expr}) any evaluate |python3| expressionpyxeval({expr}) any evaluate |python_x| expressionrange({expr} [, {max} [, {stride}]])List items from {expr} to {max}readdir({dir} [, {expr}]) List file names in {dir} selected by {expr}readfile({fname} [, {binary} [, {max}]])List get list of lines from file {fname}reg_executing() String get the executing register namereg_recording() String get the recording register namereltime([{start} [, {end}]]) List get time valuereltimefloat({time}) Float turn the time value into a Floatreltimestr({time}) String turn time value into a Stringremote_expr({server}, {string} [, {idvar} [, {timeout}]])String send expressionremote_foreground({server}) Number bring Vim server to the foregroundremote_peek({serverid} [, {retvar}])Number check for reply stringremote_read({serverid} [, {timeout}])String read reply stringremote_send({server}, {string} [, {idvar}])String send key sequenceremote_startserver({name}) none become server {name}remove({list}, {idx} [, {end}]) any remove items {idx}-{end} from {list}remove({dict}, {key}) any remove entry {key} from {dict}rename({from}, {to}) Number rename (move) file from {from} to {to}repeat({expr}, {count}) String repeat {expr} {count} timesresolve({filename}) String get filename a shortcut points toreverse({list}) List reverse {list} in-placeround({expr}) Float round off {expr}rubyeval({expr}) any evaluate |Ruby| expressionrpcnotify({channel}, {event}[, {args}...])Sends an |RPC| notification to {channel}rpcrequest({channel}, {method}[, {args}...])Sends an |RPC| request to {channel}screenattr({row}, {col}) Number attribute at screen positionscreenchar({row}, {col}) Number character at screen positionscreencol() Number current cursor columnscreenpos({winid}, {lnum}, {col}) Dict screen row and col of a text characterscreenrow() Number current cursor rowsearch({pattern} [, {flags} [, {stopline} [, {timeout}]]])Number search for {pattern}searchdecl({name} [, {global} [, {thisblock}]])Number search for variable declarationsearchpair({start}, {middle}, {end} [, {flags} [, {skip} [...]]])Number search for other end of start/end pairsearchpairpos({start}, {middle}, {end} [, {flags} [, {skip} [...]]])List search for other end of start/end pairsearchpos({pattern} [, {flags} [, {stopline} [, {timeout}]]])List search for {pattern}server2client({clientid}, {string})Number send reply stringserverlist() String get a list of available serverssetbufline( {expr}, {lnum}, {line})Number set line {lnum} to {line} in buffer{expr}setbufvar({expr}, {varname}, {val}) set {varname} in buffer {expr} to {val}setcharsearch({dict}) Dict set character search from {dict}setcmdpos({pos}) Number set cursor position in command-linesetenv({name}, {val}) none set environment variablesetfperm({fname}, {mode} Number set {fname} file permissions to {mode}setline({lnum}, {line}) Number set line {lnum} to {line}setloclist({nr}, {list}[, {action}[, {what}]])Number modify location list using {list}setmatches({list} [, {win}]) Number restore a list of matchessetpos({expr}, {list}) Number set the {expr} position to {list}setqflist({list}[, {action}[, {what}]]Number modify quickfix list using {list}setreg({n}, {v}[, {opt}]) Number set register to value and typesettabvar({nr}, {varname}, {val}) set {varname} in tab page {nr} to {val}settabwinvar({tabnr}, {winnr}, {varname}, {val}) set {varname} in window{winnr} in tab page {tabnr} to {val}settagstack({nr}, {dict} [, {action}])Number modify tag stack using {dict}setwinvar({nr}, {varname}, {val}) set {varname} in window {nr} to {val}sha256({string}) String SHA256 checksum of {string}shellescape({string} [, {special}])String escape {string} for use as shellcommand argumentshiftwidth([{col}]) Number effective value of 'shiftwidth'sign_define({name} [, {dict}]) Number define or update a signsign_define({list}) List define or update a list of signssign_getdefined([{name}]) List get a list of defined signssign_getplaced([{expr} [, {dict}]])List get a list of placed signssign_jump({id}, {group}, {expr})Number jump to a signsign_place({id}, {group}, {name}, {expr} [, {dict}])Number place a signsign_placelist({list}) List place a list of signssign_undefine([{name}]) Number undefine a signsign_undefine({list}) List undefine a list of signssign_unplace({group} [, {dict}])Number unplace a signsign_unplacelist({list}) List unplace a list of signssimplify({filename}) String simplify filename as much as possiblesin({expr}) Float sine of {expr}sinh({expr}) Float hyperbolic sine of {expr}sockconnect({mode}, {address} [, {opts}])Number Connects to socketsort({list} [, {func} [, {dict}]])List sort {list}, using {func} to comparesoundfold({word}) String sound-fold {word}spellbadword() String badly spelled word at cursorspellsuggest({word} [, {max} [, {capital}]])List spelling suggestionssplit({expr} [, {pat} [, {keepempty}]])List make |List| from {pat} separated {expr}sqrt({expr}) Float square root of {expr}stdioopen({dict}) Number open stdio in a headless instance.stdpath({what}) String/List returns the standard path(s) for {what}str2float({expr}) Float convert String to Floatstr2list({expr} [, {utf8}]) List convert each character of {expr} toASCII/UTF8 valuestr2nr({expr} [, {base}]) Number convert String to Numberstrchars({expr} [, {skipcc}]) Number character length of the String {expr}strcharpart({str}, {start} [, {len}])String {len} characters of {str} atcharacter {start}strdisplaywidth({expr} [, {col}]) Number display length of the String {expr}strftime({format} [, {time}]) String format time with a specified formatstrgetchar({str}, {index}) Number get char {index} from {str}stridx({haystack}, {needle} [, {start}])Number index of {needle} in {haystack}string({expr}) String String representation of {expr} valuestrlen({expr}) Number length of the String {expr}strpart({str}, {start} [, {len} [, {chars}]])String {len} bytes/chars of {str} atbyte {start}strptime({format}, {timestring})Number Convert {timestring} to unix timestampstrridx({haystack}, {needle} [, {start}])Number last index of {needle} in {haystack}strtrans({expr}) String translate string to make it printablestrwidth({expr}) Number display cell length of the String {expr}submatch({nr} [, {list}]) String or Listspecific match in \":s\" or substitute()substitute({expr}, {pat}, {sub}, {flags})String all {pat} in {expr} replaced with {sub}swapinfo({fname}) Dict information about swap file {fname}swapname({expr}) String swap file of buffer {expr}synID({lnum}, {col}, {trans}) Number syntax ID at {lnum} and {col}synIDattr({synID}, {what} [, {mode}])String attribute {what} of syntax ID {synID}synIDtrans({synID}) Number translated syntax ID of {synID}synconcealed({lnum}, {col}) List info about concealingsynstack({lnum}, {col}) List stack of syntax IDs at {lnum} and {col}system({cmd} [, {input}]) String output of shell command/filter {cmd}systemlist({cmd} [, {input}]) List output of shell command/filter {cmd}tabpagebuflist([{arg}]) List list of buffer numbers in tab pagetabpagenr([{arg}]) Number number of current or last tab pagetabpagewinnr({tabarg}[, {arg}])Number number of current window in tab pagetaglist({expr}[, {filename}]) List list of tags matching {expr}tagfiles() List tags files usedtan({expr}) Float tangent of {expr}tanh({expr}) Float hyperbolic tangent of {expr}tempname() String name for a temporary filetest_garbagecollect_now() none free memory right now for testingtimer_info([{id}]) List information about timerstimer_pause({id}, {pause}) none pause or unpause a timertimer_start({time}, {callback} [, {options}])Number create a timertimer_stop({timer}) none stop a timertimer_stopall() none stop all timerstolower({expr}) String the String {expr} switched to lowercasetoupper({expr}) String the String {expr} switched to uppercasetr({src}, {fromstr}, {tostr}) String translate chars of {src} in {fromstr}to chars in {tostr}trim({text} [, {mask} [, {dir}]])String trim characters in {mask} from {text}trunc({expr}) Float truncate Float {expr}type({name}) Number type of variable {name}undofile({name}) String undo file name for {name}undotree() List undo file treeuniq({list} [, {func} [, {dict}]])List remove adjacent duplicates from a listvalues({dict}) List values in {dict}virtcol({expr}) Number screen column of cursor or markvisualmode([expr]) String last visual mode usedwait({timeout}, {condition}[, {interval}])Number Wait until {condition} is satisfiedwildmenumode() Number whether 'wildmenu' mode is activewin_findbuf({bufnr}) List find windows containing {bufnr}win_getid([{win} [, {tab}]]) Number get |window-ID| for {win} in {tab}win_gettype([{nr}]) String type of window {nr}win_gotoid({expr}) Number go to |window-ID| {expr}win_id2tabwin({expr}) List get tab and window nr from |window-ID|win_id2win({expr}) Number get window nr from |window-ID|win_screenpos({nr}) List get screen position of window {nr}win_splitmove({nr}, {target} [, {options}])none move window {nr} to split of {target}winbufnr({nr}) Number buffer number of window {nr}wincol() Number window column of the cursorwinheight({nr}) Number height of window {nr}winlayout([{tabnr}]) List layout of windows in tab {tabnr}winline() Number window line of the cursorwinnr([{expr}]) Number number of current windowwinrestcmd() String returns command to restore window sizeswinrestview({dict}) none restore view of current windowwinsaveview() Dict save view of current windowwinwidth({nr}) Number width of window {nr}wordcount() Dict get byte/char/word statisticswritefile({list}, {fname} [, {flags}])Number write list of lines to file {fname}xor({expr}, {expr}) Number bitwise XOR---      *system-functions* *file-functions*     *buffer-functions* *window-functions* *arg-functions*Buffers, windows and the argument list:Command line: _command-line-functions_Context Stack: _ctx-functions_Cursor and mark position: _cursor-functions_ _mark-functions_Date and Time: _date-functions_ _time-functions_Dictionary manipulation: _dict-functions_Floating point computation: _float-functions_Folding: _folding-functions_GUI: _gui-functions_History: _history-functions_Insert mode completion: _completion-functions_Interactive: _interactive-functions_List manipulation: _list-functions_Mappings: _mapping-functions_Other computation: _bitwise-function_Prompt Buffer: _promptbuffer-functions_Quickfix and location lists: _quickfix-functions_Signs: _sign-functions_Spelling: _spell-functions_String manipulation: _string-functions_Syntax and highlighting: _syntax-functions_ _highlighting-functions_System functions and manipulation of files:Tags: _tag-functions_Testing: _test-functions_Timers: _timer-functions_Variables: _var-functions_Various: _various-functions_Vim server: _server-functions_Window size and position: _window-size-functions_Working with text in the current buffer: _text-functions_---abs() absolute value (also works for Number)acos() arc cosineadd() append an item to a Listand() bitwise ANDappend() append line or list of lines in the bufferappendbufline() append a list of lines in the specified bufferargc() number of entries in the argument listargidx() current position in the argument listarglistid() get id of the argument listargv() get one entry from the argument listasin() arc sineassert_beeps() assert that a command beepsassert_equal() assert that two expressions values are equalassert_equalfile() assert that two file contents are equalassert_exception() assert that a command throws an exceptionassert_fails() assert that a command failsassert_false() assert that an expression is falseassert_inrange() assert that an expression is inside a rangeassert_match() assert that a pattern matches the valueassert_nobeep() assert that a command does not cause a beepassert_notequal() assert that two expressions values are not equalassert_notmatch() assert that a pattern does not match the valueassert_true() assert that an expression is trueatan() arc tangentatan2() arc tangentballoon_gettext() get the text in the balloonballoon_show() set the balloon contentballoon_split() split a message for a balloonbrowse() put up a file requesterbrowsedir() put up a directory requesterbufexists() check if a buffer existsbuflisted() check if a buffer exists and is listedbufloaded() check if a buffer exists and is loadedbufname() get the name of a specific bufferbufnr() get the buffer number of a specific bufferbufwinid() get the window ID of a specific bufferbufwinnr() get the window number of a specific bufferbyte2line() get line number at a specific byte countbyteidx() byte index of a character in a stringbyteidxcomp() like byteidx() but count composing characterscall() call a function with List as argumentsceil() round upchangenr() return number of most recent changechar2nr() get number value of a charactercharidx() character index of a byte in a stringcindent() indent according to C indentingclearmatches() clear all matches defined by |matchadd()| andcol() column number of the cursor or a markcomplete() set found matchescomplete_add() add to found matchescomplete_check() check if completion should be abortedcomplete_info() get current completion informationconfirm() let the user make a choicecopy() make a shallow copy of a Dictionarycopy() make a shallow copy of a Listcos() cosinecosh() hyperbolic cosinecount() count number of times a value appearscount() count number of times a value appears in a Listcscope_connection() check if a cscope connection existsctxget() return context at given index from topctxpop() pop and restore top contextctxpush() push given contextctxset() set context at given index from topctxsize() return context stack sizecursor() position the cursor at a line/columndebugbreak() interrupt a program being debuggeddeepcopy() make a full copy of a Dictionarydeepcopy() make a full copy of a Listdelete() delete a filedeletebufline() delete lines from a specified bufferdid_filetype() check if a FileType autocommand was useddiff_filler() get the number of filler lines above a linediff_hlID() get highlight ID for diff mode at a positionempty() check if Dictionary is emptyempty() check if List is emptyenviron() get all environment variablesescape() escape characters in a string with a '\\'eval() evaluate a string expressioneventhandler() check if invoked by an event handlerexecutable() check if an executable program existsexecute() execute an Ex command and get the outputexepath() full path of an executable programexists() check if a variable, function, etc. existsexp() exponentialexpand() expand special keywordsexpandcmd() expand a command like done for `:edit`extend() add entries from one Dictionary to anotherextend() append a List to a Listfeedkeys() put characters in the typeahead queuefilereadable() check if a file can be readfilewritable() check if a file can be written tofilter() remove selected entries from a Dictionaryfilter() remove selected items from a Listfinddir() find a directory in a list of directoriesfindfile() find a file in a list of directoriesflatten() flatten a Listfloat2nr() convert Float to Numberfloor() round downfmod() remainder of divisionfnameescape() escape a file name for use with a Vim commandfnamemodify() modify a file namefoldclosed() check for a closed fold at a specific linefoldclosedend() like foldclosed() but return the last linefoldlevel() check for the fold level at a specific linefoldtext() generate the line displayed for a closed foldfoldtextresult() get the text displayed for a closed foldforeground() move the Vim window to the foregroundfuncref() get a Funcref for a function referencefunction() get a Funcref for a function namegarbagecollect() possibly free memoryget() get an entry without an error for a wrong keyget() get an item without error for wrong indexgetbufinfo() get a list with buffer informationgetbufline() get a list of lines from the specified buffergetbufvar() get a variable value from a specific buffergetchangelist() get a list of change list entriesgetchar() get a character from the usergetcharmod() get modifiers for the last typed charactergetcharsearch() return character search informationgetcmdline() get the current command linegetcmdpos() get position of the cursor in the command linegetcmdtype() return the current command-line typegetcmdwintype() return the current command-line window typegetcompletion() list of command-line completion matchesgetcurpos() get position of the cursorgetcwd() get the current working directorygetenv() get one environment variablegetfontname() get name of current font being usedgetfperm() get the permissions of a filegetfsize() get the size of a filegetftime() get last modification time of a filegetftype() get the kind of a filegetjumplist() get a list of jump list entriesgetline() get a line or list of lines from the buffergetloclist() list of location list itemsgetmarklist() list of global/local marksgetmatches() get all matches defined by |matchadd()| andgetpid() get process ID of Vimgetpos() get position of cursor, mark, etc.getqflist() list of quickfix errorsgetreg() get contents of a registergetregtype() get type of a registergettabinfo() get a list with tab page informationgettabvar() get a variable from specific tab pagegettabwinvar() get a variable from specific window \u0026 tab pagegettagstack() get the tag stack of a windowgetwininfo() get a list with window informationgetwinpos() position of the Vim windowgetwinposx() X position of the Vim windowgetwinposy() Y position of the Vim windowgetwinvar() get a variable from specific windowglob() expand wildcardsglob2regpat() convert a glob pattern into a search patternglobpath() expand wildcards in a number of directorieshas() check if a feature is supported in Vimhas_key() check whether a key appears in a Dictionaryhaslocaldir() check if current window used |:lcd|hasmapto() check if a mapping existshistadd() add an item to a historyhistdel() delete an item from a historyhistget() get an item from a historyhistnr() get highest index of a history listhlID() get ID of a highlight grouphlexists() check if a highlight group existshostname() name of the systemiconv() convert text from one encoding to anotherindent() indent of a specific lineindex() index of a value in a Listinput() get a line from the userinputdialog() get a line from the user in a dialoginputlist() let the user pick an entry from a listinputrestore() restore typeaheadinputsave() save and clear typeaheadinputsecret() get a line from the user without showing itinsert() insert an item somewhere in a Listinvert() bitwise invertisdirectory() check if a directory existsislocked() check if a variable is lockeditems() get List of Dictionary key-value pairsjoin() join List items into a Stringkeys() get List of Dictionary keyslen() number of entries in a Dictionarylen() number of items in a Listlibcall() call a function in an external librarylibcallnr() idem, returning a numberline() line number of the cursor or markline2byte() byte count at a specific linelispindent() indent according to Lisp indentinglist2str() get a character string from a list of numberslocaltime() get current time in secondslog() natural logarithm (logarithm to base e)log10() logarithm to base 10luaeval() evaluate Lua expressionmap() change each Dictionary entrymap() change each List itemmaparg() get rhs of a mappingmapcheck() check if a matching mapping existsmatch() position where a pattern matches in a stringmatchadd() define a pattern to highlight (a \"match\")matchaddpos() define a list of positions to highlightmatcharg() get info about |:match| argumentsmatchdelete() delete a match defined by |matchadd()| or amatchend() position where a pattern match ends in a stringmatchlist() like matchstr() and also return submatchesmatchstr() match of a pattern in a stringmatchstrpos() match and positions of a pattern in a stringmax() maximum value in a Dictionarymax() maximum value in a Listmin() minimum value in a Dictionarymin() minimum value in a Listmkdir() create a new directorymode() get current editing modenextnonblank() find next non-blank linenr2char() get a character by its number valueor() bitwise ORpathshorten() shorten directory names in a pathpow() value of x to the exponent yprevnonblank() find previous non-blank lineprintf() format a string according to % itemsprompt_setcallback() set prompt callback for a bufferprompt_setinterrupt() set interrupt callback for a bufferprompt_setprompt() set the prompt text for a bufferpumvisible() check if the popup menu is displayedpy3eval() evaluate Python expression (|+python3|)pyeval() evaluate Python expression (|+python|)pyxeval() evaluate |python_x| expressionrange() return a List with a sequence of numbersreaddir() get a List of file names in a directoryreadfile() read a file into a List of linesreg_executing() return the name of the register being executedreg_recording() return the name of the register being recordedreltime() get the current or elapsed time accuratelyreltimefloat() convert reltime() result to a Floatreltimestr() convert reltime() result to a stringremote_expr() evaluate an expression in a Vim serverremote_foreground() move the Vim server window to the foregroundremote_peek() check if there is a reply from a Vim serverremote_read() read a reply from a Vim serverremote_send() send command characters to a Vim serverremote_startserver() run a serverremove() remove an entry from a Dictionaryremove() remove one or more items from a Listrename() rename a filerepeat() repeat a List multiple timesrepeat() repeat a string multiple timesresolve() find out where a shortcut points toreverse() reverse the order of a Listround() round offscreenattr() get attribute at a screen line/rowscreenchar() get character code at a screen line/rowscreencol() get screen column of the cursorscreenrow() get screen row of the cursorsearch() find a match for a patternsearchdecl() search for the declaration of a namesearchpair() find the other end of a start/skip/endsearchpairpos() find the other end of a start/skip/endsearchpos() find a match for a patternserver2client() send a reply to a client of a Vim serverserverlist() return the list of server namessetbufline() replace a line in the specified buffersetbufvar() set a variable in a specific buffersetcharsearch() set character search informationsetcmdpos() set position of the cursor in the command linesetenv() set an environment variablesetfperm() set the permissions of a filesetline() replace a line in the buffersetloclist() modify a location listsetmatches() restore a list of matches saved bysetpos() set position of cursor, mark, etc.setqflist() modify a quickfix listsetreg() set contents and type of a registersettabvar() set a variable in a specific tab pagesettabwinvar() set a variable in a specific window \u0026 tab pagesettagstack() modify the tag stack of a windowsetwinvar() set a variable in a specific windowsha256() SHA-256 hashshellescape() escape a string for use with a shell commandshiftwidth() effective value of 'shiftwidth'sign_define() define or update a signsign_getdefined() get a list of defined signssign_getplaced() get a list of placed signssign_jump() jump to a signsign_place() place a signsign_placelist() place a list of signssign_undefine() undefine a signsign_unplace() unplace a signsign_unplacelist() unplace a list of signssimplify() simplify a path without changing its meaningsin() sinesinh() hyperbolic sinesort() sort a Listsoundfold() return the sound-a-like equivalent of a wordspellbadword() locate badly spelled word at or after cursorspellsuggest() return suggested spelling correctionssplit() split a String into a Listsqrt() square rootstr2float() convert a string to a Floatstr2list() get list of numbers from a stringstr2nr() convert a string to a Numberstrcharpart() get part of a string using char indexstrchars() length of a string in charactersstrdisplaywidth() size of string when displayed, deals with tabsstrftime() convert time to a stringstrgetchar() get character from a string using char indexstridx() first index of a short string in a long stringstring() String representation of a Dictionarystring() String representation of a Liststrlen() length of a string in bytesstrpart() get part of a string using byte indexstrptime() convert a date/time string to timestrridx() last index of a short string in a long stringstrtrans() translate a string to make it printablestrwidth() size of string when displayedsubmatch() get a specific match in \":s\" and substitute()substitute() substitute a pattern match with a stringswapinfo() information about a swap fileswapname() get the swap file path of a buffersynID() get syntax ID at a specific positionsynIDattr() get a specific attribute of a syntax IDsynIDtrans() get translated syntax IDsynconcealed() get info about concealingsynstack() get list of syntax IDs at a specific positionsystem() get the result of a shell command as a stringsystemlist() get the result of a shell command as a listtabpagebuflist() return List of buffers in a tab pagetabpagenr() get the number of a tab pagetabpagewinnr() like winnr() for a specified tab pagetagfiles() get a list of tags filestaglist() get list of matching tagstan() tangenttanh() hyperbolic tangenttempname() get the name of a temporary filethe |:match| commandsthe |:match| commandstimer_info() get information about timerstimer_pause() pause or unpause a timertimer_start() create a timertimer_stop() stop a timertimer_stopall() stop all timerstolower() turn a string to lowercasetoupper() turn a string to uppercasetr() translate characters from one set to anothertrim() trim characters from a stringtrunc() remove value after decimal pointtype() type of a variableundofile() get the name of the undo fileundotree() return the state of the undo treeuniq() remove copies of repeated adjacent itemsvalues() get List of Dictionary valuesvirtcol() screen column of the cursor or a markvisualmode() last visual mode usedwait() wait for a conditionwildmenumode() check if the wildmode is activewin_execute() like execute() but in a specified windowwin_findbuf() find windows containing a bufferwin_getid() get window ID of a windowwin_gotoid() go to window with IDwin_id2tabwin() get tab and window nr from window IDwin_id2win() get window nr from window IDwin_screenpos() get screen position of a windowwinbufnr() get the buffer number of a specific windowwincol() window column number of the cursorwinheight() get height of a specific windowwinlayout() get layout of windows in a tab pagewinline() window line number of the cursorwinnr() get the window number for the current windowwinrestcmd() return command to restore window sizeswinrestview() restore saved view of current windowwinsaveview() get view of current windowwinwidth() get width of a specific windowwordcount() get byte/word/char count of bufferwritefile() write a List of lines or Blob into a filexor() bitwise XOR"},{"name":"vim-deck.md","content":"# vim deck- why?  - startuptime.  - compare vscode  - community- Game changer.  - [language server protocol について (前編) - Qiita](https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4)- demonstrate vim, tmux potential  - with read command table scrping and create html, create table  - tmux- How to start and roadmap.- my workflow  - remember or snippets.  - output smooth. output is poweful because ...  - ops cost- Conclusion.  - I will surpport your built environment in terminal.  - You can question me. talk or \u003chttps://github.com/kis9a/dotfiles/issues\u003e# Vim deck[GitHub - rafi/awesome-vim-colorschemes: Collection of awesome color schemes for Neo/vim, merged for quick use.](https://github.com/rafi/awesome-vim-colorschemes)[printf - bash script , echo output in box - Unix ; Linux Stack Exchange](https://unix.stackexchange.com/questions/70615/bash-script-echo-output-in-box)ToHtml function with external.[GitHub - openresty/lua-resty-redis: Lua redis client driver for the ngx_lua based on the cosocket API](https://github.com/openresty/lua-resty-redis)### cui solutions### Why use Vim ?Many people talk about this topic.and each one have a philosophy.I want to ask you, why need a VSCode?Probably CUI tool is provide more essential solutions.(MERIT)- CUI  - Composability  - Speed  - Preformance  - Community- GUI  - Intuitive### QA#### Big wave- Neovim- LSP, CoC.nvim- nvim treesitter=======## Why I use vim.### Speeed.- startuptime  GUI editor 1 ~ 2 second.  CUI vim 0.1 second.## How to select software ?- preformance, feature, usage.- initial const.- ops cost.- multi platform.  \u003e \u003e \u003e \u003e \u003e \u003e \u003e Stashed changes"},{"name":"vim-folding.md","content":"# vim-fold## keymaps| コマンド    | 動作                           || ----------- | ------------------------------ || zf          | 折畳作成                       || zd          | 折畳削除                       || zD          | 折畳を全て削除                 || zE          | ページ全体の折畳みを全て削除   || visual + zf | 選択範囲を折畳                 || 2 + zF      | 2 行折畳                       || 2,5 fo      | 2 行から 5 行を折畳            || zo          | 折畳を削除せず開く             || zO          | 折畳みを全て削除せず開く       || zc          | 開いている折畳を閉じる         || zC          | 開いている折畳を全て閉じる     || za          | 折畳の状態を切り替える         || zA          | 全ての折畳の状態を切り替える   || zv          | カーソル行を表示               || zx          | 折畳の Undo                    || zX          | 折畳の Redo                    || zm          | ページ内の折畳を一段階閉じる   || zM          | ページ内の折畳を全段階閉じる   || zr          | ページ内の折畳を一段階開く     || zR          | ページ内の折畳を全段階開く     || 2,5 foldo   | 2 行から 5 行の折畳を開く      || 2,5 foldc   | 2 行から 5 行の折畳を閉じる    || zn          | ファイル全体の折畳を開く       || zN          | ファイル全体の折畳を閉じる     || zi          | ファイル全体の折畳の状態を反転 || zj          | 上の折畳に移動                 || zk          | 下の折畳に移動                 |## Folding methodsmanual – folds must be defined by entering commands (such as zf)indent – groups of lines with the same indent form a foldsyntax – folds are defined by syntax highlightingexpr – folds are defined by a user-defined expressionmarker – special characters can be manually or automatically added to your text to flag the start and end of foldsdiff – used to fold unchanged text when viewing differences (automatically set in diff mode)"},{"name":"vim-installation.md","content":"neovim - amazon linux 2```#!/usr/bin/env bashsudo yum groups install -y Development\\ toolssudo yum install -y cmakesudo yum install -y python34-{devel,pip}sudo pip-3.4 install neovim --upgrade(cd \"$(mktemp -d)\"git clone https://github.com/neovim/neovim.gitcd neovimmake CMAKE_BUILD_TYPE=Releasesudo make install)curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash. ~/.nvm/nvm.shnvm install node```[Amazon EC2 インスタンスで Node.js のセットアップ](https://docs.aws.amazon.com/ja_jp/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html)```FROM alpineMAINTAINER Gen Igarashi \u003c igarashi@aizulab.com \u003e# PackageRUN apk updateRUN apk --update add git make gcc g++ musl-dev ncurses-devRUN apk --update add \\  python \\  python-dev \\  python3 \\  python3-dev \\  perl \\  perl-dev \\  lua \\  lua-devRUN git clone https://github.com/vim/vimRUN cd vim \u0026\u0026 \\  ./configure \\  --enable-fail-if-missing \\  --with-features=huge \\  --disable-selinux \\  --enable-luainterp \\  --enable-perlinterp \\  --enable-pythoninterp=dynamic \\  --with-python-config-dir=/usr/lib/python2.7/config \\  --enable-python3interp=dynamic \\  --with-python3-config-dir=/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu \\  --enable-fontset \\  --enable-multibyte \\  vi_cv_path_python3=/usr/bin/python3.7 \u0026\u0026 \\  make \u0026\u0026 make install``````#!/bin/shrm -rf ~/tmp/vimgit clone --depth 1 https://github.com/vim/vim.git ~/tmp/vimcd ~/tmp/vim \u0026\u0026 ./configure \\  --prefix=/usr/local \\  --enable-multibyte \\  --enable-nls \\  --enable-cscope \\  --without-x \\  --disable-xim \\  --disable-gui \\  --disable-sysmouse \\  --disable-netbeans \\  --disable-xsmp \\  \u0026\u0026 make install```"},{"name":"vim-plugin.md","content":"- [Golang で Vim/neovim 双方で動くセレクタ系のプラグインを作ったときの話 - Qiita](https://qiita.com/hrsh7th@github/items/7430822bf906d2df99c3)- [Go で Vim プラグインを書く - haya14busa](http://haya14busa.com/vim-go-client/)- [GitHub - neovim/go-client: Nvim Go client](https://github.com/neovim/go-client)"},{"name":"vim-regex.md","content":"[vim 正規表現リファレンス - Qiita](https://qiita.com/kawaz/items/d0708a4ab08e572f38f3)"},{"name":"vim-replace.md","content":"[VIM で置換するときの s コマンドの使い方メモ - Qiita](https://qiita.com/yamazon/items/32ddc0f1cc8a8b63e339)s コマンドを使うと、vim 内で sed と同じことができる。:s/before/after/現在カーソルがある行の一番はじめに出てくる before を after に置換:s/before/after/g現在カーソルがある行の全ての before を after に置換:1s/before/after/現在開いているファイル 1 行目の一番はじめに出てくる before を after に置換:1s/before/after/g現在開いているファイル 1 行目に出てくる全ての before を after に置換:1,10s/before/after/g現在開いているファイル 1〜10 行目に出てくる全ての before を after に置換:%s/before/after/現在開いているファイルの各行の一番はじめに出てくる before を after に置換:%s/before/after/g現在開いているファイルに出てくる全ての before を after に置換:%s/before/after/gcc をつけると、確認(yes/no)が出るようになります。:1,10s#before#after#gc\"/\"は別の文字でも可能。オススメは \"#\" (見易いので。また、/を\\でエスケープしなくてよくなる)。:%s#a\\|b#c#ga または b を、c に置換する。BRE の (sed や grep と同じ) 正規表現になる。| は or 条件を表す。\\ で | をメタ文字にする(エスケープする)。:%s#\\va|b#c#ga または b を、c に置換する\\v で ERE の (grep -e、egrep、awk、perl と同じ) 正規表現になる。:%s#\\v(a|b)#\\1c#ga または b を、ac または bc に置換する\\1 は ( ) にマッチしたパターン文字列になるoniguruma の$1 と同じ\" カレントディレクトリ以下のあらゆるファイルを対象にする:vim {pattern} \\*\\*\" app/views 以下のあらゆるファイルを対象にする（ディレクトリを再帰的に検索）:vim {pattern} app/views/\\*\\*\" app/views/users 内のファイルを対象にする:vim {pattern} app/views/users/\\_\" app/views 以下の erb ファイルを対象にする:vim {pattern} app/views/\\*\\*/\\_.erb\" app/views 以下で*で始まる erb ファイルを対象にする:vim {pattern} app/views/\\*\\*/*\\*.erbcdo %s/pre/after/ge | update"},{"name":"vim-script.md","content":"[ Vim スクリプト基礎文法最速マスター - 永遠に未完成](https://thinca.hatenablog.com/entry/20100201/1265009821)大文字小文字を区別する==#!=#\u003e #\u003e\u003e =#\u003e \u003c#\u003e \u003c=#\u003e 大文字小文字を無視する\u003e ==?\u003e !=?\u003e ?\u003e =?\u003c?\u003c=?正規表現マッチをするには以下の演算子を使います。正規表現マッチ=~=~#=~?正規表現非マッチ!~!~#!~?|  | 'ignorecase'次第 | 大小文字考慮 | 大小文字無視 || --- | --- | --- | --- || 等しい | == | ==# | ==? || 等しくない | != | !=# | !=? || より大きい | \u003e | \u003e# | \u003e? || より大きいか等しい | \u003e= | \u003e=# | \u003e=? || より小さい | \u003c | \u003c# | \u003c? || より小さいか等しい | \u003c= | \u003c=# | \u003c=? || [正規表現](http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD) マッチ | =~ | =~# | =~? || [正規表現](http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD) 非マッチ | !~ | !~# | !~? |"},{"name":"vim.md","content":"- [Best of VIM Tips, gVIM's Key Features zzapper](https://www.ele.uri.edu/faculty/vetter/Other-stuff/vi/vimtips.html)# lua\u003c!--{{{--\u003e\u003chttps://zenn.dev/hituzi_no_sippo/articles/871c06cdbc45b53181e3#package-manager\u003e\u003c!--}}}--\u003eput \u003c!--{{{--\u003e:for i in range(1,10) | put ='192.168.0.'.i | endfor\u003c!--}}}--\u003emode and command\u003c!--{{{--\u003e```\"---------------------------------------------------------------------------|\" Commands \\ Modes | Normal | Insert | Command | Visual | Select | Operator |\" map  / noremap   |    @   |   -    |    -    |   @    |   @    |    @     |\" nmap / nnoremap  |    @   |   -    |    -    |   -    |   -    |    -     |\" vmap / vnoremap  |    -   |   -    |    -    |   @    |   @    |    -     |\" omap / onoremap  |    -   |   -    |    -    |   -    |   -    |    @     |\" xmap / xnoremap  |    -   |   -    |    -    |   @    |   -    |    -     |\" smap / snoremap  |    -   |   -    |    -    |   -    |   @    |    -     |\" map! / noremap!  |    -   |   @    |    @    |   -    |   -    |    -     |\" imap / inoremap  |    -   |   @    |    -    |   -    |   -    |    -     |\" cmap / cnoremap  |    -   |   -    |    @    |   -    |   -    |    -     |\"---------------------------------------------------------------------------\"\" :h mode-switching```\u003c!--}}}--\u003e\" --- statusline ---{{{\" set statusline=[%n]\\ %F%m%r%h%w\\ \u003e\u003e\\ %l,%v:%p%%\\ \u003e\u003e\\ %{strftime('%m/%d/%H:%M')}\u003c!--}}}--\u003eauto installation\u003c!--{{{--\u003eneovim```vimif empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim  --create-dirs    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim  autocmd VimEnter * PlugInstall | source ~/.config/nvim/init.vimendif```vim```vimif empty(glob('~/.vim/autoload/plug.vim')) silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs   \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim autocmd VimEnter * PlugInstall | source $MYVIMRCendif```\u003c!--}}}--\u003e\" --- command ---{{{command! Rmt :%s/\\s\\+$//e \" delete trailing spacematch errorMsg /\\s\\+$/ \" hilight trailing space\" }}}\" -- not usually {{{```\" Plug 'gruvbox/gruvbox.vim'\" Plug 'wakatime/vim-wakatime'\" Plug 'easymotion/vim-easymotion'\" Plug 'voldikss/vim-translator'\" Plug 'thinca/vim-quickrun', { 'on': 'QuickRun' }\" Plug 'cocopon/colorswatch.vim', { 'on': 'ColorSwatchGenerate' }\" Plug 'dhruvasagar/vim-table-mode', { 'for': 'markdown' }\" Plug 'lambdalisue/gina.vim', { 'on': 'Gina' }\" Plug 'iamcco/markdown-preview.nvim', { 'for': 'markdown', 'on': 'MarkdownPreview' }\" Plug 'junegunn/fzf', { 'do': { -\u003e fzf#install() } }\" Plug 'junegunn/fzf.vim', { 'on': [ 'Files', 'GFiles', 'Commands', 'Commits', 'Buffers', 'Rg' ] }\" Plug 'liuchengxu/vista.vim', { 'on': 'Vista' }\" Plug 't9md/vim-quickhl', { 'on': 'QuickhlCwordToggle' }\" Plug 'kshenoy/vim-signature', { 'on': 'SignatureListGlobalMarks' }\" Plug 'junegunn/vim-easy-align', { 'on': 'EasyAlign' }\" Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }\" Plug 'dstein64/vim-startuptime', { 'on': 'StartupTime' }\" Plug 'junegunn/limelight.vim', { 'on': [ 'Limelight', 'Limelight!', 'Limelight!!' ] }\" Plug 'simeji/winresizer', { 'on': [ 'WinResizerStartFocus', 'WinResizerStartResize'] }```\"}}}indent\u003c!--{{{--\u003e| オプション名 | 補足 || ------------ | -------------------------------------------------------- || expandtab | tab キーを押すとスペースが入力される || tabstop | 画面上で表示する 1 つのタブの幅 || softtabstop | いくつの連続した空白を 1 回で削除できるようにするか || shiftwidth | 自動インデントでのインデントの長さ || autoindent | 改行した時に自動でインデントします || smartindent | {があると次の行は自動で 1 段深く自動インデントしてくれる |\u003c!--}}}--\u003e| コマンド | 説明                       || -------- | -------------------------- || :new     | 新規ファイルを開く(横分割) || :vnew    | 新規ファイルを開く(縦分割) || :tabnew  | 新規ファイルを開く(タブ)   || コマンド | 説明                     || -------- | ------------------------ || :save    | ファイルを保存する       || :saveas  | ファイルを別名で保存する || コマンド | 短縮コマンド | キーバインド | 説明                     || -------- | ------------ | ------------ | ------------------------ || :split   | :sp          | ` \u003cC-w\u003es`    | ウィンドウを横に分割する || :vsplit  | :vs          | `\u003cC-w\u003ev`     | ウィンドウを縦に分割する || コマンド | 説明                 || -------- | -------------------- || `\u003cC-w\u003ej` | 上のウィンドウへ移動 || `\u003cC-w\u003ek` | 下のウィンドウへ移動 || `\u003cC-w\u003eh` | 左のウィンドウへ移動 || `\u003cC-w\u003el` | 右のウィンドウへ移動 || コマンド     | 短縮コマンド | キーバインド | 説明                              || ------------ | ------------ | ------------ | --------------------------------- || :tabnext     | :tabn        | {count}gt    | {count}で指定した番号のタブへ移動 || :tabnext     | :tabn        | gt           | 次のタブへ移動                    || :tabprevious | :tabp        | gT           | 前のタブへ移動                    || コマンド   | 短縮コマンド | 説明                                               || ---------- | ------------ | -------------------------------------------------- || :buffers   |              | バッファリストのファイル名をリスト表示             || :buffer    | :b           | バッファリストの指定したバッファを開く             || :bnext     | :bn          | バッファリストの次のバッファを開く                 || :bprevious | :bp          | バッファリストの前のバッファを開く                 || :ball      | :ba          | バッファリストのすべてのバッファをウィンドウを開く || :badd      | :bad         | バッファリストにバッファを追加                     || :bdelete   | :bd          | バッファリストからバッファを削除                   || :bfirst    | :bf          | バッファリストの最初のバッファを開く               || :blast     | :bl          | バッファリストの最後のバッファを開く               || :bmodified | :bm          | バッファリストの次の変更済みバッファを開く         || コマンド | 説明                 || -------- | -------------------- || :jumps   | ジャンプリストを表示 || `\u003cC-o\u003e` | 前のジャンプ箇所へ移動 || `\u003cC-i\u003e` | 次のジャンプ箇所へ移動 || コマンド | 説明               || -------- | ------------------ || :changes | 変更リストを表示   || g;       | 前の変更箇所へ移動 || g,       | 次の変更箇所へ移動 |syntax hilight\u003chttps://github.com/yuzoiwasaki/fluentd.vim\u003e:%s/^/\\=line('.').\". \"\" url parse\u003c!--{{{--\u003e# フォーマット：指定したパターンにマッチしない行を削除:%v/\u003cパターン\u003e/d# 例:a タグを含まない行を削除:%v/\u003ca/dフォーマット:%s/\u003c置換前パターン\u003e/\u003c置換後パターン\u003e/gc# 例：href の中身だけを抽出（それ以外の部分は削除）:%s/^._href=\"\\([^\"]_\\)\"[^\u003e]_._$/\\1/gc# 例２：相対 URL を絶対 URL に置換:%s/^\\//http:\\/\\/b.hatena.ne.jp\\//\u003c!--}}}--\u003esudo yum -y install libtool autoconf automake cmake gcc gcc-c++ make pkgconfig unzipi./configure --disable-selinux --enable-cscope --enable-fontset --enable-gpm --enable-multibyte --enable-rubyinterp --enable-xim\" puremourning/vimspector {{{fun! GotoWindow(id)   :call win_gotoid(a:id) endfun func! AddToWatch()   let word = expand(\"\u003ccexpr\u003e\")   call vimspector#AddWatch(word) endfunction let g:vimspector_base_dir = expand('$HOME/.config/vim/vimspector-config') let g:vimspector_sidebar_width = 60 nnoremap \u003cleader\u003esa :call vimspector#Launch()\u003cCR\u003e nnoremap \u003cleader\u003esc :call GotoWindow(g:vimspector_session_windows.code)\u003cCR\u003e nnoremap \u003cleader\u003esv :call GotoWindow(g:vimspector_session_windows.variables)\u003cCR\u003e nnoremap \u003cleader\u003esw :call GotoWindow(g:vimspector_session_windows.watches)\u003cCR\u003e nnoremap \u003cleader\u003ess :call GotoWindow(g:vimspector_session_windows.stack_trace)\u003cCR\u003e nnoremap \u003cleader\u003eso :call GotoWindow(g:vimspector_session_windows.output)\u003cCR\u003e nnoremap \u003cleader\u003esi :call AddToWatch()\u003cCR\u003e nnoremap \u003cleader\u003esx :call vimspector#Reset()\u003cCR\u003e nnoremap \u003cleader\u003esX :call vimspector#ClearBreakpoints()\u003cCR\u003e nnoremap \u003cleader\u003est :call vimspector#StepOut()\u003cCR\u003e nnoremap \u003cleader\u003esf :call vimspector#StepInto()\u003cCR\u003e nnoremap \u003cleader\u003ess :call vimspector#StepOver()\u003cCR\u003e nnoremap \u003cleader\u003es_ :call vimspector#Restart()\u003cCR\u003e nnoremap \u003cleader\u003esn :call vimspector#Continue()\u003cCR\u003e nnoremap \u003cleader\u003esrc :call vimspector#RunToCursor()\u003cCR\u003e nnoremap \u003cleader\u003esh :call vimspector#ToggleBreakpoint()\u003cCR\u003e nnoremap \u003cleader\u003ese :call vimspector#ToggleConditionalBreakpoint()\u003cCR\u003e let g:vimspector_sign_priority = {   \\    'vimspectorBP':         998,   \\    'vimspectorBPCond':     997,   \\    'vimspectorBPDisabled': 996,   \\    'vimspectorPC':         999,   \\ }\"}}}\"Plug 'easymotion/vim-easymotion'\"\" easymotion/vim-easymotion{{{\"map , \u003cPlug\u003e(easymotion-overwin-f)\"\"}}}Plug 'scrooloose/vim-slumlord', { 'for': 'uml' }Plug 'aklt/plantuml-syntax', { 'for': 'uml' }\" Plug 'honza/vim-snippets'- [Vim プラグインを書く言語について と宣伝](https://zenn.dev/octaltree/articles/c5757d9a126415)| レジスタ名 | 意味                                                         || ---------- | ------------------------------------------------------------ || \"          | 無名レジスタ。最後に　削除/ヤンク したテキストが格納される。 || 0          | ヤンクレジスタ。ヤンクしたテキストが格納される。             || a-z        | 名前付きレジスタ。ユーザが指定した場合に使われる。           || %          | 現在編集しているファイル名が格納されている。                 || \\*         | クリップボードの内容が格納されている。                       || +          | 上と同じ(win, mac)                                           |"},{"name":"vimium.md","content":"```unmap hunmap lunmap Junmap Kunmap Dunmap Uunmap Sunmap Mmap \u003cs-h\u003e goBackmap \u003cs-l\u003e goForwardmap \u003cc-h\u003e previousTabmap \u003cc-l\u003e nextTabmap \u003cc-d\u003e scrollPageDownmap \u003cc-u\u003e scrollPageUpunmap hunmap lunmap Junmap Kunmap Dunmap Uunmap Sunmap Mmap \u003cs-h\u003e goBackmap \u003cs-l\u003e goForwardmap \u003cc-h\u003e previousTabmap \u003cc-l\u003e nextTabmap \u003cc-d\u003e scrollPageDownmap \u003cc-u\u003e scrollPageUpmap \u003cc-m\u003e togglePinTabunmap hunmap lunmap Junmap Kunmap Dunmap Uunmap Sunmap Mmap \u003cs-h\u003e goBackmap \u003cs-l\u003e goForwardmap \u003cc-h\u003e previousTabmap \u003cc-l\u003e nextTabmap \u003cc-d\u003e scrollPageDownmap \u003cc-u\u003e scrollPageUpmap sn duplicateTabmap \u003cc-m\u003e togglePinTabmap 0 firstTabmap $ lastTabmap \u003cc-q\u003e removeTabg: https://www.google.com/search?q=%s Googlegy: https://www.google.com/search?q=%s\u0026tbs=qdr:y Google1yeargm: https://www.google.com/search?q=%s\u0026tbs=qdr:m Google1monthgw: https://www.google.com/search?q=%s\u0026tbs=qdr:w Google1weeky: https://www.youtube.com/results?search_query=%s Youtubeq: https://qiita.com/search?q=%s Qiitad: https://duckduckgo.com/?q=%s DuckDuckGogc: https://github.com/search?q=%s\u0026type=Code\u0026utf8=✓ GithubCodegh: https://github.com/search?q=%s Githubgo: https://golang.org/search?q=%s Golangg: https://www.google.com/search?q=%s Googlegy: https://www.google.com/search?q=%s\u0026tbs=qdr:y Google1yeargm: https://www.google.com/search?q=%s\u0026tbs=qdr:m Google1monthgw: https://www.google.com/search?q=%s\u0026tbs=qdr:w Google1weeky: https://www.youtube.com/results?search_query=%s Youtubeq: https://qiita.com/search?q=%s Qiitad: https://duckduckgo.com/?q=%s DuckDuckGogc: https://github.com/search?q=%s\u0026type=Code\u0026utf8=✓ GithubCodegh: https://github.com/search?q=%s Githubgo: https://golang.org/search?q=%s Golang```"},{"name":"vscode-keybindings.md","content":"```[  //----------------------------------------------------------  // エディターにフォーカスしている時の設定 (editor-\u003eeditorへの移動)  //----------------------------------------------------------  // 実装箇所にコードジャンプ  {      \"key\": \"ctrl+u ctrl+i\",      \"command\": \"editor.action.goToImplementation\",      \"when\": \"editorFocus\"  },  // 宣言箇所に移動  {      \"key\": \"ctrl+u ctrl+d\",      \"command\": \"editor.action.goToDeclaration\",      \"when\": \"editorFocus\"  },  // 手前のエディターに移動  {      \"key\": \"ctrl+w ctrl+h\",      \"command\": \"workbench.action.previousEditor\",      \"when\": \"editorFocus\"  },  {      \"key\": \"ctrl+w ctrl+l\",      \"command\": \"workbench.action.nextEditor\",      \"when\": \"editorFocus \u0026\u0026 vim.mode == 'Normal'\"  },  //----------------------------------------------------------  // エディターにフォーカスしている時の設定(editor\u003c-\u003esidebarへの移動)  //----------------------------------------------------------  // サイドバーへの移動 (ctrl+hをhにしてctrlを話すだけで切り替わる)  {      \"key\": \"ctrl+w h\",      \"command\": \"workbench.action.focusSideBar\",      \"when\": \"editorFocus\"  },  // サイドバーからの移動 (ctrl+hをhにしてctrlを話すだけで切り替わる)  {      \"key\": \"ctrl+w ctrl+l\",      \"command\": \"workbench.action.focusFirstEditorGroup\",      \"when\": \"!editorFocus\"  },  // サイドバーからの移動 (ctrl+hをhにしてctrlを話すだけで切り替わる)  {      \"key\": \"ctrl+w ctrl+l\",      \"command\": \"workbench.action.navigateEditorGroups\",      \"when\": \"!editorFocus\"  },  //----------------------------------------------------------  // 検索関連(* -\u003e 検索UI)  //----------------------------------------------------------  // grep検索に入る  {      \"key\": \"ctrl+u ctrl+g\",      \"command\": \"workbench.action.findInFiles\",      \"when\": \"!searchInputBoxFocus\"  },  // 検索実行後の候補への移動  {      \"key\": \"ctrl+n\",      \"command\": \"workbench.action.interactivePlayground.arrowDown\",      \"when\": \"interactivePlaygroundFocus \u0026\u0026 !editorTextFocus\"  },  // ファイルの検索に入る  {      \"key\": \"ctrl+u ctrl+u\",      \"command\": \"workbench.action.quickOpen\"  },  //----------------------------------------------------------  // カーソル移動(editor(ui移動はなし))  //----------------------------------------------------------  //入力モードでカーソルをみぎにずらす  {      \"key\": \"ctrl+l\",      \"command\": \"cursorRight\",      \"when\": \"editorTextFocus \u0026\u0026 !editorReadOnly\"  },  //----------------------------------------------------------  // サジェストの選択(ui移動はなし)  //----------------------------------------------------------  // サジェストの選択  {      \"key\": \"ctrl+k\",      \"command\": \"acceptSelectedSuggestion\"  },  // 候補のフォーカスを下へ移動  {      \"key\": \"ctrl+n\",      \"command\": \"selectNextSuggestion\",      \"when\": \"editorTextFocus \u0026\u0026 suggestWidgetMultipleSuggestions \u0026\u0026 suggestWidgetVisible\"  },  // 候補のフォーカスを上へ移動  {      \"key\": \"ctrl+p\",      \"command\": \"selectPrevSuggestion\",      \"when\": \"editorTextFocus \u0026\u0026 suggestWidgetMultipleSuggestions \u0026\u0026 suggestWidgetVisible\"  },  // ヒントサジェストを下へ移動  {      \"key\": \"ctrl+n\",      \"command\": \"showNextParameterHint\",      \"when\": \"editorTextFocus \u0026\u0026 parameterHintsMultipleSignatures \u0026\u0026 parameterHintsVisible\"  },  // リスト系の選択のフォーカスを下へ移動  {      \"key\": \"ctrl+n\",      \"command\": \"list.focusDown\",      \"when\": \"listFocus\"  },  // 検索画面の選択のフォーカスを下へ移動  {      \"key\": \"ctrl+n\",      \"command\": \"search.focus.nextInputBox\",      \"when\": \"inputBoxFocus \u0026\u0026 searchViewletVisible\"  },  // サジェストのキャンセル  {      \"key\": \"ctrl+[\",      \"command\": \"search.action.cancel\",      \"when\": \"listFocus \u0026\u0026 searchViewletVisible\"  },  //----------------------------------------------------------  // 設定画面のみ有効なサジェストの選択(ui移動はなし)  //----------------------------------------------------------  // 候補のフォーカスを下へ移動  {      \"key\": \"ctrl+n\",      \"command\": \"settings.action.focusSettingsFile\",      \"when\": \"inSettingsSearch\"  },  // 候補のフォーカスを下へ移動  {      \"key\": \"ctrl+n\",      \"command\": \"keybindings.editor.focusKeybindings\",      \"when\": \"inKeybindings \u0026\u0026 inKeybindingsSearch\"  },  // サジェストのキャンセル  {      \"key\": \"ctrl+[\",      \"command\": \"settings.action.clearSearchResults\",      \"when\": \"inSettingsSearch\"  },  // サジェストのキャンセル  {      \"key\": \"ctrl+[\",      \"command\": \"keybindings.editor.clearSearchResults\",      \"when\": \"inKeybindings \u0026\u0026 inKeybindingsSearch\"  },  //----------------------------------------------------------  // emmetのサジェストの挙動(ui移動はなし)  //----------------------------------------------------------  // スニペットの選択  {      \"key\": \"ctrl+k\",      \"command\": \"insertSnippet\",      \"when\": \"editorTextFocus \u0026\u0026 hasSnippetCompletions \u0026\u0026 !editorTabMovesFocus \u0026\u0026 !inSnippetMode\"  },  // スニペットのプレースホルダー移動  {      \"key\": \"ctrl+k\",      \"command\": \"jumpToNextSnippetPlaceholder\",      \"when\": \"editorTextFocus \u0026\u0026 hasNextTabstop \u0026\u0026 inSnippetMode\"  },  // スニペットのプレースホルダー戻る  {      \"key\": \"ctrl+h\",      \"command\": \"jumpToPrevSnippetPlaceholder\",      \"when\": \"editorTextFocus \u0026\u0026 hasPrevTabstop \u0026\u0026 inSnippetMode\"  },  //----------------------------------------------------------  // workbenchのクイックオープンの挙動(ui移動はなし)  //----------------------------------------------------------  {      \"key\": \"ctrl+[\",      \"command\": \"workbench.action.closeQuickOpen\",      \"when\": \"inQuickOpen\"  },  {      \"key\": \"ctrl+[\",      \"command\": \"workbench.action.closeQuickOpen\",      \"when\": \"inQuickOpen\"  },  //----------------------------------------------------------  // サイドバーでのファイル名編集(ui移動はなし)  //----------------------------------------------------------  {      \"key\": \"ctrl+r\",      \"command\": \"renameFile\",      \"when\": \"explorerViewletVisible \u0026\u0026 filesExplorerFocus\"  },  {      \"key\": \"Enter\",      \"command\": \"explorer.openToSide\",      \"when\": \"explorerViewletVisible \u0026\u0026 filesExplorerFocus\"  },  //----------------------------------------------------------  // サイドバーのファイルをエディターで開く(サイドバー -\u003e エディター)  //----------------------------------------------------------  {      \"key\": \"ctrl+l\",      \"command\": \"explorer.openToSide\",      \"when\": \"explorerViewletFocus \u0026\u0026 explorerViewletVisible\"  },  //----------------------------------------------------------  // デバッグモードUI(*-\u003eデバッグモードへの移動)  //----------------------------------------------------------  {      \"key\": \"ctrl+o ctrl+d\",      \"command\": \"workbench.view.debug\"  },  {      \"key\": \"ctrl+o d\",      \"command\": \"workbench.view.debug\"  },  //----------------------------------------------------------  // バージョン管理UI(*-\u003eバージョン管理UIへの移動)  //----------------------------------------------------------  {      \"key\": \"ctrl+o ctrl+g\",      \"command\": \"workbench.view.scm\"  },  {      \"key\": \"ctrl+o g\",      \"command\": \"workbench.view.scm\"  },  //----------------------------------------------------------  // サイドバーのトグル(*-\u003eサイドバーへの移動)  //----------------------------------------------------------  {      \"key\": \"[IntlYen] v\",      \"command\": \"workbench.view.explorer\",      \"when\": \"!explorerViewletVisible \u0026\u0026 vim.mode != 'SearchInProgressMode' \u0026\u0026 vim.mode != 'Insert'\"  },  {      \"key\": \"[IntlYen] v\",      \"command\": \"workbench.action.toggleSidebarVisibility\",      \"when\": \"explorerViewletVisible \u0026\u0026 !searchViewletVisible \u0026\u0026 !inDebugMode \u0026\u0026 vim.mode != 'SearchInProgressMode' \u0026\u0026 vim.mode != 'Insert'\"  },  //----------------------------------------------------------  // コマンドパレットオープン(*-\u003eコマンドパレット)  //----------------------------------------------------------  {      \"key\": \"ctrl+o ctrl+o\",      \"command\": \"workbench.action.showCommands\"  },  {      \"key\": \"ctrl+o o\",      \"command\": \"workbench.action.showCommands\"  },  //----------------------------------------------------------  // vscodeのviewを選択(*-\u003e*)  //----------------------------------------------------------  {      \"key\": \"ctrl+o ctrl+v\",      \"command\": \"workbench.action.quickOpenView\"  },  {      \"key\": \"ctrl+o v\",      \"command\": \"workbench.action.quickOpenView\"  },  //----------------------------------------------------------  // vscodeのviewを選択(*-\u003e*)  //----------------------------------------------------------  {      \"key\": \"tab\",      \"command\": \"editor.emmet.action.expandAbbreviation\",      // \"when\": \"explorerViewletVisible \u0026\u0026 !searchViewletVisible \u0026\u0026 !inDebugMode \u0026\u0026 vim.mode != 'SearchInProgressMode' \u0026\u0026 vim.mode != 'Insert'\"      \"when\": \"explorerViewletVisible \u0026\u0026 !inDebugMode \u0026\u0026 vim.mode != 'SearchInProgressMode' \u0026\u0026 vim.mode != 'Insert'\"  },  //----------------------------------------------------------  // vscodeのterminalのトグル(*-\u003eterminal)  //----------------------------------------------------------  {      \"key\": \"[IntlYen] t\",      \"command\": \"workbench.action.terminal.toggleTerminal\",      \"when\": \"!terminalFocus \u0026\u0026 vim.mode != 'SearchInProgressMode' \u0026\u0026 vim.mode != 'Insert'\"  },  {      \"key\": \"[IntlYen] t\",      \"command\": \"workbench.action.terminal.toggleTerminal\",      \"when\": \"terminalFocus \u0026\u0026 vim.mode != 'SearchInProgressMode' \u0026\u0026 vim.mode != 'Insert'\"  },  //----------------------------------------------------------  // sidebarの検索キャンセル(*-\u003eterminal)  //----------------------------------------------------------  {      \"key\": \"Escape\",      \"command\": \"list.toggleKeyboardNavigation\",      \"when\": \"listFocus \u0026\u0026 listSupportsKeyboardNavigation\"  },  {      \"key\": \"ctrl+[\",      \"command\": \"list.toggleKeyboardNavigation\",      \"when\": \"listFocus \u0026\u0026 listSupportsKeyboardNavigation\"  },  //----------------------------------------------------------  // gitの操作系(uiの移動なし)  //----------------------------------------------------------  {      \"key\": \"g c\",      \"command\": \"git.commit\",      \"when\": \"editorTextFocus \u0026\u0026 vim.mode == 'Normal'\"  },  {      \"key\": \"g a\",      \"command\": \"git.stage\",      \"when\": \"editorTextFocus \u0026\u0026 vim.mode == 'Normal'\"  },  {      \"key\": \"g g\",      \"command\": \"cursorTop\",      \"when\": \"editorTextFocus \u0026\u0026 vim.mode == 'Normal'\"  },]```"},{"name":"vscode-settings.md","content":"{    \"window.zoomLevel\": -1,    \"window.nativeTabs\": false,    \"window.titleBarStyle\": \"native\",    \"editor.tabSize\": 2,    \"editor.minimap.enabled\": false,    \"editor.fastScrollSensitivity\": 21,    \"editor.fontSize\": 16,    \"editor.lineHeight\": 23,    \"editor.suggestSelection\": \"first\",    \"editor.lineNumbers\": \"relative\",    \"editor.fontFamily\": \"Victor Mono\",    \"editor.glyphMargin\": false,    \"editor.folding\": false,    \"workbench.editor.tabCloseButton\": \"off\",    \"workbench.editor.enablePreviewFromQuickOpen\": false,    \"workbench.editor.enablePreview\": false,    \"workbench.statusBar.visible\": false,    \"workbench.activityBar.visible\": true,    \"workbench.iconTheme\": \"chalice-icon-theme\",    \"terminal.integrated.fontSize\": 21,    \"terminal.integrated.lineHeight\": 1,    \"customizeUI.titleBar\": \"inline\",    \"customizeUI.font.regular\": \"HiraMaruProN-W4\",    \"customizeUI.font.monospace\": \"Cascadia Code\",    \"customizeUI.activityBar\": \"bottom\",    \"vim.useSystemClipboard\": true,    \"vim.visualstar\": true,    \"vim.hlsearch\": true,    \"vim.leader\": \"\u003cspace\u003e\",    \"vim.easymotion\": true,    \"vim.easymotionKeys\": \"sdfghjklqwertyuiopcvbnm\",    \"vim.easymotionMarkerBackgroundColor\": \"nord\",    \"vim.easymotionMarkerForegroundColorOneChar\": \"crimson\",    \"vim.handleKeys\": {        \"\u003cC-G\u003e\": false    },    \"vim.normalModeKeyBindingsNonRecursive\": [        {            \"before\": [                \",\"            ],            \"after\": [                \"leader\",                \"leader\",                \"s\"            ]        },        {            \"before\": [                \"leader\",                \"|\"            ],            \"after\": [                \":\",                \"v\",                \"s\",                \"CR\"            ]        },        {            \"before\": [                \"leader\",                \"-\"            ],            \"after\": [                \":\",                \"s\",                \"p\",                \"CR\"            ]        },    ],    \"markdown.preview.fontSize\": 21,    \"zenMode.silentNotifications\": false,    \"diffEditor.ignoreTrimWhitespace\": false,    \"explorer.confirmDelete\": false,    \"extensions.ignoreRecommendations\": true,    \"breadcrumbs.enabled\": true,    \"tabnine.experimentalAutoImports\": true,    \"saveAndRun\": {        \"commands\": [            {                \"match\": \"\\\\.lua$\",                \"cmd\": \"nginx -s reload\"            },            {                \"match\": \"nginx.*\\\\.conf$\",                \"cmd\": \"nginx -s reload\"            },            {                \"match\": \"/lua/html/.*\",                \"cmd\": \"nginx -s reload\"            }        ]    },    \"workbench.colorTheme\": \"gruvboxConcoctis dark medium\"}"},{"name":"web-secure.md","content":"### sql injection..summarySQL インジェクションの脆弱性がある場合、悪意あるリクエストにより、データベースの不正利用をまねく可能性があります。 1.1 SQL インジェクション 61.1SQL インジェクションデータベースと連携したウェブアプリケーションの多くは、利用者からの入力情報を基に SQL 文（データベースへの命令文）を組み立てています。ここで、SQL 文の組み立て方法に問題がある場合、攻撃によってデータベースの不正利用をまねく可能性があります。このような問題を「SQL インジェクションの脆弱性」と呼び、問題を悪用した攻撃を、「SQL インジェクション攻撃」と呼びます。■ 発生しうる脅威 SQL インジェクション攻撃により、発生しうる脅威は次のとおりです。-データベースに蓄積された非公開情報の閲覧個人情報の漏えい等-データベースに蓄積された情報の改ざん、消去ウェブページの改ざん、パスワード変更、システム停止等-認証回避による不正ログイン 4 ログインした利用者に許可されている全ての操作を不正に行われる-ストアドプロシージャ等を利用した OS コマンドの実行システムの乗っ取り、他への攻撃の踏み台としての悪用等.resolve- SQL 文の組み立ては全てプレースホルダで実装する。- SQL 文の組み立てを文字列連結により行う場合は、エスケープ処理等を行うデータベースエンジンの API を用いて、SQL 文のリテラルを正しく構成する。- ウェブアプリケーションに渡されるパラメータに SQL 文を直接指定しない。- エラーメッセージをそのままブラウザに表示しない。- データベースアカウントに適切な権限を与える。.referencesIPA：安全な SQL の呼び出し方http://www.ipa.go.jp/security/vuln/websecurity.html#sqlIPA：知っていますか？脆弱性(ぜいじゃくせい) 「1. SQL インジェクション」http://www.ipa.go.jp/security/vuln/vuln_contents/sql.htmlhttp://www.ipa.go.jp/security/vuln/vuln_contents/sql_flash.htmlIPA：セキュア・プログラミング講座「SQL注入: #1 実装における対策」http://www.ipa.go.jp/security/awareness/vendor/programmingv2/contents/502.htmlIPA：セキュア・プログラミング講座「SQL注入: #2 設定における対策」http://www.ipa.go.jp/security/awareness/vendor/programmingv2/contents/503.htmlIPA：情報セキュリティ白書2009 第 2 部「10 大脅威攻撃手法の『多様化』が進む」http://www.ipa.go.jp/security/vuln/10threats2009.htmlIPA：情報セキュリティ白書2008 第 2 部「10 大脅威ますます進む『見えない化』」http://www.ipa.go.jp/security/vuln/20080527_10threats.html### os command injection..summary### path parameter check directory trapaserror.### http header injection.### mail header injection.- XSS (クロスサイトスクリプティング)- SQL インジェクション- LDAP インジェクション- コードインジェクション- OS コマンドインジェクション- メールヘッダーインジェクション- Null バイトインジェクション- サイズ制限の無いファイルアップロード- 拡張子制限の無いファイルアップロード- オープンリダイレクト可能なログイン画面- ブルートフォース攻撃可能なログイン画面- セッション固定攻撃可能なログイン画面- 親切過ぎる認証エラーメッセージ- 危険なファイルインクルード- パストラバーサル- 意図しないファイル公開- CSRF (クロスサイトリクエストフォージェリ)- クリックジャッキング- XEE (XML エンティティ拡張)- XXE (XML 外部エンティティ)XSRF 脆弱性クロスドメイン通信では、デフォルトでユーザー定義ヘッダーを参照できないブラウザでヘッダーの参照を許可するには、サーバーサイドのレスポンスヘッダに Access-Control-Expose-Headers を付加する。例えば golang の gin framework をでは以下のようにする。// ブラウザがレスポンスヘッダーの読み取りを許可c.Header(\"Access-Control-Expose-Headers\", \"X-HogeApp-Hogeid\")Same-Origin PolicyWeb セキュリティの重要なポリシーの一つに Same-Origin Policy (同一オリジンポリシー)があります。これは、オリジン間のリソース共有に制限をかけるもので、次のような脆弱性を防ぐことを目的としたものです。- XSS (Cross Site Scripting)  ユーザーが Web サイトにアクセスすることで不正なスクリプトが Client (Web ブラウザ) で実行されてしまう脆弱性。  被害例は、Cookie 内のセッション情報を抜き取られて不正ログインを行われる、など。- CSRF (Cross-Site Request Forgeries)  Web アプリケーションのユーザーが、意図しない処理を Web アプリケーション (Web Server) 上で実行される脆弱性。通称「しーさーふ」。  被害例は、本来はログインしたユーザーしか実行できない記事の投稿処理を勝手にされる、など。JavaScript の組み込み API で、Ajax 通信を実現する XMLHttpRequest (XHR) や Fetch API などは、これらの脆弱性を回避するため、Same-Origin Policy に従います。- XSS と CSRF  https://qiita.com/att55/items/a50ca43adde206017525- XSS とは  XSS とは一言で表すと ユーザー（被害者）の Web ブラウザで任意の JavaScript を実行させることを許す脆弱性または攻撃手法 です。  ちなみに略称が CSS ではなく XSS なのは、Cascading Style Sheets とかぶってるのでややこしいからのようです。- CSRF  続いて CSRF です。CSRF を一言で表すと 正規ユーザを誘導し、強制的に特定の処理を実行させる攻撃を許す脆弱性または攻撃手法 と言えます。  forgeries/forgery ってあまり聞かないですよね... 偽造 という意味らしいですよ。(サイトをまたがってリクエストを偽造する :thinking: )具体的な実装- [AWS の基礎を学ぼう 特別編 最新サービスをみんなで触ってみる 〜Amazon Route 53 Resolver DNS Firewall〜 ハンズオン手順 #awsbasics | DevelopersIO](https://dev.classmethod.jp/articles/awsbasics_route53_dns_firewall_handson/)"},{"name":"web-service-pattern.md","content":"- SPA- SSG- SSG + googla analytics + ogp ...- JAMstack- Microservice"},{"name":"webrtc.md","content":"p2p 100secwebrtc realtime comunication.chrome, safari.- \u003chttps://gist.github.com/voluntas/e914aa245fc26f3133c2\u003egetUserMedia```navigator.mdeiaDevices.getUserMedia(streamContraints).then(function (stream) {  localStream = stream;  localVideo.srcObject = stream;})```R/Users/evolany36/dev/kis9a/hugo-blog/static/kis9a.jpgTCPeerConnectionData ChannelKVS WebRTC の感想- 現状はビデオチャットのようなコミュニケーションアプリを作るためのものではない- 1 対 1 なら可能だが、Master（主催者）と Viewer（参加者）がはっきり区別される- n 対 n は不可能- ただし今後 SFU のようなサーバー側の仕組みが登場する可能性はある- 1 対少数の配信は可能だが、大規模配信はできない- それは(WebRTC ではない)Kinesis Video Streams を使うのが筋が良さそうVS WebRTC のサーバーが提供する機能は、次の通りです。- シグナリング ... Offer/Answer SDP の交換、ICE candidate の交換- STUN/TURN ... P2P 通信で NAT 越えを行ったり、UDP が通らない場合でも通信を行うための仕組みsample\u003chttps://github.com/webrtc/samples\u003e\u003chttps://qiita.com/mobilebiz/items/8256732f00d96ac8eab5\u003e- P2P(Peer to Peer)方式  ブラウザ同士が直接映像などをやり取りする  もっとも高解像度で自由度が高い  WebRTC が前提としている接続方式でリアルタイム通信に向いている  接続する相手が増えてくるとブラウザ側の負担が大きくなる（特にモバイル）  Twilio Video の「Go」と「Peer-to-peer」で利用される方式- SFU（Selective Forwarding Unit）方式  映像や音声を中継するサーバーを配置  録画などの付加機能を実施することが可能  上りのコネクションは１本、下りは相手の数分必要  ブラウザが増えた場合に、ブラウザ側の負担が P2P に比べて少ない  SFU 側では画像の加工などは行わないため、SFU 自体の負担は低い  Twilio Video の「Group」「Group-small」で利用される方式  \u003chttps://webrtc.ecl.ntt.com/\u003e- [WebRTC を今から学ぶ人に向けて](https://zenn.dev/voluntas/scraps/82b9e111f43ab3)- シグナリングWebRTC サーバで考えるべきことWebRTC のサーバサイドインフラストラクチャを考えるに辺り、4 つのサーバについて本セッションでは述べる。シグナリングサーバNAT 越えサーバメディアサーバ(音声・映像・データ)ゲートウェイサーバユーザ認証アクセスコントロール、セキュリティプッシュ通知 (特にバッテリ消費に注意) -\u003eフェデレーション（他のサービスプロバイダとの相互接続）その他、現実社会で必要とされる機能anybot line screen-\u003e adfadfadf\u003c- adfadfadf-\u003e hey starting live, https://livestreeming.com.-\u003e p2p starting live, https://livestreeming.com. token は自動的に.WebRTC の P2P 利用は、配信者が視聴者分の変換を行うという負担があることから、最大でも 10 名程度までしか配信できません。配信の場合は P2P で WebRTC という考えを捨てましょう。- クラサバモデル大規模配信  大規模配信を行う場合は P2P ではなく、あまり馴染みのない WebRTC でのクラサバモデルが前提となります。  P2P では配信者が直接視聴者に配信しますが、クラサバモデルの場合は、配信者は WebRTC サーバに配信します。視聴者と直接やり取りするのは WebRTC サーバになります。 WebRTC は UDP をベースとしているプロトコルで、さらに低遅延を目的としているため CDN を利用することはできません。 まず多くの配信を行うには CDN が前提となりますが、それが利用できないというのを念頭に置いていただければと思います。  さて、大規模配信ですが実際どのくらいを大規模というのでしょうか。感覚的に 1 万接続への配信は大規模だと感じています。  そのため 1 万接続以上への配信が WebRTC で可能かどうか、という話をここではしようと思います。  現実的には可能だと思います。ただ遅延は 200–300 ミリ秒ではなく 1 秒以内、程度のものになると思います。  この場合は複数の WebRTC サーバを多段型にすることで多くの接続へ配信をする仕組みが前提となります。  WebRTC を利用した超低遅延配信は一定の接続数までなら現実的です。別に夢物語ではありません。一定以上の場合は HLS/MPEG-DASH を採用して困ることはないでしょう。つまり住み分けすべきです。  そう考えると現実としては上の仕組みを使い最大 3000 接続までは WebRTC で配信を行い、それ以降は HLS での変換を同時に行うなどの仕組みが現実的だと思います。  3000 接続の配信が 1000 あるだけで、実質同時 300 万接続をさばく必要があります。サーバが 100 台あっても 1 サーバ 1 万接続を処理できる必要がでてきてしまいます。- サイマルキャスト  WebRTC は超低遅延の双方向の配信を前提としているため 1:N の場合は、N 側の様々な環境を考慮し配信側がビットレートを変更するという仕組みを取ることはできません。  回線が細く、遅い PC で見ている人もいれば、ゲーミング PC で見てる人もいれば、スマートフォンで見てる人もいるでしょう。  そのための技術としてサイマルキャストがあります。簡単に言えば配信側に数種類の画質での配信をしてもらい、サーバ側で視聴者の帯域を推定し、視聴者毎の帯域に合わせた画質の映像を配信するという仕組みです。- WebRTC はどのブラウザをサポートしている？  IE を除き、主要なブラウザはほぼサポートしている  コーデックは VP8, H.264, Opus への対応が求められる  将来的には VP9, AV1, H.265 あたりの対応が予想される  WebRTC はなぜリアルタイムで配信できるのか？  UDP ベースの通信方式を採用している  また、HTTP ベースのストリーミング形式は基本的にチャンク（映像を決められた感覚で区切って送出する）である為、遅延が発生する  WebRTC はチャンクという概念はなく、とにかくストリームを送り続けるイメージ  その為、よりリアルタイムな配信が実現できる  WebRTC の仕組み  様々な要素が登場する複雑な仕組みとなっている  接続  UDP, ICE, STUN, TURN, SDP, シグナリング  独自フレームワーク  メディアチャネル, データチャネル, 輻輳制御, 再送制御  暗号化通信  DTLS, SRTP, SRTCP, SCTP  WebRTC はどうやって接続を確立する？  ICE によって接続経路と接続の候補が確認される  STUN によって NAT 越えが実現され, SDP（Session Description Protocol）で通信に必要な情報を交換する  P2P 通信ができない環境などでは、中継サーバとして　 TURN が使用されることもある  WebRTC で使用されているプロトコルは？  IP の上に様々なプロトコルが乗っており、非常に複雑  ベースは UDP による通信で、DTLS と呼ばれる TLS に似たプロトコルで通信の暗号化を行う  DTLS によって暗号化された経路上で、SRTP や SRTCP といった各種情報をやりとりするためのプロトコルが使用されている  SCTP とは  データチャネルがやりとりされるプロトコル  UDP 上で TCP の様な輻輳制御等を行ってくれるプロトコルだが、まだ未熟な部分も存在  SCTP に変わるプロトコルとして、Google が研究開発している　 QUIC というプロトコルが期待されている  WebRTC の性能は？  実際に環境を用意してテストを実施した  遅延  250ms - 300ms で安定して超低遅延を実現  画質  基本的に高いビットレートで鮮明な映像を配信できる  一方で、変化の大きい映像には対応しきれない部分も- 課題  低遅延と止まらない再生はトレードオフ。仕組み上、コマ落ちなどはどうしても発生する  同時接続数の拡張に課題  今後もより大規模な配信に対応する事が求められるはず  UDP や配信プロトコルのフェイルオーバーなどに課題  優位性  超低遅延であることのレスポンス性  チャットなどの双方向通信が与える臨場感  超低遅延な複数視点を切り替えて視聴する AR 的体験の構築  ライムライト社が提供する Limelight Realtime Streaming - RTS は何を解決するのか？  超低遅延配信における課題を解決し、優位性についてはより拡張する事を目指し、アップデートが行われている- 4 つのキーワード  Resilience  超低遅延ライブビデオストリームでも安定的かつ、より多くの同時視聴者数をサポートする、協力なアーキテクチャ  Scalability  ニーズに基づき、継続的に拡張ができる事  Picture Quality  より高いビットレートのビデオストリームをサポートする  Interactive Data  Shared object のサポートを容易に[ぼくのかんがえたさいきょうの超低遅延大規模配信 · GitHub](https://gist.github.com/voluntas/0eb505cb5d53fefec6708aa93fd2410d)ただし 10 万人などの超大規模に対しては HLS/MPEG-DASH + CDN という世界を利用すべきだと考えています。超大規模で超低遅延の需要はスポーツ中継とかでしょうか ... このあたりは、まだなんとも言えないのが現状です。1:1 であれば WebRTC P2P を検討しても良いそれ以外は WebRTC SFU を検討するべきWebRTC SFU の自作はコスト面からいってメリットが少ない- 自力で WebRTC SFU を作るメリットはない  既存製品の劣化版になる  メンテナンスのコストが高い  機能追加のコストが高い  劣化版を作り上げるなら、既存製品を利用していくべき"},{"name":"wildcard.md","content":"\u003chttps://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm\u003eGNU/Linux Command-Line Tools Summary"},{"name":"wireflame.md","content":"https://mimonelu.github.io/wirelang/- [GitHub - mimonelu/wirelang: 単純な構造化テキストから Web ページのワイヤーフレームを描画するライブラリです。](https://github.com/mimonelu/wirelang)"},{"name":"workstyle.md","content":"# workstyle- D2D: less than 30min.- PAY: more than 400man in the year- TIME: 11:00 ~ 7:00- PLACE: Anywhere"},{"name":"writing-tech.md","content":"[技術記事アウトプットの一事例](https://zenn.dev/yohhoy/articles/backstage-of-tech-article)- 知的好奇心の探求- 外部記憶装置- テクニカルライティング訓練- いつか誰かの役に立つといいね「1 記事の テーマを絞る」「未来の自分 が理解できる説明」[技術記事を書く人を大事にしよう](https://zenn.dev/kaityo256/articles/save_the_earth)"},{"name":"xargs.md","content":"find . -type d -name \"_log_\" | xargs -I {} sh -c \"echo {}; ls -la {} | tail -2\"ls -1 \\*.png | xargs -n 1 bash -c 'convert \"$0\" \"${0%.png}.jpg\"'find . -type d -name \"_log_\" | xargs -I {} sh -c \"echo {}; ls -la {} | tail -2\"ls | xargs -r -L 2 bash -c 'echo \"Output:\" ${0}'ls | xargs -L 2 bash -c 'echo \"Output:\" ${0} ${1}'echo 'https://nav.kis9a.com/' | xargs -r -L 2 -I@ `echo @ echo curl -s @ | grep -o \"\u003ctitle\u003e[^\u003c]*\" | tail -c+8 | xargs -I {} echo '[{}]()_'`echo -n '['`curl -s 'https://nav.kis9a.com' | grep -o \"\u003ctitle\u003e[^\u003c]*\" | tail -c+8`']'; echo -n '(https://nav.kis9a.com)'curl -s https://qiita.com | pup '.css-qrra2n text{}, attr{href}' | cat -n | fzf -m | xargs -I {} | cut -d \" \" -f 1seq 100 | xargs -t -P3 -n4 ruby -e 'sleep 5'seq 0 0.1 1 | xargs -I@ bash -c 'owari big | lolcat -f --freq=@' | textimg -asl29 -d8-t 実行する前にそのコマンドラインを表示する-P3 3 プロセスを並列に実行-n4 各プロセスが引数 4 個をとるようにする（入力をスペースによって引数に区切る）-P を指定した場合は-n または-L も同時に指定すること。そうしないと 1 プロセスしか起動してこない。-n と-L の違い-n3 各プロセスが引数 3 個をとるようにする（入力をスペースによって引数に区切る）-L3 各プロセスが引数 3 個をとるようにする（入力を改行によって引数に区切る）get ASN for any targets via dig + whois tools…dig +short uber | xargs -I %% bash -c 'whois -h http://whois.cymru.com \" -f -p %%\"'seq 4 8 | nl | xargs -n2 bash -c 'seq $1 | sed \"s/^/printf \\$(tput setaf 0)\\$(tput setab $(($0 % 9)))$1\\$(tput sgr0)\\\"...bash gist2localmd.bash | jq | sed -e \"s/[//g' -e 's/]//g\" | tr -s \"\\n\"curl -s \"https://api.github.com/users/milanboers/repos?per_page=100\" | jq -r \".[].git_url\" | xargs -L1 git clonels | xargs -L 1 bash -c 'echo ${0} ${1}'ls | xargs -L 1 bash -c \"echo ${0} ${1}\""},{"name":"yabai.md","content":"```#!/usr/bin/env sh# global settings## マネジメントyabai -m config layout bsp## マウスがフォーカスに追従する(マウスカーソルが移動する)(on|off)yabai -m config mouse_follows_focus off## フォーカスをマウスに追従させる(autoraise|off)yabai -m config focus_follows_mouse off## 追加ウィンドウの発生箇所(first_child 上、左|second_child 下、右)yabai -m config window_placement first_child## フローティングウィンドウは常に上に表示(on|off)yabai -m config window_topmost off## ウィンドウの影を変更(on|off|float)yabai -m config window_shadow offyabai -m config insert_feedback_color 0xaad75f5f# ウィンドウの透過設定yabai -m config window_opacity onyabai -m config window_opacity_duration 0.0yabai -m config active_window_opacity 0.5yabai -m config normal_window_opacity 0.5# 割比率yabai -m config split_ratio 0.15yabai -m config auto_balance on# mouseによる即編集(無効にした)# yabai -m config mouse_modifier               fn# yabai -m config mouse_action1                move# yabai -m config mouse_action2                resize# general space settingsyabai -m config top_padding 05yabai -m config bottom_padding 05yabai -m config left_padding 05yabai -m config right_padding 05yabai -m config window_gap 06echo \"yabai configuration loaded..\"分# general space settingsyabai -m config layout bspyabai -m config top_padding 400yabai -m config bottom_padding 150yabai -m config left_padding 1000yabai -m config right_padding 400yabai -m config window_gap 10```"},{"name":"youtube-dl.md","content":"mpv --ytdl-raw-options=\"yes-playlist=\" https://www.youtube.com/watch?v=DamuE8TM3xo\u0026list=PLGLfVvz_LVvQ9S8YSV0iDsuEU8v11yP9MThe following example downloads top 100 songs on YouTube Music```-i, --ignore-errors    Continue on download errors, for example to skip                       unavailable videos in a playlist-w, --no-overwrites    Do not overwrite files-c, --continue         Force resume of partially downloaded files.                       By default, youtube-dl will resume downloads if possible.```youtube-dl -ciw --playlist-items 1-100 --extract-audio --audio-format mp3 --restrict-filenames https://www.youtube.com/playlist?list=PLDcnymzs18LWrKzHmzrGH1JzLBqrHi3xQmpv --ytdl-raw-options=\"yes-playlist=\" https://www.youtube.com/watch?v=DamuE8TM3xo\u0026list=PLGLfVvz_LVvQ9S8YSV0iDsuEU8v11yP9Mmpv --shuffuleoutube-dl -ciw --extract-audio --audio-format mp3 --restrict-filenames \"https://www.youtube.com/playlist?list=PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj\"\u003e cat a | xargs -I {} youtube-dl -ciw --restrict-filenames -f 22 {}"},{"name":"yum.md","content":"- yum install ＜パッケージ＞  インストールする。- yum groupinstall ＜パッケージグループ＞  パッケージグループをインストールする。「パッケージグループ」については  参考サイト 9 を参照。- yum clean packages  ダウンロードした rpm ファイルを削除する。- yum clean all  キャッシュ（今までダウンロードした rpm ファイル、ヘッダファイルなど）すべてを削除する。- yum update ＜パッケージ＞  アップデートする。- yum remove ＜パッケージ＞  アンインストールする。- yum list installed [＜パッケージ＞]  インストール済みパッケージの一覧を表示する。  インストールされたパッケージのうち、パッケージ名が \"php70\" で始まるもののリストを表示するコマンドは以下。- yum list installed \"php70\\*\"- yum list [＜パッケージ＞]  インストール可能なパッケージの一覧を表示する。- yum provides ＜ファイル名＞  指定したファイル名を含むパッケージを検索する。- yum info [installed] [＜パッケージ＞]  パッケージの情報を表示する。- yum check-update- yum list updates  インストールしたパッケージでアップデートが必要（できる）一覧を表示する。- yum -v grouplist  インストール可能なパッケージグループを表示する。  -v オプションについて下で説明する。- yum groupinfo ＜パッケージグループ＞  パッケージグループの情報を表示する。- yum deplist ＜パッケージ＞  パッケージの依存関係を表示する。- yum repolist [all | enabled | disabled | ＜リポジトリ名＞]  リポジトリを表示する。  all：すべてのリポジトリ  enabled：有効なリポジトリ  disabled：無効なリポジトリ- yum search ＜検索文字列＞  リポジトリ名やサマリーからパッケージ名を検索する。- yum list available ＜パッケージ名の一部＞  完全なパッケージ名が分からないときにパッケージ名の一覧を表示する。引数にはワイルドカードを使用する。  例えば \"abc\" で始まるパッケージ名を調べたい場合は以下のようにする。  　 yum list available 'abc\\*'- yum provides ＜ファイルのパス＞  指定したファイルを含むパッケージと該当するリポジトリを表示する。  例： yum provides '\\*bin/yum'- yum install ＜ URL ＞  URL からインストールする。"},{"name":"zabbix.md","content":"- [Documentation](https://www.zabbix.com/manuals)"},{"name":"zalgo.md","content":"// please nomodule['exports'] = function zalgo(text, options) {  text = text || '   he is here   ';  var soul = {    'up': [      '̍', '̎', '̄', '̅',      '̿', '̑', '̆', '̐',      '͒', '͗', '͑', '̇',      '̈', '̊', '͂', '̓',      '̈', '͊', '͋', '͌',      '̃', '̂', '̌', '͐',      '̀', '́', '̋', '̏',      '̒', '̓', '̔', '̽',      '̉', 'ͣ', 'ͤ', 'ͥ',      'ͦ', 'ͧ', 'ͨ', 'ͩ',      'ͪ', 'ͫ', 'ͬ', 'ͭ',      'ͮ', 'ͯ', '̾', '͛',      '͆', '̚',    ],    'down': [      '̖', '̗', '̘', '̙',      '̜', '̝', '̞', '̟',      '̠', '̤', '̥', '̦',      '̩', '̪', '̫', '̬',      '̭', '̮', '̯', '̰',      '̱', '̲', '̳', '̹',      '̺', '̻', '̼', 'ͅ',      '͇', '͈', '͉', '͍',      '͎', '͓', '͔', '͕',      '͖', '͙', '͚', '̣',    ],    'mid': [      '̕', '̛', '̀', '́',      '͘', '̡', '̢', '̧',      '̨', '̴', '̵', '̶',      '͜', '͝', '͞',      '͟', '͠', '͢', '̸',      '̷', '͡', ' ҉',    ],  };  var all = [].concat(soul.up, soul.down, soul.mid);  function randomNumber(range) {    var r = Math.floor(Math.random() * range);    return r;  }  function isChar(character) {    var bool = false;    all.filter(function(i) {      bool = (i === character);    });    return bool;  }  function heComes(text, options) {    var result = '';    var counts;    var l;    options = options || {};    options['up'] =      typeof options['up'] !== 'undefined' ? options['up'] : true;    options['mid'] =      typeof options['mid'] !== 'undefined' ? options['mid'] : true;    options['down'] =      typeof options['down'] !== 'undefined' ? options['down'] : true;    options['size'] =      typeof options['size'] !== 'undefined' ? options['size'] : 'maxi';    text = text.split('');    for (l in text) {      if (isChar(l)) {        continue;      }      result = result + text[l];      counts = {'up': 0, 'down': 0, 'mid': 0};      switch (options.size) {        case 'mini':          counts.up = randomNumber(8);          counts.mid = randomNumber(2);          counts.down = randomNumber(8);          break;        case 'maxi':          counts.up = randomNumber(16) + 3;          counts.mid = randomNumber(4) + 1;          counts.down = randomNumber(64) + 3;          break;        default:          counts.up = randomNumber(8) + 1;          counts.mid = randomNumber(6) / 2;          counts.down = randomNumber(8) + 1;          break;      }      var arr = ['up', 'mid', 'down'];      for (var d in arr) {        var index = arr[d];        for (var i = 0; i \u003c= counts[index]; i++) {          if (options[index]) {            result = result + soul[index][randomNumber(soul[index].length)];          }        }      }    }    return result;  }  // don't summon him  return heComes(text, options);};[].concat(...[...document.all].map(e =\u003e [...e.childNodes]))  .filter(n =\u003e n.nodeType === Node.TEXT_NODE)  .map(n =\u003e    n.textContent = n.textContent.replace(/([a-zA-Z])/g, (_, c) =\u003e      c + [...Array(Math.floor(Math.random()*30))].map(() =\u003e            String.fromCharCode(0x300 + Math.floor(Math.random()*79))          ).join('')    )  )"},{"name":"zsh-vcs-info.md","content":"- %b ブランチ情報 $hook_com[branch]- %i リビジョン番号またはリビジョンID $hook_com[revision]- %r リポジトリ名 $hook_com[base-name]- %R リポジトリのルートディレクトリのパス $hook_com[base]- %S リポジトリルートから見た今のディレクトリの相対パス $hook_com[subdir]- %a アクション名(mergeなど) actionformats のみで指定可 $hook_com[action]- %c stagedstr 文字列 $hook_com[staged]- %u unstagedstr 文字列 $hook_com[unstaged]- %m その他の情報 $hook_com[misc]"},{"name":"zsh.md","content":"1. global) /etc/zshenv2. local ) ~/.zshenv3. global) /etc/zshrc4. local ) ~/.zshrc$ zcompile ~/.zshrc.zshrc.zwc| コマンド        | 内容                                              || --------------- | ------------------------------------------------- || man zsh         | zsh の概要                                        || man zshall      | zsh man ページのまとめ                            || man zshbuiltins | zsh ビルトインコマンド概要                        || man zshcalsys   | zsh のカレンダーシステム概要                      || man zshcompsys  | zsh のコマンドライン補完の概要                    || man zshexpn     | zsh 展開の概要                                    || man zshmisc     | 文字通り雑多な詰め合わせ(パイプ、リダイレクト等） || man zshoptions  | zsh で設定可能なオプション一覧                    || man zshparam    | zsh の変数関係の記号や使い方                      || man zshzle      | zsh のコマンドラインエディタ概要                  |"}]