[{"name":"amplify.md","content":"```ts\n\nimport Amplify from '@aws-amplify/core';\nimport PubSub from '@aws-amplify/pubsub';\nimport API, { graphqlOperation } from '@aws-amplify/api';\n\nimport awsmobile from '../aws-exports';\n\nAmplify.configure(awsmobile);\nAPI.configure(awsmobile);\nPubSub.configure(awsmobile);\n\n```\n\n```ts\nimport { createTodo, deleteTodo, updateTodo } from '../graphql/mutations';\nimport { getTodo, listTodos } from '../graphql/queries';\nimport { onCreateTodo, onUpdateTodo, onDeleteTodo } from '../graphql/subscriptions';\n```\n\n昨日\tCRUD\tgraphql\n作成\tCREATE\tMutation\n取得\tREAD\tQuery\n更新\tUPDATE\tMutation\n削除\tDELETE\tMutation\n\n加えてgraphqlではSubscription（購読）というものがあります。これは、端的にいうとサーバー側からのPushのようなもの\n\nexport const getTodo = `query GetTodo($id: ID!) {\n  getTodo(id: $id) {\n    id\n    description\n    isDone\n  }\n}\n`;\n\n- amplify auth sns\nhttps://qiita.com/takeshi_hirosue/items/1c32e43816ea1d6a204d#step2-3-%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%81%AE%E8%A8%AD%E5%AE%9A\n\n- amplify \n\nAWS Amplify（Cognito）でGoogleソーシャルログインする\n\n\n【爆速】React+Amplify+AppSyncでリアルタイム掲示板アプリ\nhttps://qiita.com/G-awa/items/a5b2cc7017b1eceeb002\n\nhttps://aws-amplify.github.io/amplify-js/api/\n\nhttps://qiita.com/nagym/items/638974a3a5aaa63841c8\nGraphQL API開発スピードを爆上げするAWS Amplify Mockingことはじめ\n\n- [How to allow guest users to access web applications?  (Amplify, AWS AppSync, Cognito  IAM) - YouTube](https://www.youtube.com/watch?v=ZRJbosMAWU4&ab_channel=EnlearAcademy)"},{"name":"ascii-chalenge.md","content":"ascii\n\nhttps://github.com/joelibaceta/video-to-ascii\nhttps://github.com/topics/ascii-diagram\n\nhttps://www.npmjs.com/package/ascii-video\n\nhttps://stackoverflow.com/questions/6235785/run-a-shell-script-with-an-html-button\n\nhttps://www.youtube.com/watch?v=HOzHG581G8Y&ab_channel=KrisOcchipinti\nhttps://www.youtube.com/watch?v=V9cRLasYC_Y&ab_channel=CreativeCodingNYC\n\nnext terminal\n\nhttps://www.youtube.com/watch?v=rnMXH_K8hz4&t=22s\n\nhttps://www.brow.sh/\n\n```\n\n _________________________________________\n/ muda muda muda muda muda muda muda muda \\\n\\ muda                                    /\n -----------------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n _____________\n( I feel lost )\n -------------\n        o   ^__^\n         o  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n＿人人人人人人＿\n＞　突然の死　＜\n￣Y^Y^Y^Y^Y^Y^￣\n```\n\n\n```\n\noooo                  oooo  oooo\n`888                  `888  `888\n 888 .oo.    .ooooo.   888   888   .ooooo.\n 888P\"Y88b  d88' `88b  888   888  d88' `88b\n 888   888  888ooo888  888   888  888   888\n 888   888  888    .o  888   888  888   888\no888o o888o `Y8bod8P' o888o o888o `Y8bod8P'\n\n\nvim /[^\\x01-\\x7e]/ src/pages/contact/_.vue | cw\nvim /[^\\x01-\\x7e]/ src/components/contact/_/\\*.vue | cw\n\n\nbrew install boxes\nboxes -l | more\nls | boxes\n\n\ntable\n\nhttps://unix.stackexchange.com/questions/126630/creating-diagrams-in-ascii\nhttps://stackoverflow.com/questions/15215326/how-can-i-create-table-using-ascii-in-a-console\necho \"[ Bonn ] -- car --> [ Berlin ], [ Ulm ]\" | graph-easy"},{"name":"awk.md","content":"ユーザ毎のCPU使用率を見る\n$ ps aux | awk '{ if(NR>1){p[$1] += $3; n[$1]++ }}END{for(i in p) print p[i], n[i], i}'\n\n# 文字数カウント(wc -c)\n$ awk '{n+=length($0)} END{print n}' filename\n\n# 単語数カウント(wc -w)\n$ awk '{n+=NF} END{print n}' filename\n\n# 行数カウント(wc -l)\n$ awk 'END{print NR}' filename\n\n指定行から指定行まで表示\n$ awk 'NR==10,NR==20'\n\n# 奇数行\n$ awk 'NR%2' filename\n\n# 偶数行\n$ awk 'NR%2==0' filename"},{"name":"bash-export-path.md","content":"How to correctly add a path to PATH?\nAsked 9 years ago\nActive 6 months ago\nViewed 2.6m times\n\n1080\n\n564\nI'm wondering where a new path has to be added to the PATH environment variable. I know this can be accomplished by editing .bashrc (for example), but it's not clear how to do this.\n\nThis way:\n\nexport PATH=~/opt/bin:$PATH\nor this?\n\nexport PATH=$PATH:~/opt/bin\nbash\nenvironment-variables\npath\nbashrc\nshare improve this question follow\nedited Sep 17 '15 at 18:27\n\nScott\n8,78577 gold badges3434 silver badges5959 bronze badges\nasked Dec 4 '11 at 20:57\n\nPaolo\n13.5k1010 gold badges2424 silver badges3737 bronze badges\nprintf '\\nPATH=$PATH:\"path-to-add\"\\nexport PATH\\n' >> ~/.bashrc – Microsoft Linux TM Nov 7 '14 at 13:04\n3\nUnix shell function for adding directories to PATH – Sildoreth Apr 30 '15 at 13:59\n1\nIf there are already some paths added, e.g. PATH=$PATH:$HOME/.local/bin:$HOME/bin, another can be added by separating with a : e.g. PATH=$PATH:$HOME/.local/bin:$HOME/bin:/home/ec2-user/pear/bin. – Sandeepan Nath Aug 20 '16 at 18:40\n2\nDo these answers work for all flavors of linux? – Ungeheuer Nov 20 '16 at 20:58\n1\nwrote a little utility to help with exactly this. github.com/aalok-sathe/pathin – axolotl May 12 at 13:48\nshow 1 more comment\n11 Answers\n\n1211\n\nThe simple stuff\nPATH=$PATH:~/opt/bin\nor\n\nPATH=~/opt/bin:$PATH\ndepending on whether you want to add ~/opt/bin at the end (to be searched after all other directories, in case there is a program by the same name in multiple directories) or at the beginning (to be searched before all other directories).\n\nYou can add multiple entries at the same time. PATH=$PATH:~/opt/bin:~/opt/node/bin or variations on the ordering work just fine. Don't put export at the beginning of the line as it has additional complications (see below under “Notes on shells other than bash”).\n\nIf your PATH gets built by many different components, you might end up with duplicate entries. See How to add home directory path to be discovered by Unix which command? and Remove duplicate $PATH entries with awk command to avoid adding duplicates or remove them.\n\nSome distributions automatically put ~/bin in your PATH if it exists, by the way.\n\nWhere to put it\nPut the line to modify PATH in ~/.profile, or in ~/.bash_profile if that's what you have.\n\nNote that ~/.bash_rc is not read by any program, and ~/.bashrc is the configuration file of interactive instances of bash. You should not define environment variables in ~/.bashrc. The right place to define environment variables such as PATH is ~/.profile (or ~/.bash_profile if you don't care about shells other than bash). See What's the difference between them and which one should I use?\n\nDon't put it in /etc/environment or ~/.pam_environment: these are not shell files, you can't use substitutions like $PATH in there. In these files, you can only override a variable, not add to it.\n\nPotential complications in some system scripts\nYou don't need export if the variable is already in the environment: any change of the value of the variable is reflected in the environment.¹ PATH is pretty much always in the environment; all unix systems set it very early on (usually in the very first process, in fact).\n\nAt login time, you can rely on PATH being already in the environment, and already containing some system directories. If you're writing a script that may be executed early while setting up some kind of virtual environment, you may need to ensure that PATH is non-empty and exported: if PATH is still unset, then something like PATH=$PATH:/some/directory would set PATH to :/some/directory, and the empty component at the beginning means the current directory (like .:/some/directory).\n\nif [ -z \"${PATH-}\" ]; then export PATH=/usr/local/bin:/usr/bin:/bin; fi\nNotes on shells other than bash\nIn bash, ksh and zsh, export is special syntax, and both PATH=~/opt/bin:$PATH and export PATH=~/opt/bin:$PATH do the right thing even. In other Bourne/POSIX-style shells such as dash (which is /bin/sh on many systems), export is parsed as an ordinary command, which implies two differences:\n\n~ is only parsed at the beginning of a word, except in assignments (see How to add home directory path to be discovered by Unix which command? for details);\n$PATH outside double quotes breaks if PATH contains whitespace or \\[*?.\nSo in shells like dash, export PATH=~/opt/bin:$PATH sets PATH to the literal string ~/opt/bin/: followed by the value of PATH up to the first space. PATH=~/opt/bin:$PATH (a bare assignment) doesn't require quotes and does the right thing. If you want to use export in a portable script, you need to write export PATH=\"$HOME/opt/bin:$PATH\", or PATH=~/opt/bin:$PATH; export PATH (or PATH=$HOME/opt/bin:$PATH; export PATH for portability to even the Bourne shell that didn't accept export var=value and didn't do tilde expansion)."},{"name":"bash.md","content":"- https://gnu.org/savannah-checkouts/gnu/bash/manual/bash.html\n- https://github.com/google/styleguide/blob/gh-pages/shellguide.md\n- https://github.com/josa42/coc-sh\n- https://github.com/koalaman/shellcheck\n- https://github.com/lfkdev/bashtemplate\n\nbash デバッグ Tips\n\n- https://qiita.com/rsooo/items/ef1d036bcc7282a66d7d\n- https://qiita.com/mashumashu/items/ee436b770806e8b8176f\n- https://qiita.com/aosho235/items/4e913905a130c0eaf86d\n\n[標準出力に出しつつ、パイプ先のコマンドにも繋ぐ | tellme.tokyo](https://tellme.tokyo/post/2020/02/07/tee-command/)\n\nその他の演算子\nファイルやディレクトリの存在を確認する際に使用できる演算子についてまとめました。\n\n演算子 説明\n-a ファイル ファイルがあれば真\n-b ファイル ファイルがありブロックス特殊ファイルであれば真\n-c ファイル ファイルがありキャラクター特殊ファイルであれば真\n-d ファイル ファイルがありディレクトリであれば真\n-e ファイル ファイルがあれば真\n-f ファイル ファイルがあり通常のファイルであれば真\n-g ファイル ファイルがあり SGID(特殊なアクセス権)であれば真\n-G ファイル ファイルがあり実行グループ ID による所有者であれば真\n-h ファイル ファイルがありシンボリックであれば真（-L と同じ）\n-k ファイル ファイルがありステッキービットが設定されていれば真\n-L ファイル ファイルう�ありシンボリックであれば真（-h と同じ）\n-O ファイル ファイルがあり実行ユーザ ID による所有者であれば真\n-p ファイル ファイルがあり名前付きパイプ（named pipe）であれば真\n-r ファイル ファイルがあり読み取り可能であれば真\n-s ファイル ファイルがありサイズが 0 より大きければ真\n-S ファイル ファイルがありソケットであれば真\n-t FD FD（ファイルディスクリプタ）が端末でオープンされていれば真\n-u ファイル ファイルがあり SUID(特殊なアクセス権)であれば真\n-w ファイル ファイルがあり書き込み可能であれば真\n-x ファイル ファイルがあり実行可能であれば真\n\n- [bash, zsh で yes/no 判定をするワンライナー - Qiita](https://qiita.com/u1and0/items/a628db9644a72b11584c)\n\n- [shell - How do you echo a 4-digit Unicode character in Bash? - Stack Overflow](https://stackoverflow.com/questions/602912/how-do-you-echo-a-4-digit-unicode-character-in-bash)\n\n```bash\na_flag=''\nb_flag=''\nfiles=''\nverbose='false'\n\nprint_usage() {\n  printf \"Usage: ...\"\n}\n\nwhile getopts 'abf:v' flag; do\n  case \"${flag}\" in\n    a) a_flag='true' ;;\n    b) b_flag='true' ;;\n    f) files=\"${OPTARG}\" ;;\n    v) verbose='true' ;;\n    *) print_usage\n       exit 1 ;;\n  esac\ndone\n```"},{"name":"bracket.md","content":"( ) – parentheses, brackets (UK, Ireland, Canada, West Indies, New Zealand, South Africa and Australia), parens, round brackets, first brackets, circle brackets or smooth brackets.\n{ } – braces[3] (UK and US), curly brackets, definite brackets, swirly brackets, curly braces, birdie brackets, French brackets, Scottish brackets, squirrelly brackets, gullwings, seagulls, squiggly brackets, twirly brackets, Tuborg brackets (DK), accolades (NL), pointy brackets, second brackets, fancy brackets, M Brace, moustache brackets, squiggly parentheses.\n[ ] – brackets (US), square brackets, closed brackets, hard brackets, third brackets, crotchets.[4]\n⟨ ⟩ – angle brackets, less-than/greater-than signs (when the ASCII approximation of < > is used), pointy brackets, triangular brackets, diamond brackets, tuples, chevrons, guillemets, broken brackets, brokets.[5]\n⸤ ⸥ ｢ ｣ – corner brackets\n⟦ ⟧ – double square brackets, white square brackets, Scott brackets\n〔 〕 – tortoise shell brackets"},{"name":"coc.md","content":"\" --- coc-explorer entry --- {{{\n\"augroup MyCocExplorer\n\"  autocmd!\n\"  autocmd VimEnter * sil! au! F\n\"  \" set window status line\n\"  autocmd FileType coc-explorer setl statusline=File-Explorer\n\"  \"quit explorer whein it's the last\n\"  autocmd BufEnter * if (winnr(\"$\") == 1 && &filetype == 'coc-explorer') | q | endif\n\"  \" Make sure nothing opened in coc-explorer buffer\n\"  autocmd BufEnter * if bufname('#') =~# \"\\[coc-explorer\\]-.\" && winnr('$') > 1 | b# | endif\n\"  \" open if directory specified or if buffer empty\n\"  autocmd VimEnter * let d = expand('%:p')\n\"    \\ | if argc() == 0\n\"      \\ | exe 'CocCommand explorer --quit-on-open --position floating --floating-width=10000 --floating-height=10000 --sources buffer+,file+'\n\"    \\ | elseif isdirectory(d) || (bufname()=='')\n\"      \\ | silent! bd\n\"      \\ | exe 'CocCommand explorer --quit-on-open --position floating --floating-width=10000 --floating-height=10000 --sources buffer+,file+ ' . d\n\"      \\ | exe 'cd ' . d\n\"    \\ | else\n\"      \\ | cd %:p:h\n\"    \\ | endif\n\"  \" cd after open\n\"  autocmd User CocExplorerOpenPost let dir = getcwd() | call CocActionAsync(\"runCommand\", \"explorer.doAction\", \"closest\", {\"name\": \"cd\", \"args\": [dir]})\n\"augroup END\n\" }}}\n\n\" set shell=zsh\\ -i\n\n\" let g:loaded_gzip = 1\n\" let g:loaded_tar = 1\n\" let g:loaded_tarPlugin = 1\n\" let g:loaded_zip = 1\n\" let g:loaded_zipPlugin = 1\n\" let g:loaded_rrhelper = 1\n\" let g:loaded_2html_plugin = 1\n\" let g:loaded_vimball = 1\n\" let g:loaded_vimballPlugin = 1\n\" let g:loaded_getscript = 1\n\" let g:loaded_getscriptPlugin = 1\n\nset -g status-right '[#[fg=colour124] #H %Y-%m-%d %H:%M #[default]]'\n\n\" --- tmux entry --- {{{\nif $TMUX != \"\"\n  augroup TMUXWINR\n    autocmd!\n    autocmd VimEnter * call system(\"tmux rename-window \" . \"'[vim] \" . fnamemodify(getcwd(), ':t') . \"'\")\n    autocmd VimLeave * call system(\"tmux rename-window zsh\")\n  augroup END\nendif\n\"}}}\n\n\" --- netrw gx --- {{{\nif !exists(\"g:netrw_nogx\")\n if maparg('gx','n') == \"\"\n  if !hasmapto('<Plug>NetrwBrowseX')\n   nmap <unique> gx <Plug>NetrwBrowseX\n  endif\n  nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists(\"g:netrw_gx\")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())<cr>\n endif\n if maparg('gx','v') == \"\"\n  if !hasmapto('<Plug>NetrwBrowseXVis')\n   vmap <unique> gx <Plug>NetrwBrowseXVis\n  endif\n  vno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>\n endif\nendif\nif exists(\"g:netrw_usetab\") && g:netrw_usetab\n if maparg('<c-tab>','n') == \"\"\n  nmap <unique> <c-tab> <Plug>NetrwShrink\n endif\n nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>\nendif\n\"}}}\n\nmdlink<!--{{{-->\n\" function! s:SomeFunc(foo)\n\" \" let a:requestString=\"r! echo -n '['`curl -s 'https://nav.kis9a.com' | grep -o '<title>[^<]*' | tail -c+8`']'; echo -n '(https://nav.kis9a.com)'\"\n\" \" r! echo -n '['`curl -s `a:foo` | grep -o \"<title>[^<]*\" | tail -c+8`']'; echo -n `(a:foo)`\n\" r! echo -n '['`curl -s 'https://nav.kis9a.com' | grep -o '<title>[^<]*' | tail -c+8`']'; echo -n '(https://nav.kis9a.com)'\n\" \" r! a:requestString\n\" \" echo a:foo\n\" endfunction\n\n<!--}}}-->\n\n**OUTPUTS**\n\nnotes: [kis9a/notes](https://github.com/kis9a/notes)  \nzenn: [kis9a/zenn](https://github.com/kis9a/zenn) < [zenn.dev/kis9a](https://zenn./kis9a) >  \ntwitter: < [twitter.com/kis9a](https://twitter.com/kis9a) >  \nnavigation: [kis9a/navigation](https://github.com/kis9a/navigation) < [nav.kis9a.com](https://nav.kis9a.com) >\n\n```\nSoftware Engineer Beginner. Kaito.M*kis9a, 2001/8(19). 📚 Typescript, Go, and Vim.\n```\n\n\"tabnine.disable_filetypes\": [\n\"javascript\",\n\"javascriptreact\",\n\"typescript\",\n\"typescriptreact\"\n],\n\n\" nnoremap <c-t> [s1z=<c-o>\"\nnnoremap cy ce<C-r>0<ESC>:let @/=@1<CR>:noh<CR>\n\n```vim\n  \" try\n  \"   let a_save = @a\n  \"   silent! normal! gv\"ay\n  \"   return @a\n  \" finally\n  \"   let @a = a_save\n  \"   echom @a\n  \" endtry\n\n    execute \"normal! `<v`>y\"\n\n\ncommand! P :call PPngUp()<CR>\n\nfunction! PPngUp()\n  execute \"!echo @@ | !curl -s -T - https://ppng.io/kis9a\"\nendfunction\n\n\n```"},{"name":"commit-message.md","content":"### commonly\n\nfeat: A new feature\nfix: A bug fix\ndocs: Documentation only changes\nreadme: readme only changes\nstyle: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)\nrefactor: A code change that neither fixes a bug nor adds a feature\nperf: A code change that improves performance\ntest: Adding missing or correcting existing tests\nchore: Changes to the build process or auxiliary tools and libraries such as documentation generation\n\n### project\n\n#### notes\n\ntasks: tasks/ changes\nmemos: memos/ changes\n\n\n[【必須】Gitコミットの書き方・作法【prefix/emoji】 ](https://suwaru.tokyo/%E3%80%90%E5%BF%85%E9%A0%88%E3%80%91git%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%E3%83%BB%E4%BD%9C%E6%B3%95%E3%80%90prefix-emoji%E3%80%91/)\n\nfix\tバグ修正\nクリティカルなバグ修正なら hotfix\nadd\nfeat\t新規機能・新規ファイル追加\nfeat は feature の略\nupdate\tバグではない機能修正\nchange\t仕様変更による機能修正\nclean\nrefactor\nimprove\t整理 (リファクタリング等)\ndisable\t無効化 (コメントアウト等)\nremove\ndelete\tファイル削除、コードの一部を取り除く\nrename\tファイル名の変更\nmove\tファイル移動\nupgrade\tバージョンアップ\nrevert\t修正取り消し\ndocs\tドキュメントのみ修正\nstyle\t空白、セミコロン、行、コーディングフォーマッテ��などの修正\nperf\t性能向上する修正\nperf は perfomance の略\ntest\tテスト追加や間違っていたテストの修正\nchore\tビルドツールやライブラリで自動生成されたものをコミットするとき\n\n\n# ==== Format ====\n# prefix(scope): :emoji: Commit body...\n#\n# backlog task key\n\n# ==== prefix ====\n# fix: バグやタイポなどの修正\n# feat: 新しい機能の追加\n# refactor: リファクタリング\n# style: スタイリングに関わる変更(css/sass)\n# chore: 細務(ファイル整備、移動、削除、名前変更など)\n# test: テストファイルに密�する変更や修正\n# docs: ドキュメントの加筆や修正\n# breaking: 破壊的変更\n# build: ビルド周りの設定(主にgulpやwebpack周り)\n# ci: CIに関わる設定\n# pref: パフォーマンスの改善\n# revert: 削除や変更の取り消し\n# other: その他\n\n# ==== scope ====\n# eslint | eslint の設定を変更\n# stylelint | stylelint の設定を変更\n# config | config.json を変更\n# readme | README.md を変更\n# gulp | gulp の設定を変更\n# webpack | webpack の設定を変更\n# html | htmlファイル変更\n# php | phpファイル変更\n# js | jsファイル変更\n\n# ==== Emojis ====\n# 🐛  :bug: バグの修正\n# 🎉  :tada: 新機能の実装\n# 👍  :+1: 機能改善\n# 💊  :pill: 機能修正\n# 💉  :syringe: linterの設定やエラー修正\n# 🔥  :fire: 不要ファイルの削除\n# 🚚  :truck: ファイル秆�動\n# 📛  :name: ファイル名変更\n# 📝  :memo: markdownファイルの変更\n# 📑  :bookmark: タグ切り(リリース)\n# 👮  :cop: 認訆�周り\n# ✅  :white_check_mark: テストの作成\n# 💚  :green_heart: テストの修正\n# 🆙  :up: モジュールのバージョンアップ\n# 👻  :ghost: 作業途中\n\n# ==== 7つのルール ====\n# 1. タイトルの後は1行空けて本文を書く\n# 2. タイトルを50字以内におさめる\n# 3. タイトルの文頭を大斆�字にする\n# 4. タイトルの文末にピリオドを付けない\n# 5. タイトルは命令形で記述する\n# 6. 本文は1行あたり72字以内におさめる\n# 7. 本文ではどのようにではなく何をとなぜを説明する\n#\n# 詳細は https://postd.cc/how-to-write-a-git-commit-message/"},{"name":"curl.md","content":"- [curl コマンド 使い方メモ - Qiita](https://qiita.com/yasuhiroki/items/a569d3371a66e365316f)\n- [よく使う curl コマンドのオプション - Qiita](https://qiita.com/ryuichi1208/items/e4e1b27ff7d54a66dcd9)"},{"name":"curry.md","content":"引数の数可変バージョン\n\n[JavaScript:カリー化してくれる関数 - Qiita](https://qiita.com/ttatsf/items/cf21381a386c89247200)\n\n```js\nconst curry = (f) => {\n  //関数partの定義。\n  const part = (...xs) =>\n    xs.length < f.length ? (y) => part(...xs, y) : f(...xs);\n  // partを呼び、返す。\n  return part;\n};\n```"},{"name":"eslint.md","content":"- [TypeScript+React 用に ESLint を導入する - Qiita](https://qiita.com/Captain_Blue/items/5d6969643148174e70b3)\n\n- [GitHub - google/eslint-config-google: ESLint shareable config for the Google JavaScript style guide](https://github.com/google/eslint-config-google){{{\n\n````\nmodule.exports = {\n  rules: {\n\n    'no-cond-assign': 'off', // eslint:recommended\n    'no-irregular-whitespace': 'error', // eslint:recommended\n    'no-unexpected-multiline': 'error', // eslint:recommended\n    'valid-jsdoc': ['error', {\n      requireParamDescription: false,\n      requireReturnDescription: false,\n      requireReturn: false,\n      prefer: {returns: 'return'},\n    }],\n\n\n\n    'curly': ['error', 'multi-line'],\n    'guard-for-in': 'error',\n    'no-caller': 'error',\n    'no-extend-native': 'error',\n    'no-extra-bind': 'error',\n    'no-invalid-this': 'error',\n    'no-multi-spaces': 'error',\n    'no-multi-str': 'error',\n    'no-new-wrappers': 'error',\n    'no-throw-literal': 'error', // eslint:recommended\n    'no-with': 'error',\n    'prefer-promise-reject-errors': 'error',\n\n\n    'no-unused-vars': ['error', {args: 'none'}], // eslint:recommended\n\n\n    'array-bracket-newline': 'off', // eslint:recommended\n    'array-bracket-spacing': ['error', 'never'],\n    'array-element-newline': 'off', // eslint:recommended\n    'block-spacing': ['error', 'never'],\n    'brace-style': 'error',\n    'camelcase': ['error', {properties: 'never'}],\n    'comma-dangle': ['error', 'always-multiline'],\n    'comma-spacing': 'error',\n    'comma-style': 'error',\n    'computed-property-spacing': 'error',\n    'eol-last': 'error',\n    'func-call-spacing': 'error',\n    'indent': [\n      'error', 2, {\n        'CallExpression': {\n          'arguments': 2,\n        },\n        'FunctionDeclaration': {\n          'body': 1,\n          'parameters': 2,\n        },\n        'FunctionExpression': {\n          'body': 1,\n          'parameters': 2,\n        },\n        'MemberExpression': 2,\n        'ObjectExpression': 1,\n        'SwitchCase': 1,\n        'ignoredNodes': [\n          'ConditionalExpression',\n        ],\n      },\n    ],\n    'key-spacing': 'error',\n    'keyword-spacing': 'error',\n    'linebreak-style': 'error',\n    'max-len': ['error', {\n      code: 80,\n      tabWidth: 2,\n      ignoreUrls: true,\n      ignorePattern: 'goog\\.(module|require)',\n    }],\n    'new-cap': 'error',\n    'no-array-constructor': 'error',\n    'no-mixed-spaces-and-tabs': 'error', // eslint:recommended\n    'no-multiple-empty-lines': ['error', {max: 2}],\n    'no-new-object': 'error',\n    'no-tabs': 'error',\n    'no-trailing-spaces': 'error',\n    'object-curly-spacing': 'error',\n    'one-var': ['error', {\n      var: 'never',\n      let: 'never',\n      const: 'never',\n    }],\n    'operator-linebreak': ['error', 'after'],\n    'padded-blocks': ['error', 'never'],\n    'quote-props': ['error', 'consistent'],\n    'quotes': ['error', 'single', {allowTemplateLiterals: true}],\n    'require-jsdoc': ['error', {\n      require: {\n        FunctionDeclaration: true,\n        MethodDefinition: true,\n        ClassDeclaration: true,\n      },\n    }],\n    'semi': 'error',\n    'semi-spacing': 'error',\n    'space-before-blocks': 'error',\n    'space-before-function-paren': ['error', {\n      asyncArrow: 'always',\n      anonymous: 'never',\n      named: 'never',\n    }],\n    'spaced-comment': ['error', 'always'],\n    'switch-colon-spacing': 'error',\n\n    'arrow-parens': ['error', 'always'],\n    'constructor-super': 'error', // eslint:recommended\n    'generator-star-spacing': ['error', 'after'],\n    'no-new-symbol': 'error', // eslint:recommended\n    'no-this-before-super': 'error', // eslint:recommended\n    'no-var': 'error',\n    'prefer-const': ['error', {destructuring: 'all'}],\n    'prefer-rest-params': 'error',\n    'prefer-spread': 'error',\n    'rest-spread-spacing': 'error',\n    'yield-star-spacing': ['error', 'after'],\n  },\n};\n```<!--}}}-->\n````\n\n```\n  \"scripts\": {\n    \"lint\": \"eslint 'src/**/*.{js,jsx,ts,tsx}'\",\n    \"lint:fix\": \"eslint --fix 'src/**/*.{js,jsx,ts,tsx}'\",\n    \"postinstall\": \"typesync\"\n  },\n```"},{"name":"figlet.md","content":"```\nfiglet -f kban\n\n'||      '||\n ||  ..   || ...   ....   .. ...\n || .'    ||'  || '' .||   ||  ||\n ||'|.    ||    | .|' ||   ||  ||\n.||. ||.  '|...'  '|..'|' .||. ||.\n\nfiglet -f flaktur kis9a\n\n      ..         .       .x+=:.\n< .z@8\"`        @88>    z`    ^%\n !@88E          %8P        .   <k   .xn!~%x.\n '888E   u       .       .@8Ned8\"  x888   888.         u\n  888E u@8NL   .@88u   .@^%8888\"  X8888   8888:     us888u.\n  888E`\"88*\"  ''888E` x88:  `)8b. 88888   X8888  .@88 \"8888\"\n  888E .dN.     888E  8888N=*8888 88888   88888> 9888  9888\n  888E~8888     888E   %8\"    R88 `8888  :88888X 9888  9888\n  888E '888&    888E    @8Wou 9%    `\"**~ 88888> 9888  9888\n  888E  9888.   888&  .888888P`    .xx.   88888  9888  9888\n'\"888*\" 4888\"   R888\" `   ^\"F     '8888>  8888~  \"888*\"\"888\"\n   \"\"    \"\"      \"\"                888\"  :88%     ^Y\"   ^Y'\n                                    ^\"===\"\"\n\n\nfiglet -f larry3d kis9a\n\n __                     __\n/\\ \\      __          /'_ `\\\n\\ \\ \\/'\\ /\\_\\    ____/\\ \\L\\ \\     __\n \\ \\ , < \\/\\ \\  /',__\\ \\___, \\  /'__`\\\n  \\ \\ \\\\`\\\\ \\ \\/\\__, `\\/__,/\\ \\/\\ \\L\\.\\_\n   \\ \\_\\ \\_\\ \\_\\/\\____/    \\ \\_\\ \\__/.\\_\\\n    \\/_/\\/_/\\/_/\\/___/      \\/_/\\/__/\\/_/\n\n\n\n _______  _______ _________ _______\n(  ____ \\(  ____ )\\__   __/(  ____ \\\n| (    \\/| (    )|   ) (   | (    \\/\n| (__    | (____)|   | |   | |\n|  __)   |  _____)   | |   | |\n| (      | (         | |   | |\n| (____/\\| )      ___) (___| (____/\\\n(_______/|/       \\_______/(_______/\n\n .|';                     ||`\n ||                       ||\n'||'  .|''|, `||''|,  .|''||  .|''|, '||''|\n ||   ||..||  ||  ||  ||  ||  ||..||  ||\n.||.  `|...  .||  ||. `|..||. `|...  .||.\n\n\n#   #  ###   #### #   #  ###  #   #\n## ## #   # #     #   # #   # # # #\n# # # #   # #      #### #   # # # #\n#   # #   # #         # #   # # # #\n#   #  ###   ####     #  ###   ###\n\n       __                 __\n.----.|  |--.--.--.-----.|  |--.--.--.\n|  __||     |  |  |     ||    <|  |  |\n|____||__|__|_____|__|__||__|__|___  |\n                               |_____|\n\n'########:::::'###::::'##::: ##:'##::: ##:'########:'########:::'#######::\n ##.... ##:::'## ##::: ###:: ##: ###:: ##: ##.....:: ##.... ##:'##.... ##:\n ##:::: ##::'##:. ##:: ####: ##: ####: ##: ##::::::: ##:::: ##:..::::: ##:\n ########::'##:::. ##: ## ## ##: ## ## ##: ######::: ########:::'#######::\n ##.... ##: #########: ##. ####: ##. ####: ##...:::: ##.. ##::::...... ##:\n ##:::: ##: ##.... ##: ##:. ###: ##:. ###: ##::::::: ##::. ##::'##:::: ##:\n ########:: ##:::: ##: ##::. ##: ##::. ##: ########: ##:::. ##:. #######::\n........:::..:::::..::..::::..::..::::..::........::..:::::..:::.......:::\n:::::::::'########::\n::::::::: ##.... ##:\n::::::::: ##:::: ##:\n'#######: ##:::: ##:\n........: ##:::: ##:\n::::::::: ##:::: ##:\n::::::::: ########::\n:::::::::........:::\n\n  ****             **\n */// *           /**\n/    /*           /**\n   ***  *****  ******\n  /// */////  **///**\n *   /*      /**  /**\n/ ****       //******\n ////         //////\n\n###     ###\n  # # # #\n ##  #  ###\n  # # #   #\n###     ###\n\n```"},{"name":"font.md","content":"fc-list | grep Hack\n\nhttps://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/VictorMono"},{"name":"fullstuck.md","content":"- [Zenn を支える技術とサービス構成](https://zenn.dev/catnose99/articles/zenn-dev-stack)"},{"name":"gamification.md","content":"Gamification\n\n\"Game\"\n\n1.\n\n- Unification and Clearly \"Needs\", \"Values\".\n- Setting most important numerical value.\n- Concreate index and parameters.\n- Create roadmap in the medium and long term.\n- Thinking of Stakeholder approval.\n\n2.\n\n- Turn PDCA circle and tasks data.\n- Task to more classified.\n\n3.\n\n- Knowledge chunk.\n- Varification this game by data.\n- Knowledge output.\n\n---\n\n### Output\n\n- Think Workflow and Management.\n- Gamification in the education."},{"name":"gist.md","content":"#!/bin/bash\n\nexec_mode='production' # 'production' or 'test'\nmock_file='./gists.json'\noutput_dir='./gists'\n\n# check exec_mode\n\nif [ $exec_mode != 'production' -a $exec_mode != 'test' ] ; then\necho 'ERROR: set correct status'\nexit 1\nfi\n\n## GET gists or read mock_file\n\nif [ $exec_mode = 'test' ] ; then\nif [ -f $mock_file ] ; then\ndeclare -a gists=$(cat $mock_file)\n  else\n    echo 'dont exit mock files, get gists and output mock_file'\n    $(curl -u $1 https://api.github.com/users/$2/gists -o $mock_file)\n    declare -a gists=$(cat $mock_file)\n  fi\nelse\n  declare -a gists=$(curl -u $1 https://api.github.com/users/$2/gists)\nfi\n\n## set output directory\n\n$(rm -rf $output_dir) && $(mkdir $output_dir)\n\n## set gist_files getting times. if exec_mode='test' will two times get\n\nif [ $exec_mode = 'test' ] ; then\ndeclare -i gists_length=2\nelse\ndeclare -i gists_length=$(echo $gists | jq length)\nfi\n\n## gists export local markdown files\n\nfor i in $( seq 0 $(($gists_length - 1))); do\ngist=$(echo $gists | jq .[$i])\ngist_files=$(echo $gist | jq \".files\" -r)\n  declare -i gist_files_length=$(echo $gist_files | jq length)\n  gist_file_names=$(echo $gist_files | jq keys)\n\nif [ $gist_files_length = 0 ] ; then\necho 'dont exit gist_files in this gist'\nexit;\nfi\n\nfor n in $( seq 0 $(($gist_files_length -1))); do\ngist_file=$(echo $gist_files | jq .\"$(echo $gist_file_names | jq .[$n])\" -r)\ngist_file_name=$(echo $gist_file | jq .\"filename\" -r)\n    gist_raw_url=$(echo $gist_file | jq .\"raw_url\" -r)\n    $(curl $gist_raw_url -o $output_dir/\"$gist_file_name\".md)\ndone\ndone"},{"name":"git-command-tips.md","content":"### delete all local branch\n\n```sh\ngit branch | grep -v '^*' | xargs git branch -D\n```\n\n### find commits yet to be applied to upstream\n\nhttps://git-scm.com/docs/git-cherry\n\n```sh\ngit cherry [-v] [<upstream> [<head> [<limit>]]]\n\n```\n\n### new base branch --onto <newbase>\n\n```sh\ngit rebase --onto\n```\n\nStarting point at which to create the new commits. If the --onto option is not specified, the starting point is <upstream>. May be any valid commit, and not just an existing branch name.\n\nAs a special case, you may use \"A...B\" as a shortcut for the merge base of A and B if there is exactly one merge base. You can leave out at most one of A and B, in which case it defaults to HEAD.\n\ngit rebase --root -i.\ngit log --pretty=fuller\ngit rebase --committer-date-is-author-date\n\ngit clone -b v1 --depth=1 https://github.com/nkjm/bootcamp-sushi-bot.git"},{"name":"gitio-custom.md","content":"Command:\n\ncurl https://git.io/ -i -F \"url=https://github.com/YOUR_GITHUB_URL\" -F \"code=YOUR_CUSTOM_NAME\"\nURLs that can be created is from:\n\nhttps://github.com/_\nhttps://_.github.com\nhttps://_.github.com/_\nhttps://_.github.io\nhttps://_.github.io/_\nhttps://_.githubusercontent.com/\\*\nIf you accidentally make a typo in the custom name, you can add .git (only the repository name) or ? at the end in your GitHub URL.\n\ncurl https://git.io/ -i -F \"url=https://github.com/YOUR_GITHUB_URL.git\" -F \"code=YOUR_CUSTOM_NAME\"\ncurl https://git.io/ -i -F \"url=https://github.com/YOUR_GITHUB_URL?\" -F \"code=YOUR_CUSTOM_NAME\"\nIf you want to revoke your custom name, you should contact GitHub Support Team. As of 23 September 2020, you can no longer request to revoke your outdated or incorrect git.io URL.\n\nShortcut to this Gist: git.io/customurl"},{"name":"go.md","content":"// Go module\n\ngo mod init で、初期化する\ngo build などのビルドコマンドで、依存モジュールを自動インストールする\ngo list -m all で、現在の依存モジュールを表示する\ngo get で、依存モジュールの追加やバージョンアップを行う\ngo mod tidy で、使われていない依存モジュールを削除する\n\n- [Go · GitHub](https://github.com/golang/)\n- [Packages - The Go Programming Language](https://golang.org/pkg/)"},{"name":"grep.md","content":"## grep\n\n+ requires that the pattern before it would have at least one match and can also have more.\n* on the other hand doesn't require a match. It could have 0, 1 or more than 1 matches.\nIf you also need to match empty values i.e. name=\"\" you can use *.\nBy the way the difference with + (no quoting with \\) from (\\+) is that the former is a form of extended regex while the latter is for a normal form of regular expression.\nAt least with grep/egrep the statement is true. – konsolebox Jul 8 '14 at 13:24\n\n-c\t指定したパターンにマッチした行数を出力\n-h\tファイル名を先頭に付ける\n-i\t大文字と小文字を区別しない\n-l\tファイル名のみを出力する\n-n\tマッチした行の行番号を出力する\n-s\tエラーを表示しない\n-v\tパターンにマッチした行以外を出力する\n-w\tパターンを単語としてマッチ\n-E\t正規表現を利用してマッチングを行う場合、-Eで明示しておくと良い\n\ngrep 検索したい文字列 検索したいテキストファイル\n\nコマンド | grep 検索したい文字列\n\ngrep -e 検索したい文字列1 -e 検索したい文字列2 検索したいテキストファイル\n\ngrep -i 検索したい文字列 検索したいテキストファイル\ngrep -E '正規表現' source.txt\n\n#利用できる正規表現\n\n.                    改行文字以外の任意の1文字\n*                    直前の1文字の0回以上の繰り返しに一致。直前の文字は正規表現でも構わない\n^                    行の先頭\n$                    行の末尾\n[ ]                  かっこ内の任意の1文字に一致。ハイフン（-）で範囲指定もできる\n[^ ]                 かっこ内の任意の1文字に不一致。ハイフン（-）で範囲指定もできる\n\\+                   直前の文字の1個以上の繰り返しに一致\n\\?                   直前の文字の0または1文字に一致\n\\{n\\}                直前の文字のn個の繰り返しに一致\n\\{n,\\}               直前の文字のn個以上の繰り返しに一致\n\\{,m\\}               直前の文字のm個以下の繰り返しに一致\n\\{n,m\\}              直前の文字のn個以上，m個以下の繰り返しに一致\npattern1\\|pattern2   pattern1またはpattern2のいずれかに一致\n\\(pattern\\)          patternをグループ化する。マッチした内容は\\numで参照できる\n\\                    正規表現に使われる記号を普通の文字として扱う\n\n例\ngrep '\\[0-9]' source.txt                           # '[0-9]'の文字列を検索\ngrep -E '(\\[0-9]){2}' source.txt                   # '[0-9]'が2回続く文字列を検索\ngrep '[Ll]inux' source.txt                         # 「Linux」または「linux」が含む行を検索する\ngrep '\\<[Ll]inux\\>' source.txt                     #  独立した「Linux」または「linux」が含む行を検索する、RedhatLinuxとかは含まない\ngrep '[1-9][0-9][0-9][A-Z][0-9]' source.txt        # 先頭に0を含まず123A7のようなパターンに一致\ngrep '^[0-9]' source.txt                           # 数字を含まない行を検索する\ngrep '.....' source.txt                            # 5文字以上の行だけ探す\ngrep '\\<W...s\\>$' source.txt                       # 先頭がW、末尾がsの文字列を探す\ngrep '.' source.txt                                # 空行を除外\ngrep '^\\<EX\\>\\{1,3\\}' source.txt                   # EXという文字が1～3回出る行\ngrep '\\<[A-Z]\\{\\6,15\\}\\>' source.txt               # 大文字アルテ�ァベットが6～15文字含む行\ngrep '\\<[A-Za-z]\\{\\6,15\\}\\>' source.txt            # 大文字小文字アルファベットが6～15文字含む行\ngrep '\\<[^0-9A-Za-z]\\{\\6,15\\}\\>' source.txt        # 大文字小文字アルファベットと数字以外の文字が6～15文字含む行\ngrep '[0-9]\\{3\\}-[0-9]\\{3\\}-[0-9]\\{4\\}' source.txt # 電詆��番号000-000-0000を含む行\n\n複数のパターンで検索する\ngrep -E 'パターン1|パターン2' source.txt\n\n大文字小文字区別せずに検紆�する\ngrep -i 'パターン' source.txt\n\nパターンを除外して表示\ngrep -v 'パターン' source.txt\n\n#たとえばps auxをした際\nps aux | grep java\n#とすると\"grep java\"自体もヒットしてしまうが\nps aux | grep java | grep -v grep\n#とすれば、grep自体は引っ掛からない\n\nパータンの出現行数を数える\ngrep -c 'パターン' source.txt\n\ngrep -w 'パターン' source.txt\n\n#たとえば\ngrep -w 'if' source.txt\n#とやると、elseifやendif、iftopなどifを含ゆ�ものは引っ掛からず、\" if \"と独立しているモノだけ引っ掛かる\n\nbanana を含むファイルを検索します。\nuser@host: ~$ grep -lr banana .\n\napple を含むファイルを検索します。\nuser@host: ~$ grep -lr apple .\n\nbanana を含まないファイルを検索します。\nuser@host: ~$ grep -vlr banana .\n\ngrep -lr <肯定条件> . | xargs grep -L <否定条件>\n\n## ripgrep\n\n```\no Recursively search the current directory for a regex pattern:\nrg pattern\n\no Search for pattern including all .gitignored and hidden files:\nrg -uu pattern\n\no Search for a pattern only in a certain filetype (e.g., html, css, etc.):\nrg -t filetype pattern\n\nSearch for a pattern only in a subset of directories:\nrg pattern set_of_subdirs\n\nSearch for a pattern in files matching a glob (e.g., README.*):\nrg pattern -g glob\n\no Only list matched files (useful when piping to other commands):\nrg --files-with-matches pattern\n\no Show lines that do not match the given pattern:\nrg --invert-match pattern\n\no Search a literal string pattern:\nrg -F string\n```\n\n---"},{"name":"groff.md","content":"\nfunction! Compile()\n\t\tlet extension = expand('%:e')\n\t\tif extension == \"ms\"\n\t\t\t\texecute \"! groff -ms % -T pdf > /tmp/op.pdf\"\n\t\telseif extension == \"tex\"\n\t\t\t\texecute \"! pandoc -f latex -t latex % -o /tmp/op.pdf\"\n\t\telseif extension == \"md\"\n\t\t\t\texecute \"! pandoc % -s -o /tmp/op.pdf\"\n\t\tendif\nendfunction\n\n\necho '.PS\nbox wid 3 \"My first ASCII box\"\narrow down 1 from last box.s\nbox wid 3 \"My first ASCII box\"\n.PE' | pic | groff -ms -Tascii\n\n\nman ls | groff -mandoc "},{"name":"iamcoo-markdown-preview-test.md","content":"# markdown-preview.vim\n\n![image](https://user-images.githubusercontent.com/5492542/47603494-28e90000-da1f-11e8-9079-30646e551e7a.gif =400x200)\n\n## todo\n\n- [x] markdown render: markdown-it\n- [x] markdown highlight\n- [x] markdown css\n- [x] math katex\n- [x] plantuml\n- [x] markdown-it option\n- [x] katex option\n- [x] plantuml option\n- [x] markdown style option\n- [x] highlight style option\n- [x] sync scroll\n- preview page title use the document's name\n- favicon.ico\n- vim support\n- binary support\n- task list\n- meoji\n- cross platform test (mac/linux/windows)\n- ...\n\n# UML example:\n\n@startuml\nBob -> Alice : hello\n@enduml\n\n\n``` mermaid\nclassDiagram\nA-->B\n```\n\n``` mermaid\nclassDiagram\nA-->B\n```\n\n### flowchart\n\n``` flowchart\nst=>start: Start|past:>http://www.google.com[blank]\ne=>end: End|future:>http://www.google.com\nop1=>operation: My Operation|past\nop2=>operation: Stuff|current\nsub1=>subroutine: My Subroutine|invalid\ncond=>condition: Yes\nor No?|approved:>http://www.google.com\nc2=>condition: Good idea|rejected\nio=>inputoutput: catch something...|future\n\nst->op1(right)->cond\ncond(yes, right)->c2\ncond(no)->sub1(left)->op1\nc2(yes)->io->e\nc2(no)->op2->e\n```\n\njavascript\n```javascript\nfunction test() {\n    return 0\n}\n\nconsole.log('hello world')\n\ntest()\n```\n\nbash\n```bash\n# comment\n\nexport path=$PATH;/bin\n```\n\n# Maxwell's Equations\n\n\nequation | description\n----------|------------\n$\\nabla \\cdot \\vec{\\mathbf{B}}  = 0$ | divergence of $\\vec{\\mathbf{B}}$ is zero\n$\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t}  = \\vec{\\mathbf{0}}$ |  curl of $\\vec{\\mathbf{E}}$ is proportional to the rate of change of $\\vec{\\mathbf{B}}$\n$\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} = \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} = 4 \\pi \\rho$ | _wha?_\n\n$\\sqrt{3x-1}+(1+x)^2$\n\n$$\\begin{array}{c}\n\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &\n= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0\n\n\\end{array}$$\n\nAnything between two $ characters will be treated as TeX math. The opening $ must\nhave a non-space character immediately to its right, while the closing $ must\nhave a non-space character immediately to its left, and must not be followed\nimmediately by a digit. Thus, $20,000 and $30,000 won’t parse as math. If for some\nreason you need to enclose text in literal $ characters, backslash-escape them and\nthey won’t be treated as math delimiters.\n\n### chart and mermaid\n\n```chart\n{\n  \"type\": \"pie\",\n  \"data\": {\n    \"labels\": [\n      \"Red\",\n      \"Blue\",\n      \"Yellow\"\n    ],\n    \"datasets\": [\n      {\n        \"data\": [\n          300,\n          50,\n          100\n        ],\n        \"backgroundColor\": [\n          \"#FF6384\",\n          \"#36A2EB\",\n          \"#FFCE56\"\n        ],\n        \"hoverBackgroundColor\": [\n          \"#FF6384\",\n          \"#36A2EB\",\n          \"#FFCE56\"\n        ]\n      }\n    ]\n  },\n  \"options\": {}\n}\n```\n\n### Mermaid example\n\n```mermaid\ngantt\n    dateFormat DD-MM-YYY\n    axisFormat %m/%y\n\n    title Example\n    section example section\n    activity :active, 01-02-2019, 03-08-2019\n```\n\n```mermaid\ngraph LR\nA[Christmas] -->|Get money| B(Go shopping)\n```\n\n```mermaid\ngraph TD\nA[Christmas] -->|Get money| B(Go shopping)\nB --> C{Let me think}\nC -->|One| D[Laptop]\nC -->|Two| E[iPhone]\nC -->|Three| F[Car]\n```\n\n```mermaid\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label\n```\n\n```mermaid\nsequenceDiagram\nloop every day\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\nend\n```\n\n``` mermaid\nstateDiagram\n[*] --> Still\nStill --> [*]\nStill --> Moving\nMoving --> Still\nMoving --> Crash\nCrash --> [*]\n```\n\n``` mermaid\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n```"},{"name":"init-mac.md","content":"Plug 'jalvesaq/Nvim-R', { 'for': 'r' }\nPlug 'gaalcaras/ncm-R', { 'for': 'r' }\nPlug 'vim-pandoc/vim-pandoc', { 'for': 'rmd' }\nPlug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'rmd'}\nPlug 'vim-pandoc/vim-rmarkdown', { 'for': 'rmd' e\n:CocInstall coc-r-lsp\n\n<https://www.youtube.com/watch?v=nm45WagtV3w&ab_channel=RohitFarmer>\nhttps://pandoc.org/installing.html\n\n\n- https://joongsup.rbind.io/post/2019/04/05/r-markdown-revisited/\n- https://qiita.com/nozma/items/bbd681490b2aaaf9ec93 powerpoint\n- https://qiita.com/tomotagwork/items/c92fb40a76f56ea16aa4 reporting\n\n\nrstudio vim https://xvideos.hatenablog.com/entry/r_vim_keybindings\n\nRMarkdown command :set filetype=rmarkdown.\nhttps://github.com/vim-pandoc/vim-rmarkdown/issues/11\n\nbrew install r\nwhich r\ndisable r\n\nbrew link r\n\n\nr stdio\n\n$ brew tap caskroom/cask\n$ brew cask install rstudio\n$ open /Applications/RStudio.app\n\ntinytex\nTinyTeX is installed to ~/Library/TinyTeX on macOS:\ncurl -sL \"https://yihui.org/tinytex/install-bin-unix.sh\" | sh\n\nrstudio\nenstall.packages(\"rmarkdown\", dep = TRUE)\n\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()  # install TinyTeX\ninstall.packages(\"rmarkdown\", repos = \"https://cran.revolutionanalytics.com\")\n\n\nERROR\n\nQuitting from lines 2-6 (r-sample.rmd) \nError in library(ggplot2) : there is no package called 'ggplot2'\nCalls: render ... withCallingHandlers -> withVisible -> eval -> eval -> library\n\nExecution halted\ninstall.packages(\"tidyverse\")\n```\n\n```\n\nsudo chown -R $(whoami) /usr/local"},{"name":"init-mongo.md","content":"brew tap mongodb/brew\nbrew install mongodb-community\nbrew services start mongodb-community"},{"name":"javascript-array-duplicate.md","content":"id duplicate ?\n\n```javascript\n  async updateIsPersonSearchRecent(value: boolean) {\n    this.isPersonLoading = true;\n    const personIds = this.contactSearchHistories\n      .filter(v => v.Type === 'person')\n      .map(v => v.Item && v.Item.Id) as number[];\n    const set = new Set();\n    if (value) {\n      const result: Array<ReferenceItem<ContactPersonItem>> = await referenceApi\n        .getReferences(`contact_person`, { Ids: personIds })\n        .then(v => v.Value);\n      this.selectedPerson = Array.from(\n        [...this.selectedPerson, ...result].filter(v => {\n          const duplicate = set.has(v.Id);\n          set.add(v.Id);\n          return !duplicate;\n        }),\n      );\n    } else {\n      this.selectedPerson = this.selectedPerson.filter(v => !personIds.some(v1 => v.Id === v1));\n    }\n    setTimeout(() => {\n      this.isPersonLoading = false;\n    }, 600);\n  }\n```\n\nis duplicate ?\n\n```javascript\nthis.isDuplicatedEmployeeDate = this.employeeItems.some((v, i, a) =>\n  a.some((v1, i1) => (v !== v1 ? v.dateData === v1.dateData : false))\n);\n```"},{"name":"jobs.md","content":"ctrl + z\n\njobs\n\nbg\n\nfg\n\nctrl"},{"name":"jq-example.md","content":"- [コマンドライン JSON プロセッサー jq の演算子と関数 エラーの向こうへ](https://tech.mktime.com/entry/127)\n- [jq コマンドで覚えておきたい使い方 17 個 | 俺的備忘録 〜なんかいろいろ〜](https://orebibou.com/ja/home/201605/20160510_001/)\n\nhttps://qiita.com/bouzuya/items/36e21c778539ce6bc486<!--{{{-->\n\n```sh\n// [{ \"title\": 'hello' \"id\": 1}, {\"title\": 'happy', \"id\": 2}]\n| jq -r 'map(.title)'\n\n[\n  'hello',\n  'happy'\n]\n\n```\n\n```sh\n// [{ \"title\": 'hello' \"id\": 1}, {\"title\": 'happy', \"id\": 2}]\n| jq -r 'map(.title)[]'\n\nhello,\nhappy\n\n```\n\n```sh\n// [{ \"title\": 'hello' \"id\": 1}, {\"title\": 'happy', \"id\": 2}]\n| jq -r '.[] | { \"title\" } | .title'\n\nhello\nhappy\n\n```\n\n<!--}}}-->\n\n<!-- array1 {{{-->\n\n```\n# 返送配列変数を定義\n\n$ declare -A MAP\n\n# 連想配列に値をセット\n\n$ MAP[\"key1\"]=1\n$ MAP[\"key2\"]=2\n$ MAP[\"key3\"]=\"hoge\"\n$ MAP[\"key4\"]=\n\n# JSON 変換\n\n$ for i in \"${!MAP[@]}\"; do\n\n# 奇数行にキーを、偶数行に値を出力し、jq コマンドに食わせる\n\necho \"$i\"\n  echo \"${MAP[$i]}\"\ndone | jq -c -n -R 'reduce inputs as $i ({}; . + { ($i): (input|(tonumber? // .)) })'\n```\n\n<!--}}}-->\n\n<!-- array2 -->{{{\n\n[]\n\n```json\n{\n  \"ObjectID\": [0, 1, 2, 3, 4],\n  \"Name\": [\"Apple\", \"Orange\", \"Grape\", \"Banana\", \"Jackfruit\"],\n  \"Color\": [\"Red\", \"Orange\", \"Green\", \"Yellow\", \"null\"],\n  \"Acidity\": [3.9, 3.5, 2.99, 6, 5.0]\n}\n```\n\n# jq --raw-output 'to_entries|map(.key),(map(.value)|transpose[])|@csv'\n\n```csv\nObjectID,Name,Color,Acidity\n0,Apple,Red,3.9\n1,Orange,Orange,3.5\n2,Grape,Green,2.99\n3,Banana,Yellow,6\n4,Jackfruit,null,5.0\n```\n\n<!--}}}-->\n\n<!-- array3 -->{{{\n\n```json\n[\n    {\n        \"name\": \"A\",\n        \"keys\": [\"k1\", \"k2\", \"k3\"]\n    },\n    {\n        \"name\": \"B\",\n        \"keys\": [\"k2\", \"k3\", \"k4\"]\n    }\n]\nI'd like to transform it to:\n\n{\n    \"k1\": [\"A\"],\n    \"k2\": [\"A\", \"B\"],\n    \"k3\": [\"A\", \"B\"],\n    \"k4\": [\"A\"],\n}\n```\n\n```\nmap({ name, key: .keys[] })\n    | group_by(.key)\n    | map({ key: .[0].key, value: map(.name) })\n    | from_entries\n```\n\nhttps://stackoverflow.com/questions/32357240/transposing-objects-in-jq\n\n<!--}}}-->\n\narray4<!--{{{-->\n\n```json\n{\n  \"123\": \"abc\",\n  \"231\": \"dbh\",\n  \"452\": \"xyz\"\n}\n```\n\nto_entries[] | [.key, .value]\n\n```\n[\n  \"123\",\n  \"abc\"\n],\n[\n  \"231\",\n  \"dbh\"\n],\n[\n  \"452\",\n  \"xyz\"\n]\n```\n\n```\n echo '{\n  \"123\" : \"abc\",\n  \"231\" : \"dbh\",\n  \"452\" : \"xyz\"\n}' | jq 'to_entries | map([.key, .value]|join(\",\"))'\n\n[\n  \"123,abc\",\n  \"231,dbh\",\n  \"452,xyz\"\n]\n\n```\n\n<!--}}}-->\n\n<!--{{{-->\n\n```\n{\n    \"name\": \"John\",\n    \"email\": \"john@company.com\"\n}\n{\n    \"name\": \"Brad\",\n    \"email\": \"brad@company.com\"\n}\n```\n\n$ jq -s '.' < tmp.json\n\n```\n\n[\n    {\n        \"name\": \"John\",\n        \"email\": \"john@company.com\"\n    },\n    {\n        \"name\": \"Brad\",\n        \"email\": \"brad@company.com\"\n    }\n]\n\n``\n\n```\n\n<!--}}}-->\n\n```\njq -n '{christmas: $ARGS.named}' \\\n  --arg one 'partridge in a \"pear\" tree' \\\n  --arg two 'turtle doves'\n\n{\n  \"christmas\": {\n    \"one\": \"partridge in a \\\"pear\\\" tree\",\n    \"two\": \"turtle doves\"\n  }\n}\n```\n\n```\njq -n '{first: {name: $one, count: $ARGS.positional[0]}, all: $ARGS}' \\\n  --arg one 'partridge in a \"pear\" tree' \\\n  --arg two 'turtle doves' \\\n  --args 1 2 3\n\n{\n  \"first\": {\n    \"name\": \"partridge in a \\\"pear\\\" tree\",\n    \"count\": \"1\"\n  },\n  \"all\": {\n    \"positional\": [\n      \"1\",\n      \"2\",\n      \"3\"\n    ],\n    \"named\": {\n      \"one\": \"partridge in a \\\"pear\\\" tree\",\n      \"two\": \"turtle doves\"\n    }\n  }\n}\n\n```"},{"name":"line.md","content":"### Starter\n\n- [GitHub - line/line-login-starter: LINE Login starter application](https://github.com/line/line-login-starter)\n- [GitHub - line/line-liff-v2-starter: This is a small web application that demonstrates the basic functionality of the LINE Front-end Framework (LIFF).](https://github.com/line/line-liff-v2-starter)\n\n### SDK\n\nnode\n\n- [GitHub - line/line-bot-sdk-nodejs: LINE Messaging API SDK for Node.js](https://github.com/line/line-bot-sdk-nodejs)\n- [GitHub - kenakamu/LINESimulator: LINESimulator](https://github.com/kenakamu/linesimulator)\n- [GitHub - Yoctol/bottender: ⚡️ A framework for building conversational user interfaces.](https://github.com/Yoctol/bottender)\n- [GitHub - kenakamu/line-richmenus-manager: LINE Rich Menus Manager](https://github.com/kenakamu/line-richmenus-manager)\n- [GitHub - boybundit/linebot: 🤖 SDK for the LINE Messaging API for Node.js](https://github.com/boybundit/linebot)\n- [GitHub - Wolke/botbuilder-linebot-connector](https://github.com/Wolke/botbuilder-linebot-connector)\n- [messaging-apis/packages/messaging-api-line at master · Yoctol/messaging-apis · GitHub](https://github.com/Yoctol/messaging-apis/tree/master/packages/messaging-api-line)\n- [messaging-apis/packages/messaging-api-line at master · Yoctol/messaging-apis · GitHub](https://github.com/Yoctol/messaging-apis/tree/master/packages/messaging-api-line)\n\n  sudo npm install -g line-simulator\n  sudo line-simulator\n  npm install -g liff\n\n  -\n\n### References\n\n- [中国で流行っているミニアプリが日本でも流行り始めているらしい - Qiita](https://qiita.com/yagi_eng/items/433fb34d635a454739d7)\n- [LINE Developers](https://developers.line.biz/ja/services/)\n- [Go と Nuxt で飲食店検索ができる LINE BOT と LINE ミニアプリ(LIFF)を作ってみた - Qiita](https://qiita.com/yagi_eng/items/8490f189d1be82c433e2)\n- [LIFF アプリを量産するためのテンプレートを作った【LINE Front-end Framework】 | DevelopersIO](https://dev.classmethod.jp/articles/introduction-of-liff-app-template/)\n- [LIFF アプリを量産するためのテンプレートを作った【LINE Front-end Framework】 | DevelopersIO](https://dev.classmethod.jp/articles/introduction-of-liff-app-template/)\n- [LINE Front-End Framework を利用して ToDo アプリを開発しよう | TechTrain | 加速するエンジニア。](https://techbowl.co.jp/techtrain/missions/26)\n- [LIFF アプリを作ってみよう（#1 基礎編） - Qiita](https://qiita.com/bow_arrow/items/ecba2bcad7ecbe0df745)\n- [LINE の LIFF 閆�発超入門 : LIFF SDK を使った Web アプリの開発 - Qiita](https://qiita.com/kenakamu/items/44cba247ab51b6c5ed51)\n- [GitHub - kenakamu/LINE-LIFF-Sample: LINE Developer Bootcamp - LIFF 開発入門 で使ったサンプル](https://github.com/kenakamu/LINE-LIFF-Sample)\n- [GitHub - yagi-eng/go-linebot-start: Go と LINE BOT ことはじめ](https://github.com/yagi-eng/go-linebot-start)"},{"name":"lua.md","content":"```\nbrew install lua\nbrew install luarocks\n\n```\n\n■ クロスプラットフォームであり、言語に依存せず機能を搭載できる\n■ オブジェクト指向プログラミングが可能であり、ガベージコレクションなどの機能を最初から有する\n■ スクリプト言語・組み込み言語としては最速の部類に入る\n\n■Lua は標準ライブラリが少なく、他のライブラリを用いると依存性が高まる\n■ オブジェクト指向の定義方法が言語に規定されていない\n■Lua は言語仕様・その構造的に、セキュリティ確保が難しい\n\n- [lua 5.3](http://milkpot.sakura.ne.jp/lua/lua53_manual_ja.html)\n- [LuaRocks に自作モジュールを登録する手順 - Qiita](https://qiita.com/toritori0318/items/fdd2c92caba2c003a51d)\n- [Search - LuaRocks](https://luarocks.org/search)\n\n- [GitHub - LewisJEllis/awesome-lua: A curated list of quality Lua packages and resources.](https://github.com/LewisJEllis/awesome-lua)\n\n- [LuaRocks で Lua のモジュールを管理する - Qiita](https://qiita.com/mah0x211/items/a07a2628f129285a9337)\n\n- [GitHub - bungle/awesome-resty: A List of Quality OpenResty Libraries, and Resources.](https://github.com/bungle/awesome-resty)\n\n# cli\n\n- [GitHub - kikito/ansicolors.lua: ANSI terminal color manipulation for Lua.](https://github.com/kikito/ansicolors.lua)\n- [GitHub - amireh/lua_cliargs: A command-line argument parsing module for Lua.](https://github.com/amireh/lua_cliargs)\n- [GitHub - hoelzro/lua-term: Terminal operations for Lua](https://github.com/hoelzro/lua-term)\n- [GitHub - mpeterv/argparse: Feature-rich command line parser for Lua](https://github.com/mpeterv/argparse)"},{"name":"mac-storage.md","content":"# 1000M以上のファイルを抽出\nsudo du -x -m -d 5 / | awk '$1 >= 1000{print}'\n\nメモリ解放\nsudo purge\nメモリ解放（そこそこ時間かかります）\ndu -sx /\n\nhttps://gist.github.com/bright23/6dc8fd43432a42e8edc7c95589098014\n\n#!/bin/sh\n\nsudo purge\ndu -sx /\nsudo rm -rf ~/Library/Developer/Xcode/DerivedData/*\nsudo rm -rf ~/Library/Developer/Xcode/Archives/*\nsudo rm -rf ~/Library/Caches/*\nsudo rm -rf ~/Library/Logs/iOS\\ Simulator\nsudo rm -rf ~/Library/Developer/Xcode/iOS\\ DeviceSupport/*\n\nduコマンドを使用してMacの5GB以上のフォルダを確認\nハードディスクの空き容量が極端に少なくなる場合の対処方法\n\nsudo du -g -x -d 5 / | awk '$1 >= 5{print}'"},{"name":"nestjs.md","content":"- [Next.js + NestJS + GraphQL で変化に追従するフロントエンドへ 〜 ショッピングクーポンの事例紹介 - Yahoo! JAPAN Tech Blog](https://techblog.yahoo.co.jp/entry/2020121530052952/)\n- [NestJS のススメ ～ Express を超えてゆけ～ - Qiita](https://qiita.com/elipmoc101/items/9b1e6b3efa62f3c2a166)\n- [TypeScript 製フレームワーク「Nest」のご紹介](https://www.slideshare.net/bitbankink/typescriptnest)\n\n```\n~ > npm install -g @nestjs/cli\n\n< ~/dev/nest-eshop !master > nest -h\nUsage: nest <command> [options]\n\nOptions:\n  -v, --version                                   Output the current version.\n  -h, --help                                      Output usage information.\n\nCommands:\n  new|n [options] [name]                          Generate Nest application.\n  build [options] [app]                           Build Nest application.\n  start [options] [app]                           Run Nest application.\n  info|i                                          Display Nest project details.\n  update|u [options]                              Update Nest dependencies.\n  add [options] <library>                         Adds support for an external library to your project.\n  generate|g [options] <schematic> [name] [path]  Generate a Nest element.\n    Available schematics:\n      ┌───────────────┬─────────────┬────────────────────┆��─────────────────────────┐\n      │ name          │ alias       │ description                                  │\n      │ application   │ application │ Generate a new application workspace         │\n      │ class         │ cl          │ Generate a new class                         │\n      │ configuration │ config      │ Generate a CLI configuration file            │\n      │ controller    │ co          │ Generate a controller declaration            │\n      │ decorator     │ d           │ Generate a custom decorator                  │\n      │ filter        │ f           │ Generate a filter declaration                │\n      │ gateway       │ ga          │ Generate a gateway declaration               │\n      │ guard         │ gu          │ Generate a guard declaration                 │\n      │ interceptor   │ in          │ Generate an interceptor declaration          │\n      │ interface     │ interface   │ Generate an interface                        │\n      │ middleware    │ mi          │ Generate a middleware declaration            │\n      │ module        │ mo          │ Generate a module declaration                │\n      │ pipe          │ pi          │ Generate a pipe declaration                  │\n      │ provider      │ pr          │ Generate a provider declaration              │\n      │ resolver      │ r           │ Generate a GraphQL resolver declaration      │\n      │ service       │ s           │ Generate a service declaration               │\n      │ library       │ lib         │ Generate a new library within a monorepo     │\n      │ sub-app       │ app         │ Generate a new application within a monorepo │\n      │ resource      │ res         │ Generate a new CRUD resource                 │\n      └───────────────┴─────────┆�───┴───────────────────────┆�──────────────────────┘\n```\n\nJWT Token\n\nInjection"},{"name":"netcat.md","content":"## Netcat Syntax #\n\n\n### The most basic syntax of the Netcat utility takes the following form:\n\n```\nnc [options] host port\n```\n\n\n### By default, Netcat will attempt to start a TCP connection to the specified host and port. If you would like to establish a UDP connection, use the -u option:\n\n```\nnc -u host port\n```\n\nlocalhost\n\n```\nnc -l port\n```"},{"name":"nginx.md","content":"brew install nginx\n\n```nginx\n\nworker_processes 1;\n\nevents {\n  worker_connections 1024;\n}\n\nhttp {\n  server {\n    listen 8080 reuseport;\n\n    location / {\n      default_type text/plain;\n      content_by_lua_block { ngx.say(\"Hello\") }\n    }\n  }\n}\n\n\n---\n\nworker_processes 1;\n\nevents {\n  worker_connections 1024;\n}\n\nhttp {\n  lua_package_path \"$prefix/lua/?.lua;;\";\n  server {\n    listen 8080 reuseport;\n\n    location / {\n      default_type text/plain;\n      content_by_lua_block {\n        local hello = require \"hello\"\n          hello.greet(\"hello\")\n      }\n    }\n  }\n}\n\n```\n\n```sh\n< ~/dev/Nginx > nginx -p $pwd/ -t\nnginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /usr/local/etc/nginx/nginx.conf test is successful\n\n\n< ~dev/Nginx > ps aux | grep nginx | grep -v /tmp/\n\nkis9a            76202   0.0  0.0  4277624    696 s004  S+   12:59PM   0:00.00 grep nginx\nkis9a            74857   0.0  0.0  4283720   1028   ??  S    12:57PM   0:00.00 nginx: worker process\nkis9a            74856   0.0  0.0  4283280    532   ??  Ss   12:57PM   0:00.00 nginx: master process nginx -p -t\nkis9a            73298   0.0  0.1  4316060  12060 s002  S+   12:54PM   0:02.78 nvim conf/nginx.conf\n```"},{"name":"oneliner.md","content":"# [git] 'tmp-' で始まるブランチを全て削除\ngit branch --list \"tmp-*\" | cut -b 3- | xargs -n 1 -I{} git branch -D {}\n\ncurl -s https://api.github.com/users/kis9a/repos | grep \\\"clone_url\\\" | awk '{print $2}' | sed -e 's/\"//g' -e 's/,//g' | xargs -n1 git clone\n\ncurl -s https://api.github.com/users/$target_user/gists | grep \\\"raw_url\\\" | awk '{print $2}' | sed -e 's/\"//g' -e 's/,//g' | xargs -n1 curl -O\n\nxargs -n 1 -P 4 curl -OL < urllist.txt\n\ncurl -Ls $URL | xmllint --html --xpath '//img/@src' - | xargs -n 1 | cut -d= -f2 | sed 's/^\\/\\//https:\\/\\//' | xargs -n 1 curl -L#O\n\nopen \"$(brew --prefix sfmono-square)/share/fonts\"\n\n# Convert all jpg files to png files:\nfd -e jpg -x convert {} {.}.png\n\n# Unpack all zip files (if no placeholder is given, the path is appended):\nfd -e zip -x unzip\n\n# Convert all flac files into opus files:\nfd -e flac -x ffmpeg -i {} -c:a libopus {.}.opus\n\n# Count the number of lines in Rust files (the command template can be terminated with ';'):\nfd -x wc -l \\; -e rs"},{"name":"permission.md","content":"HTMLファイル , 画像ファイル →　６４４ rw-r--r--\nCGI実行ファイル →　７５５ rwxr-xr\nCGIが格納されているディレクトリ → ７５５ rwxr-xr-x\nCGI　JavaScript のライブラリ →　６４４ rw-r--r--\nログなどの保存用ファイル →　６６６ rw-rw-rw-\n\n```\n$ ls -l\ndrwxr-xr-x. 20 root  root  2077 Jul  5 14:34 bin/cat\n\n```\n\n表示\t意味\nd\tファイルタイプ\nrwxr-xr-x.\tファイルモード\n20\tリンク数\nroot\tファイルの所有者（オーナー）\nroot\tファイルが所属する所有グループ\n2077\tサイズ\nJul　5　 4:34\tタイムスタンプ\nbin/cat\tファイル名もしくはディレクトリ名\n\n\n記号\tファイルタイプ\n-\t通常ファイル\nd\tディレクトリ\nl\tシンボリックリンク\n\n記号\t意味\nr\t読み取り(read)\nw\t書き込み(write)\nx\t実行(execute)\n\n\nユーザ種別\t読み取り\t書き込み\t実行　　\nオーナー　〆��　\t許可\t許可\t許可\nrootグループに所属するユーザ\t許可\t未許可\t許可\nその他のユーザ\t許可\t未許可\t許可\n\n記号\t意味\nr\t読み取り：ディレクトリに含まれるファイル一覧の取得\nw\t書き込み：ディレクトリの下にあるファイル・ディレクトリの作成・削除\nx\t実行：ディレクトリをカレントディレクトリにする\n\n\n```\nchmod u+w file.txt\n```\n記号\t意味\nu(user)\tオーナー\ng(group)\tグループ\no(other)\tその他のユーザー\na(all)\tugo全て\n\n記号\t意味\n+\t権限を追加する\n-\t権限を禁止する\n=\t指定した権限と等しくする\n\n\n意味　\t数字\n読み取り(r)\t4\n書き込み(w)\t2\n実行(x)"},{"name":"plantuml.md","content":"# plantuml\n\nhttps://plantuml.com/sequence-diagram>\n<https://zenn.dev/kitabatake/articles/ff586edd162789862d71>\n<https://qiita.com/ogomr/items/0b5c4de7f38fd1482a48>\n<https://qiita.com/sky0621/items/8b6e88f4327b42ade5d7>\n<https://qiita.com/munieru_jp/items/088dfc3e5e91b5ea17c3>\n\n@startuml\nBob -> Alice : hello\n@enduml\n\n---\n\n@startuml\n\nclass ユーザー\nclass 記事\nclass コメント\nclass マガジン\nclass タグ\nclass ジャンル\n\nclass 支扆��先 {\n\n- 銀行コード\n- 支店コード\n- 口座番号\n  }\n  note left of 支払先 : サービス上で得た報酬を振り込む先の情報\n\nclass 個人支払先 {\n\n- 姓\n- 名\n  }\n  class 法人支払先 {\n- 法人名\n  }\n\nnote top of カード情報 : サービス上で支払を行うための情報\nclass カード情報 {\n\n- カード番号\n- カード名義\n  }\n  ユーザー \"1\" -up- \"0..1\" カード情報\n\nユーザー \"1\" -up- \"0..1\" \"支払先\"\n\"個人攆�払先\" --|> \"支払先\"\n\"法人支払先\" --|> \"支払先\"\n\nユーザー \"1\" -- \"_\" 記事\n記事 \"1\" -- \"_\" コメント\nユーザー \"1\" -- \"\\*\" コメント\n\nジャンル \"1.._\" -- \"_\" 記事\n\nタグ \"_\" -- \"_\" 記事\n\nマガジン \"0..1\" -- \"\\*\" 記事\n\npackage リアクション {\nclass サポート { - サポートするユーザー - サポートされるユーザー - 金額\n}\nユーザー \"1\" --> \"_\" サポート\nサポート \"_\" --> \"1\" ユーザー\n\n    class フォロー {\n        - フォローするユーザー\n        - フォローされるユーザー\n    }\n\n    (ユーザー, ユーザー).. フォロー\n\n    class スキ\n    ユーザー \"1\" -- \"*\" スキ\n    スキ \"*\" -- \"1\" 記事\n\n}\n\nclass SNS アカウント\nユーザー \"1\"-up-\"\\*\" SNS アカウント\nclass Twitter アカウント\nclass Facebook アカウント\nTwitter アカウント --|> SNS アカウント\nFacebook アカウント --|> SNS アカウント\n\n@enduml\n\n```\n\nCross platform (macos/linux/windows)\nSynchronised scrolling\nFast asynchronous updates\nKatex for typesetting of math\nPlantuml\nMermaid\nChart.js\nsequence-diagrams\nflowchart\ndot\nToc\nEmoji\nTask lists\nLocal images\nFlexible configuration\n\n```\n\n@startuml\n\n' 可視性のアイコンを非表示にする\nskinparam classAttributeIconSize 0\n\n' モノクロにする\nskinparam monochrome true\n\n' 影をなくす\nskinparam shadowing false\n\n' 手描き風う�する\nskinparam handwritten true\n\nclass 車 { +車種 +ナンバープレート +走る() +止まる() +曲がる()\n}\nnote left: 車\n\nclass タイヤ {\n}\n\nclass ドライバー { +アクセルを踏む() +ブレーキを踏む() +ハンドルを切る()\n}\n\nclass 運転免許証 {\n}\n\n車 \"1\" \\*-- \"4\" タイヤ\n車 -- ドライバー\nドライバー \"1\" o-- \"1\" 運転免許証\n\n@enduml"},{"name":"productivity.md","content":"# Productivity\n\n# Increase Developer Productivity<!--{{{-->\n\n## 1. BE LESS RUNDUM\n\n- start work time\n- take break time\n\n## 2. STOP WASTING TIME\n\n- Cut down social media, news, etc\n- Decrease your overall productivity\n- Hinders your focus\n- Turn off notification\n\n## 3. WELL PLANNED PROJECT STRUCTURE\n\n- Create a strict template/framework for your projects\n- All projects are different. you may need multiple templates\n- Chunk work into smaller task\n- Look to auto certain part of your workflow\n\n## 4. PROJECT MANAGEMENT\n\n- Don't keep everything in your head\n- Don't use client or management emails as your project management system\n\n## 5. CODE FASTER\n\n- Use snippets, keyboard shortcut\n- Find tool that help speed up certail tasks\n- Practice typing faster\n- Bug trackers, testing framework, browser extensions, etc\n\n## 6.DON'T WORK TOO MUCH & TAKE BREAKS\n\n- Overworking can cause burnout and loss of ambition & drive\n- Make sure take consistent breaks\n- Breaks can help clear your head and solve problems\n- I suggest 5-10mins every couple hours\n\n## 7. MINIMIZE DISTRACTION\n\n- set limmitations\n- task to co-workers or family menbers if you work from home\n- Create a peaceful and productive work environment\n\n## 8. ALWAYS BE LEARNING\n\n- Dont get complacent just because you are working\n- LEarn new thigs\n- Keep your passion for what you do\n- task advantage of certain times to learn\n<!--}}}-->\n\n1. Integration time management infomation\n2. ecosystem for essential abilities\n3. code library, automation, templates\n4. dicide hobit routines and trust this process\n5. force focus a project\n6. unification task management tools"},{"name":"profiles.md","content":"- [GitHub - keitakn/cv: My resume and work resume](https://github.com/keitakn/cv)\n- [kis9a (kis9a) · GitHub](https://github.com/kis9a)"},{"name":"pyenv-mac-devenv.md","content":"python 環境整備\n\n- pyenv uninstall\n  https://t.co/MFjtOUYXqj?amp=1\n\n- system pip wrappers after an upgrade\n  https://github.com/pypa/pip/issues/5599\n\n- use python3 default\n  ls -l /usr/local/bin/python*\n  ln -s -f /usr/local/bin/python3.7 /usr/local/bin/python\n\n  https://t.co/UaYslJqNih?amp=1\n\n- pip upgrade\n  python3 -m pip install --upgrade pip\n\n#ascii 使ってみる\n\ngithub.com/joelibaceta/vi…\ngithub.com/qeesung/image2…\n\nhttps://github.com/joelibaceta/video-to-ascii\nhttps://github.com/qeesung/image2ascii"},{"name":"python-pandas-table.md","content":"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_html.html\n\n```\n\nimport pandas as pd\n\nurl = 'http://blog.game-de.com/pm-sm/sm-allstats/'\ndfs = pd.read_html(url)\n\nprint(dfs)\n\n```"},{"name":"qiita-online.md","content":"```sh\ncurl -s https://qiita.com | pup '.css-qrra2n json{}' | jq -r -C '.[] | [.text, .href] | join(\" < \")' | cat -n | fzf -m --ansi --border --prompt=\"Qiita trends open > \" | xargs -I {} | grep -Eo '(http|https)://[^/\"]+\\/[^/\"]+\\/items/[^/\"]+' | xargs open\n\ncurl -s https://qiita.com | pup '.css-qrra2n json{}' | jq -r -C '.[] | [.text, .href] | join(\" < \")' | cat -n | fzf -m --ansi --border --prompt=\"Qiita trends open > \" | xargs -I {} | grep -Eo '(http|https)://[^/\"]+\\/[^/\"]+\\/items/[^/\"]+' | xargs curl -s | pup '.it-MdContent' | pup 'text{}' | sed '/^[[:space:]]*$/d' | less\n\ncurl -s https://qiita.com | pup '.css-qrra2n json{}' | jq -r -C '.[] | [.text, .href] | join(\" < \")' | cat -n | fzf -m --ansi --border --prompt=\"Qiita trends fetch > \" | xargs -I {} | grep -Eo '(http|https)://[^/\"]+\\/[^/\"]+\\/items/[^/\"]+' | xargs -I {} curl {} | pup 'body text{}'\n```"},{"name":"react-interview-question.md","content":"- [GitHub - learning-zone/react-interview-questions: 300+ React Interview Questions](https://github.com/learning-zone/react-interview-questions)"},{"name":"react-store.md","content":"[GitHub - jacques-blom/recoil-todo-list: A simple todo list app, built using Recoil.](https://github.com/jacques-blom/recoil-todo-list)\n\n[GitHub - serinuntius/todo-recoil](https://github.com/serinuntius/todo-recoil)\n\n[React の Hooks を使って Redux の Todo リストを Redux なしに書き換えたサンプル(TypeScript 使用) - Qiita](https://qiita.com/okumurakengo/items/aecd060ce64c99a646c8)\n\n[GitHub - okumurakengo/react-hooks-todos](https://github.com/okumurakengo/react-hooks-todos)\n\n[GitHub - galihlprakoso/react-redux-crud-tutorial: Simple React Redux CRUD tutorial.](https://github.com/galihlprakoso/react-redux-crud-tutorial)\n\n[GitHub - kis9a/react-store-demo: create simple todo app and with state management, each use redux, recoil, useContext](https://github.com/kis9a/react-store-demo)"},{"name":"react.md","content":"- React hooks を基礎から理解する\n- [たぶんこれが一番分かりやすいと思います React + Redux のフロー図解 - Qiita](https://qiita.com/mpyw/items/a816c6380219b1d5a3bf)\n- [React + Redux で Todo アプリを作ってみよう！『Add Todo 編』 - Qiita](https://qiita.com/micropig3402/items/8e44bc042eda13b98c95)\n- [今から始める React 入門 〜 Mobx 編 - Qiita](https://qiita.com/TsutomuNakamura/items/f10491060f0f1640afd9)\n- [blog.nunusuke/index.md at · sato-hirokazu/blog.nunusuke · GitHub](https://github.com/sato-hirokazu/blog.nunusuke/blob/22c891685686102d8e37b5d393181a250e93ec8a/src/contents/20201013-react-re-render-history/index.md)\n- 再レンダリング =[React の Context の更新による不要な再レンダリングを防ぐ 〜useContext を利用した時に発生する不要な再レンダリングを防ぐ方法に関して〜 - Qiita](https://qiita.com/soarflat/items/b154adc768bb2d71af21)\n- [any 型で諦めない React.EventCallback - Qiita](https://qiita.com/Takepepe/items/f1ba99a7ca7e66290f24)\n- [javascript - spread syntax vs slice method - Stack Overflow](https://stackoverflow.com/questions/51164161/spread-syntax-vs-slice-method)\n- [react で useState と useCallback を使う - Qiita](https://qiita.com/Climber22/items/2c6103b4e1ef7a1f2f7c)\n- [雰囲気で使わない React hooks の useCallback/useMemo - Qiita](https://qiita.com/seya/items/8291f53576097fc1c52a)\n\nメソッド名 呼び出されるタイミング\ncomponentWillMount() マウントが行われる直前\ncomponentDidMount() マウントが行われた直後\ncomponentWillReceiveProps() マウントされたコンポーネントが新しい props を受け取る前\nshouldComponentUpdate() 新しい props や state を受け取った時\ncomponentWillUpdate() 新しい props や state を受け取った時、レンダリングする直前\ncomponentDidUpdate() 更新が行われた直後\ncomponentWillUnmount() コンポーネントがアンマゆ��ントされ、破棄される直前\ncomponentDidCatch() エラー発生時\n\n[お前らの React は遅い - Qiita](https://qiita.com/teradonburi/items/5b8f79d26e1b319ac44f)"},{"name":"reacthooks.md","content":"React hooksを基礎から理解する (useState編)\nReact hooksを基礎から理解する (useEffect編)\nReact hooksを基礎から理解する (useContext編)\nReact hooksを基礎から理解する (useReducer編)\nReact hooksを基礎から理解する (useCallback編)\nReact hooksを基礎から理解する (useMemo編)\nReact hooksを基礎から理解する (useRef編)"},{"name":"regex.md","content":"正規表現チェックツールまとめ\nhttps://qiita.com/aqril_1132/items/c185c7ad84c129e5a2df"},{"name":"roadmap.md","content":"- [Roadmap · microsoft/TypeScript Wiki · GitHub](https://github.com/Microsoft/TypeScript/wiki/Roadmap)\n\n- [GitHub - Alikhll/golang-developer-roadmap: Roadmap to becoming a Go developer in 2020](https://github.com/Alikhll/golang-developer-roadmap)\n\n- [GitHub - kis9a/developer-roadmap: Roadmap to becoming a web developer in 2021](https://github.com/kis9a/developer-roadmap)"},{"name":"sed.md","content":"'#'で始まるコメント行を削除する。\nsed '/^#/d' source.txt\n\n空行を削除\nsed '/^$/d' source.txt\n\n先頭#の行と空行を削除\ncat source.txt | grep -v '^#' | sed '/^$/d'\n\nfile1.txt の 15 行目から 26 行目までを削除して file2.txt に保存する。\nsed '15,26d' file1.txt > file2.txt\n\n指定行の間でコメントアウト解除する(89 ～ 94 行目の先頭の#を外す)\nsed -i -e \"89,94s:^#::\" source.txt\n\nCR+LF を LF う��する\nsed -i -e 's/\\r//g' source.txt\n\nLF に CR を追加して CR+LF にする #よく間違うのが's/\\n/\\r\\n/'では置換出来ないので注意\nsed -i -e 's/$/\\r/' source.txt\n\n1 ～ 9 行目を削除する\nsed '1,9d' sample.txt\n\n1 番目に出現した'Linux'を'リナックス'に\nsed -e 's/Linux/リナックス/' source.txt\n\n3 番目に出現した'Linux'を'リナックス'に\nsed -e 's/Linux/リナックス/3' source.txt\n\nすべての'Linux'を'リナックス'に\nsed -e 's/Linux/リナックス/g' source.txt\n'Linux LINUX linux' をすべて'リナックス'へ\nsed -e 's/(Linux|LINUX|linux)/リナックス/g' source.txt\n\n#もしくは末尾に大文字小文字無視の i をつけてもいい\nsed -e 's/linux/リナックス/gi' source.txt\n\n特定文字を含む行に対して置換\n\n# /～/ を前置すると～を含む行という条件になる\n\n# /～/!で前置すると～を含まない行という条件になる\n\n# ,で始まる行に対しての例\n\n# ,で始まる行で大文字小文字を無視してすべての'linux'を'リナックゆ�'に\n\nsed -e '/^,/s/linux/リナックス/gi' source.txt\n\n# ,で始まらない行に対しての例\n\n# ,で始まらない行で大文字小文字を無視してすべての'linux'を'リナックス'に\n\nsed -e '/^,/!s/linux/リナックス/gi' source.txt\n正規表現でマッチして文字を追加\n#'>'を含む行で、A-Z の 6 ケタ[ ¥([A-Z]\\{6\\}¥) ]の文字を見つけたら、それに対う�て'\\_'を付与する\n\n# > CENTOS67 という文字を対象にした場合、> CENTOS_67 に置換される\n\nsed -e 's/^>¥([A-Z]\\{6\\}¥)/\\1\\_/g' source.txt\n置換した行だけ表示する(p)\nsed -n 's/linux/リナックス/p' source.txt\n複数の条件で置換する\nsed -e 's/AAA/BBB/g' -e 's/CCC/DDD/g' source.txt\n置換範囲を限定する\n#11 行目～ 25 行目まで AAA を BBB に置換する\nsed -e '11,25 s/AAA/BBB/g' source.txt\n開始と終了の文字列を指定して置換する\n\n# '#START'から'#END'く括られた範囲で置換をする\n\nsed -e '/#START/,/#END/ s/YYYYMM/201603/g' source.txt\n特定文字列が出たら読み飛ばす\n\n# '#SKIP'が出たら次の行(N;)は読み飛ばす、数行読み飛ばす場合は N;N;みたいにする\n\nsed '/#SKIP/{N; s/YYYY/2016/g}' source.txt\n文字列の変換\nsed -e \"s/oldtext/newtext/g\"\n\n文字列の削除\nsed -e \"s/text//\"\n\n行頭に text があった場合削除\nsed -e \"s/^text//\"\n\n行末に text があった場合削除\nsed -e \"s/text\\$//\"\n\nabc の後に文字列を追加\nsed -e \"s/abc/abcxyz/g\"\n\n行頭に文字列を追加\nsed -e \"s/^/text/\"\n\n行末に文字列を追加\nsed -e \"s/\\$/text/\"\n\n._は全ての文字列を abc に\nsed -e \"s/._/abc/\"\n\nタブをスペースに変換\nsed -e 's/<tab>/<space>/g'\n\n複数のスペースを 1 つのスペースに変換\nsed -e 's/<space><space>\\*/<space>/g'\n\nホワイトスペースを 1 つのスペースに変換\nsed -e 's/[<space><tab>][<space><tab>]\\*/<space>/g'\n\n行頭のホワイトスペースを削除\nsed -e 's/^[<space><tab>]\\*//'\n\n行末のホワイトスペースを削除\nsed -e 's/[<space><tab>]\\*$//'\n\ntext を含んだ行を削除\nsed -e \"/text/d\"\n\n空白行を削除\nsed -e '/^$/d'\n\n5 行目から 20 行目を変換\nsed -e \"5,20s/oldtext/newtext/g\"\n\n1 行目を削除\nsed -e '1d'\n\n1 行目を表示\nsed -n '1p'\n\n特定行数ごとに何かする\n\n# 45 行毎に改行を入れる\n\nsed 's/.\\{45\\}/&\\n/g' source.txt\n\nメタ文字(よく忘れるので)\n^ 先頭\n$ 後尾\n. 任意の 1 文字\n\n- 直前の文字の 0 回以上の繰り返し\n  \\+ 直前の文字の 1 回以上の繰り返し\n  \\? 直前の文字が 0 回または 1 回のみ出現\n  [] 文字クラス、[abc0-9] ならば数字と a, b, c のどれか 1 文字\n  \\| OR、[ab|ap] ならば ab または ap\n  \\{3\\} 直前の文字が 3 回だけ出現\n  \\{3,5\\} 直前の文字が 3〜5 回出現\n  \\b 単語匆�切り\n  アドレスコマンド(ほぼ s しか使わないかも)\n  d その行を出力しない\n  p その行を出力する、-n をつけると変換前のものは出力しない\n  s 置換\n  y 一文字ずつ置換\n  q 終了\n  SED のオプション(大体はパイプを通すので上書きオプションとか忘れがち)\n\n# 条件式スクリプトを直接指定\n\n-e 'スクリプト'\n\n# 条件式スクリプトが記述されているファイルを指定\n\n-f 'スクリプトテ�ァイル名'\n\n# 表示を抑制（明示的にスクリプト中で p をすれば表示も可能）\n\n-n 'スクリプト'\n\n# 拡張正規表現を使ったスクリプトを記述\n\n-r '正規表現を使ったスクリプト'\n\n-i 入力ファイルの上書き\n\n# 上書き前のファイルに拡張子.bak をつけて保管することもできる\n\nsed -i.bak -e '/^#/d' config.txt\nSED の条件式\n行数 処理する行数を指定する\n行数,行数 指定した行数間の文字列ゆ�処理する。$を指定すると最後の行を表せる\n/文字列/     指定した文字列が現れる行を処理する。先頭に「^」を付けると指定した文字列から始まる行，末尾に「$」を付けると指定した文字列で終わる行う�対象になる。行数の範囲指定でも利用できる\n:ラベル b および t コマンド用のラベル #コメント コメント\n{..} 括弧（かっこ）内をブロックとして扱う\n= 現在の行番号を表礆�う�る\na 文字列 文字列を追加する。ただし改行をしたい場合はその前に\\を付ける\ni 文字列 文字列を挿入する。ただし改行をしたい場合はその前に\\を付ける\nq 処理を中断し sed を終了する\nr ファイル名 指定したファイルを読み出し，追加する\nb ラベル 指定したラベルに移動する\nt ラベル s///が成功していれば指定したラベルに移動する\nc 文字列 選択している行を文字列に置換う�る。ただし改行をしたい場合はその前に\\を付ける\nd パターン・スペースを削除する\nD パターン・スペース内の最初の改行までを削除する\nh パターン・スペースをホールド・スペースにコピーする\nH パターン・スペースをホールド・スペースに追加する\ng ホールド・スペースをパターン・スペースにコピーする\nG ホールド・スペースをパターン・スペースに追加する\nx ホテ�ルド・スペースとパターン・スペースを入れ替える\nn 次の行をパターン・スペースに読み込む\nN 次の行をパターン・スペースに追加する\np 現在のパターン・スペースを表示する\nP 現在のパターン・スペースの最初に現われる改行までを表示する\nw ファイル名 現在のパターン・スペースを指定したファイルに書き込む\ns/置換条件/置換文字/ 置換条件を置換文字に変換する。最後に g を付けた場合は置換条件に当てはまるすべての文字列が置換される\ny/変換対象の文字/変換文字/ 変換対象の文字を変換文字に変換する"},{"name":"shellgei.md","content":"parameter explanation\nman bash | grep \"^\\s*\\${.*}$\" | tr -d \" \"\n\n- [【シェル芸人への道】Bash の変数展開と真摯に向き合う - Qiita](https://qiita.com/t_nakayama0714/items/80b4c94de43643f4be51)"},{"name":"sqlite.md","content":"https://qiita.com/0829/items/ce92a752bf832a06bcf2\nhttps://github.com/vim-scripts/dbext.vim\nhttps://github.com/tpope/vim-dadbod\n\n\nSQLite version 3.32.3 2020-06-18 14:16:19\nEnter \".help\" for usage hints.\nsqlite> .help\n.auth ON|OFF             Show authorizer callbacks\n.backup ?DB? FILE        Backup DB (default \"main\") to FILE\n.bail on|off             Stop after hitting an error.  Default OFF\n.binary on|off           Turn binary output on or off.  Default OFF\n.cd DIRECTORY            Change the working directory to DIRECTORY\n.changes on|off          Show number of rows changed by SQL\n.check GLOB              Fail if output since .testcase does not match\n.clone NEWDB             Clone data into NEWDB from the existing database\n.databases               List names and files of attached databases\n.dbconfig ?op? ?val?     List or change sqlite3_db_config() options\n.dbinfo ?DB?             Show status information about the database\n.dump ?TABLE?            Render database content as SQL\n.echo on|off             Turn command echo on or off\n.eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\n.excel                   Display the output of next command in spreadsheet\n.exit ?CODE?             Exit this program with return-code CODE\n.expert                  EXPERIMENTAL. Suggest indexes for queries\n.explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto\n.filectrl CMD ...        Run various sqlite3_file_control() operations\n.fullschema ?--indent?   Show schema and the content of sqlite_stat tables\n.headers on|off          Turn display of headers on or off\n.help ?-all? ?PATTERN?   Show help text for PATTERN\n.import FILE TABLE       Import data from FILE into TABLE\n.imposter INDEX TABLE    Create imposter table TABLE on index INDEX\n.indexes ?TABLE?         Show names of indexes\n.limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT\n.lint OPTIONS            Report potential schema issues.\n.log FILE|off            Turn logging on or off.  FILE can be stderr/stdout\n.mode MODE ?TABLE?       Set output mode\n.nullvalue STRING        Use STRING in place of NULL values\n.once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE\n.open ?OPTIONS? ?FILE?   Close existing database and reopen FILE\n.output ?FILE?           Send output to FILE or stdout if FILE is omitted\n.parameter CMD ...       Manage SQL parameter bindings\n.print STRING...         Print literal STRING\n.progress N              Invoke progress handler after every N opcodes\n.prompt MAIN CONTINUE    Replace the standard prompts\n.quit                    Exit this program\n.read FILE               Read input from FILE\n.recover                 Recover as much data as possible from corrupt db.\n.restore ?DB? FILE       Restore content of DB (default \"main\") from FILE\n.save FILE               Write in-memory database into FILE\n.scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off\n.schema ?PATTERN?        Show the CREATE statements matching PATTERN\n.selftest ?OPTIONS?      Run tests defined in the SELFTEST table\n.separator COL ?ROW?     Change the column and row separators\n.session ?NAME? CMD ...  Create or control sessions\n.sha3sum ...             Compute a SHA3 hash of database content\n.shell CMD ARGS...       Run CMD ARGS... in a system shell\n.show                    Show the current values for various settings\n.stats ?on|off?          Show stats or turn stats on or off\n.system CMD ARGS...      Run CMD ARGS... in a system shell\n.tables ?TABLE?          List names of tables matching LIKE pattern TABLE\n.testcase NAME           Begin redirecting output to 'testcase-out.txt'\n.testctrl CMD ...        Run various sqlite3_test_control() operations\n.timeout MS              Try opening locked tables for MS milliseconds\n.timer on|off            Turn SQL timer on or off\n.trace ?OPTIONS?         Output each SQL statement as it is run\n.vfsinfo ?AUX?           Information about the top-level VFS\n.vfslist                 List all available VFSes\n.vfsname ?AUX?           Print the name of the VFS stack\n.width NUM1 NUM2 ...     Set column widths for \"column\" mode"},{"name":"terminal-mail.md","content":"I want to loaded phones.\nPdlease tell me about your grandchildrens.\nI am thanks you.\nDear. apple\n\ngot up at precisely 8 AM.\nII am into the hungry because I don't eat breakfast"},{"name":"ttyrec.md","content":"ttyrec\nttygif\nttycast\nttyplay\n\n\nnroff -man ttyplay.1 | less\n\n\nターミナル操作のアニメーション化をユースケース毎にまとめてみた\nhttps://dev.classmethod.jp/articles/terminal-animation-creation-summarize-by-case/\n\nttyrec と ttygif でターミナル操作を gif 画像にする \nttygif -in file -out outputfile.gif\nttygif -in file -out outputfile.gif -s 2\n\nターミナル操作をリアルタイム配信する\n操作を録画しておくのではなく、リアルタイムに配信することもできます。\n一番簡単な方法は、ターミナルの記録と配信を同時に行ってくれるラッパを使うことです\n\n$ ttyreccast <録画ファイル>\n\n$ ttyplay <録画ファイル> | PORT=<ポート> ttycast -s <横>x<縦> # http://0.0.0.0:<ポート> で内容を確認できる"},{"name":"twitter.md","content":"### Mute<!--{{{-->\n\n\" https://twitter.com/settings/muted_keywords\n\nActivityTweet\ngeneric_activity_highlights\ngeneric_activity_momentsbreaking\nRankedOrganicTweet\nsuggest_activity\nsuggest_activity_feed\nsuggest_activity_highlights\nsuggest_activity_tweet\nsuggest_grouped_tweet_hashtag\nsuggest_pyle_tweet\nsuggest_ranked_organic_tweet\nsuggest_ranked_timeline_tweet\nsuggest_recap\nsuggest_recycled_tweet\nsuggest_recycled_tweet_inline\nsuggest_sc_tweet\nsuggest_timeline_tweet\nsuggest_who_to_follow\nsuggestactivitytweet\nsuggestpyletweet\nsuggestrecycledtweet_inline\n\n```js\nconst delayMs = 500; // change this if you feel like its running too fast\n\nconst keywords = `ActivityTweet\ngeneric_activity_highlights\ngeneric_activity_momentsbreaking\nRankedOrganicTweet\nsuggest_activity\nsuggest_activity_feed\nsuggest_activity_highlights\nsuggest_activity_tweet\nsuggest_grouped_tweet_hashtag\nsuggest_pyle_tweet\nsuggest_ranked_organic_tweet\nsuggest_ranked_timeline_tweet\nsuggest_recap\nsuggest_recycled_tweet\nsuggest_recycled_tweet_inline\nsuggest_sc_tweet\nsuggest_timeline_tweet\nsuggest_who_to_follow\nsuggestactivitytweet\nsuggestpyletweet\nsuggestrecycledtweet_inline`.split(/\\W+/);\n\nconst nativeInputValueSetter = Object.getOwnPropertyDescriptor(\n  window.HTMLInputElement.prototype,\n  \"value\"\n).set;\n\nconst addMutedKeyword = (keyword) => {\n  const input = document.querySelector(\"[name='keyword']\");\n  nativeInputValueSetter.call(input, keyword);\n  input.dispatchEvent(new Event(\"input\", { bubbles: true }));\n  document.querySelector(\"[data-testid='settingsDetailSave']\").click();\n};\n\nconst delay = () => {\n  return new Promise((res) => setTimeout(res, delayMs));\n};\n\nkeywords.reduce(async (prev, keyword) => {\n  await prev;\n  document.querySelector(\"a[href='/settings/add_muted_keyword']\").click();\n  await delay();\n  addMutedKeyword(keyword);\n  return delay();\n}, Promise.resolve());\n```\n\n<!--}}}-->"},{"name":"type-challenge.md","content":"### Conditional types<!--{{{-->\n\n```ts\nT extends U ? X : Y\n```\n\n### Generics\n\n```ts\ninterface Something<T> {\n  id: number;\n  flag: T;\n}\n```\n\nGenerics は型をプレースホルダのように扱う仕組みです。\n<T> のように型エイリアスを指定します。\n<!--}}}-->\n\n### lib.es5.d.ts<!--{{{-->\n\n```ts\ninterface ArrayLike<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n}\n\n/**\n * Make all properties in T optional\n */\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n/**\n * Make all properties in T required\n */\ntype Required<T> = {\n    [P in keyof T]-?: T[P];\n};\n\n/**\n * Make all properties in T readonly\n */\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * From T, pick a set of properties whose keys are in the union K\n */\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\n/**\n * Construct a type with a set of properties K of type T\n */\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n\n/**\n * Exclude from T those types that are assignable to U\n */\ntype Exclude<T, U> = T extends U ? never : T;\n\n/**\n * Extract from T those types that are assignable to U\n */\ntype Extract<T, U> = T extends U ? T : never;\n\n/**\n * Construct a type with the properties of T except for those in type K.\n */\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Exclude null and undefined from T\n */\ntype NonNullable<T> = T extends null | undefined ? never : T;\n\n/**\n * Obtain the parameters of a function type in a tuple\n */\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the parameters of a constructor function type in a tuple\n */\ntype ConstructorParameters<T extends new (...args: any) => any> = T extends new (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the return type of a function type\n */\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n\n/**\n * Obtain the return type of a constructor function type\n */\ntype InstanceType<T extends new (...args: any) => any> = T extends new (...args: any) => infer R ? R : any;\n\n/**\n * Convert string literal type to uppercase\n */\ntype Uppercase<S extends string> = intrinsic;\n\n/**\n * Convert string literal type to lowercase\n */\ntype Lowercase<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to uppercase\n */\ntype Capitalize<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to lowercase\n */\ntype Uncapitalize<S extends string> = intrinsic;\n\n\n```\n\n<!--}}}-->\n\n## [TypeScript2.8 Conditional Types 活用事例 - Qiita](https://qiita.com/Takepepe/items/a8637d30375374fe8c57){{{\n\n### Conditional Types\n\n```ts\ntype A1<T> = T extends (a1: infer I, ...rest: any[]) => any ? I : never;\ntype A2<T> = T extends (a1: any, a2: infer I, ...rest: any[]) => any\n  ? I\n  : never;\ntype MT<T> = (state: A1<T>) => A1<T>;\ntype MTPL<T> = (state: A1<T>, payload: A2<T>) => A1<T>;\ntype CR<T> = () => { type: string };\ntype CRPL<T> = (payload: A2<T>) => { type: string; payload: A2<T> };\ntype Mutation<T> = MT<T> | MTPL<T>;\ntype Creator<T> = T extends MT<T> ? CR<T> : CRPL<T>;\n```\n\n<!--}}}-->\n\n## [実務で使用することが多い TypeScript の型まとめ - Qiita](https://qiita.com/r_ueyama/items/bb693fb012fd3605cd00){{{\n\n### Extract Union 型から特定の型を抽出する際\n\n```ts\ntype Extract<T, U> = T extends U ? T : never;\n\ntype Color = \"red\" | \"blue\" | \"yellow\" | \"black\" | \"white\";\ntype ButtonColor = Extract<Color, \"red\" | \"yellow\">;\n// type ButtonColor = 'red' | 'yellow'\n```\n\n### Exclude Union Types から特定の型を取り除く際\n\n```ts\ntype Exclude<T, U> = T extends U ? never : T;\n\ntype Color = \"red\" | \"blue\" | \"yellow\" | \"black\" | \"white\";\ntype ButtonColor = Extract<Color, \"red\" | \"yellow\">;\n// type ButtonColor = 'blue' | 'black' | 'white';\n```\n\n### keyof\n\n```ts\ntype Person = {\n  name: string;\n  age: number;\n  location: string;\n};\n\ntype K1 = keyof Person;\n// \"name\" | \"age\" | \"location\"\n```\n\n### React ComponentProps\n\n### Mapped Types\n\n```ts\n{[P in K]: T}\nここで、P は識別子、K は文字列に代入可能でなければならない型です。\nそして T は K に対する値の型になります。\nMapped Typesを使用することでスマートに型定義が可能になります。\n```\n\n<!--}}}-->\n\n[公式ドキュメントを読んでもinferが理解できない人のためのinferの説明 - Qiita](https://qiita.com/ringtail003/items/733aff32ddad7d4fda90){{{\n```ts\ntype Code<T> = T extends { code: infer U } ? U : never;\n\n// <T> に Book,Ticket を付与した時に Code<T> が決定する\n// Code<Book> = T extends { code: infer number } ? number : never --> number\n// Code<Ticket> = T extends { code: infer string } ? string : never --> string\n\n// ---> Code<T> は number | string と同じ\n```\n<!--}}}-->"},{"name":"typescript-discriminate-union-types.md","content":"### Discriminated Union\n\n```typescript\ninterface Square {\n  kind: \"square\";\n  size: number;\n}\n\ninterface Rectangle {\n  kind: \"rectangle\";\n  width: number;\n  height: number;\n}\n\ntype Shape = Square | Rectangle;\n\nfunction area(s: Shape) {\n  if (s.kind === \"square\") {\n    // Now TypeScript *knows* that `s` must be a square ;)\n    // So you can use its members safely :)\n    return s.size * s.size;\n  } else {\n    // Wasn't a square? So TypeScript will figure out that it must be a Rectangle ;)\n    // So you can use its members safely :)\n    return s.width * s.height;\n  }\n}\n```\n\n### Exhaustive Checks\n\nif added new type case ?\n\n```typescript\nfunction area(s: Shape) {\n  if (s.kind === \"square\") {\n    return s.size * s.size;\n  } else if (s.kind === \"rectangle\") {\n    return s.width * s.height;\n  } else if (s.kind === \"circle\") {\n    return Math.PI * s.radius ** 2;\n  } else {\n    const _exhaustiveCheck: never = s;\n  }\n}\n```\n\nuse switch\n\n```typescript\nfunction area(s: Shape) {\n  switch (s.kind) {\n    case \"square\":\n      return s.size * s.size;\n    case \"rectangle\":\n      return s.width * s.height;\n    case \"circle\":\n      return Math.PI * s.radius * s.radius;\n    default:\n      const _exhaustiveCheck: never = s;\n  }\n}\n```\n\n### User definition Type Guard\n\ncant use typeof / instanceof\n\n```typescript\n/**\n * Just some interfaces\n */\ninterface Foo {\n  foo: number;\n  common: string;\n}\n\ninterface Bar {\n  bar: number;\n  common: string;\n}\n\n/**\n * User Defined Type Guard!\n */\nfunction isFoo(arg: any): arg is Foo {\n  return arg.foo !== undefined;\n}\n\n/**\n * Sample usage of the User Defined Type Guard\n */\nfunction doStuff(arg: Foo | Bar) {\n  if (isFoo(arg)) {\n    console.log(arg.foo); // OK\n    console.log(arg.bar); // Error!\n  } else {\n    console.log(arg.foo); // Error!\n    console.log(arg.bar); // OK\n  }\n}\n\ndoStuff({ foo: 123, common: \"123\" });\ndoStuff({ bar: 123, common: \"123\" });\n```"},{"name":"typescript-memorize.md","content":"[TypeScript: 計算結果をキャッシュする関数 - Qiita](https://qiita.com/suin/items/c19a0be9c64783c03ca0)\n[TypeScript/JavaScript でメモ化する - Qiita](https://qiita.com/piggydev/items/f240c48e4dd40224b0af)"},{"name":"typescript.md","content":"- [なぜ enum の利用が推奨されないのか？](https://qiita.com/saba_can00/items/696baa5337eb10c37342)\n\n1. 値に数値をマッピングした場合に意図しない数値でアクセスする記述ができてしまう\n2. 利用していない enum の値があっても Tree-shaking がうまく働かずバンドルされてしまう\n3. アンビエントコンテキストにおける const enum の使用はコンパイルエラーになることう��ある\n\n- [TypeScript 2.1 の keyof とか Mapped types](https://qiita.com/Quramy/items/e27a7756170d06bef22a)\n- [TypeScript tips zenn](https://zenn.dev/tak_iwamoto/articles/d367f989eb4a33)\n\n- [TypeScript の static アクセス修飾子](https://qiita.com/M-ISO/items/7120db767cd539f1c58a)\n- [TypeScript アクセス修飾子](https://qiita.com/a12345/items/384bff6aaeba288ad7f2)\n  <!-- acesss {{{-->\n  public クラス外からのアクセス可能。\n\nprivate クラス内でのみアクセス可胆�。\n\nprotected 継承クラス内でのみアクセス可能。\n\nstatic 静的なのでクラスで共有。\n\n```ts\n//スーパークラス定義\nclass Super {\n  constructor() {\n    this.public(); //true\n    this.private(); //true\n    this.protected(); //true\n    this.static(); //コンパイルエラー\n  }\n  public public(): boolean {\n    return true;\n  }\n  private private(): boolean {\n    return true;\n  }\n  protected protected(): boolean {\n    return true;\n  }\n  static static(): boolean {\n    return true;\n  }\n}\n\n//サブクラス定義\nclass Sub extends Super {\n  constructor() {\n    super();\n    this.public(); //true\n    this.private(); //コンパイルエラー\n    this.protected(); //true\n    this.static(); //コンパイルエラー\n  }\n}\n```\n\n//インスタンス\nlet test = new Sub();\ntest.public(); //true\ntest.private(); //コンパイルエラー\ntest.protected(); //コンパイルエラー\ntest.static(); //コンパイルエラー\n\n//クラス静的テ�ンバ\nSub.public(); //コンパイルエラー\nSub.private(); //コンパイルエラー\nSub.protected(); //コンパイルエラー\nSub.static(); //true\n\n<!--}}}-->\n\n- [TypeScript の union 型は or](https://qiita.com/uhyo/items/b1f806531895cb2e7d9a)\n- [TypeScript の Interface と Type の比較](https://qiita.com/tkrkt/items/d01b96363e58a7df830e)\n\n<!-- interface or type {{{-->\n\nInterface Type\n用途 クラスやオブジェクトの規格を定義 型や型の組み合わせに別名ゆ�付ける\n継承 可能 交差型で同じことができる\n同名要素の宣言 マージされる エラー\nClass う�の implement 可能 可能\n交差型、共用体型、タプル型 不可能 可能\nMapped Types 不可能 可能\n規定しないプロパティの扱い 他にもプロパティが存在しうるものとして扱う 存在しないものとして扱う\n\n<!--}}}-->\n\nenum or union<!--{{{-->\nunion\n\nconst Commands = {\nAdd: \"add new task\",\nComplete: \"select completed\",\nToggle: \"toggle show completed\",\nClean: \"remove completed\",\nQuit: \"quit interactive mode\",\n} as const\n\ntype typeCommands = typeof objCommands[keyof typeof objCommands]\n\n<!--}}}-->\n\nenum or union<!--{{{-->\n// Disposable Mixin\nclass Disposable {\nisDisposed: boolean;\ndispose() {\nthis.isDisposed = true;\n}\n\n}\n\n// Activatable Mixin\nclass Activatable {\nisActive: boolean;\nactivate() {\nthis.isActive = true;\n}\ndeactivate() {\nthis.isActive = false;\n}\n}\n\nclass SmartObject implements Disposable, Activatable {\nconstructor() {\nsetInterval(() => console.log(this.isActive + \" : \" + this.isDisposed), 500);\n}\n\n    interact() {\n        this.activate();\n    }\n\n    // Disposable\n    isDisposed: boolean = false;\n    dispose: () => void;\n    // Activatable\n    isActive: boolean = false;\n    activate: () => void;\n    deactivate: () => void;\n\n}\napplyMixins(SmartObject, [Disposable, Activatable]);\n\nlet smartObj = new SmartObject();\nsetTimeout(() => smartObj.interact(), 1000);\nfunction applyMixins(derivedCtor: any, baseCtors: any[]) {\nbaseCtors.forEach(baseCtor => {\nObject.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\nderivedCtor.prototype[name] = baseCtor.prototype[name];\n});\n});\n}\n\n<!--}}}-->\n\n[ ./type-challenge.md ]"},{"name":"ubuntu-setup.md","content":"sudo apt-get update -y\nsudo apt-get install build-essential curl git make file\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\"\nexport PATH='/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin':\"$PATH\"\n\nsudo apt-get install build-essential\necho 'eval $(/home/ubuntu/.linuxbrew/bin/brew shellenv)' >> /home/ubuntu/.profile\neval $(/home/ubuntu/.linuxbrew/bin/brew shellenv)\n\nbrew install gcc\n\nbrew install tmux\nbrew install tree\nbrew install neovim\nbrew install fzf\nbrew install fd\nbrew install riggrep\nbrew install reattach-to-user-namespace\nbrew install git\nbrew install wget\nbrew install make\nbrew install cask\nbrew install curl\n\nbrew install python\n\nbrew install nodebrew\nbrew install node\n\nbrew install go\nbrew install goenv\nbrew install groff\n\nsh -c 'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \\\n https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'\ngit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\nnpm install -g yarn\n\nnpm install -g neovim\nbrew install python\nsudo apt-get install python\nsudo apt update python\npython3 -m pip install pip\nbrew install ruby\nsudo apt update gem\n\nsudo passwd ubuntu\nsudo passwd\nsudo chsh\n\n```\napt で入るもの\nflameshot: スクショを撮って画像を加工できます\npeek: GIF を撮るのに便利です\nsimplescreenrecorder: GIF 以外はこっちを使っています\nffmpeg: 撮影した動画をさくっと圧縮するのに便利です\nsilversearcher-ag: grep はもう使っていられない…\nmlocate: locateが使えるようになります\nbat: いい感じにシンタックスハイライトしてcatしてくれます（apt版だとコマンドはbatcatです）\nfd-find: find のオプションも僕には難しすぎるので…（apt版だとコマンドはfdfindです）\nfzf: これ単体で使うことは少ないですが、色んなツールが依存していたりします\ntig: TUI で Git ログを見れます\ntree: ディレクトリ構造を見れます\nxsel: 標準出力をクリップボードにコピーできます（pbcopy のエイリアスを作るのがオススメです）\nhtop: これを表示させているだけで仕事している感が出るとか出ないとか\njq: JSON ファイルから何かを抽出したい時（ほとんどの人は滅多になさそう）に使えます\nbrew で入るもの\nripgrep: ag に飽きた方へ（あまり使ってないです）\nsd: sed の使い方イマイチわからん人でも使えると思います\nghq: git clone 時にどこに置くか考えなくて良くなるので便利です\nyq: jq の YAML 版です\n```"},{"name":"unicode.md","content":" U+F8FF\n✔ U+2714\n❤ U+2764\n😄 U+1F604\n🔥 U+1F525\n👍 U+1F44D"},{"name":"unix-commands.md","content":"[./sed.md]\n[./awk.md]\n[./grep.md]\n[./xargs.md]\n\nscript\nnc\nscp\nngrok\npv - progress\nlv\nnice\ntop\nbg\ncron\nat\nnohup\ntee\ntr\ncut\ngrep\ngunplot\nsort\nuniq\nwc\nuname\ntime\nlocale\nman\nchmod\nls\n\npmset\n\n---\n\nripgrep\nfd\npup\njq\nq\n[\ndiff\nhexeump\nxepr: perform arithmetic or boolean operations or evaluate regular expressions\nm4: simple macro processor\nyes: print a string a lot\ncal: nice calendar\nenv: run a command (useful in scripts)\nprintenv: print out environment variables (useful in debugging and scripts)\nlook: find English words (or lines in a file) beginning with a string\ncut, paste and join: data manipulation\nfmt: format text paragraphs\npr: format text into pages/columns\nfold: wrap lines of text\ncolumn: format text fields into aligned, fixed-width columns or tables\nexpand and unexpand: convert between tabs and spaces\nnl: add line numbers\nseq: print numbers\nbc: calculator\nfactor: factor integers\ngpg: encrypt and sign files\ntoe: table of terminfo entries\nnc: network debugging and data transfer\nsocat: socket relay and tcp port forwarder (similar to netcat)\nslurm: network traffic visualization\ndd: moving data between files or devices\nfile: identify type of a file\ntree: display directories and subdirectories as a nesting tree; like ls but recursive\nstat: file info\ntime: execute and time a command\ntimeout: execute a command for specified amount of time and stop the process when the specified amount of time completes.\nlockfile: create semaphore file that can only be removed by rm -f\nlogrotate: rotate, compress and mail logs.\nwatch: run a command repeatedly, showing results and/or highlighting changes\nwhen-changed: runs any command you specify whenever it sees file changed. See inotifywait and entr as well.\ntac: print files in reverse\ncomm: compare sorted files line by line\nstrings: extract text from binary files\ntr: character translation or manipulation\niconv or uconv: conversion for text encodings\nsplit and csplit: splitting files\nsponge: read all input before writing it, useful for reading from then writing to the same file, e.g., grep -v something some-file | sponge some-file\nunits: unit conversions and calculations; converts furlongs per fortnight to twips per blink (see also /usr/share/units/definitions.units)\napg: generates random passwords\nxz: high-ratio file compression\nldd: dynamic library info\nnm: symbols from object files\nab or wrk: benchmarking web servers\nstrace: system call debugging\nmtr: better traceroute for network debugging\ncssh: visual concurrent shell\nrsync: sync files and folders over SSH or in local file system\nwireshark and tshark: packet capture and network debugging\nngrep: grep for the network layer\nhost and dig: DNS lookups\nlsof: process file descriptor and socket info\ndstat: useful system stats\nglances: high level, multi-subsystem overview\niostat: Disk usage stats\nmpstat: CPU usage stats\nvmstat: Memory usage stats\nhtop: improved version of top\nlast: login history\nw: who's logged on\nid: user/group identity info\nsar: historic system stats\niftop or nethogs: network utilization by socket or process\nss: socket statistics\ndmesg: boot and system error messages\nsysctl: view and configure Linux kernel parameters at run time\nhdparm: SATA/ATA disk manipulation/performance\nlsblk: list block devices: a tree view of your disks and disk partitions\nlshw, lscpu, lspci, lsusb, dmidecode: hardware information, including CPU, BIOS, RAID, graphics, devices, etc.\nlsmod and modinfo: List and show details of kernel modules.\nfortune, ddate, and sl: um, well, it depends on whether you consider steam locomotives and Zippy quotations \"useful\"\n\nhttps://www.gnu.org/software/\nhttp://bsd.org/\n\ncurl -s \"https://www.gnu.org/software/\" | pup \".package-list text{}\" | sed '/^[[:space:]]\\*$/d' | xargs -P3 -I {} brew install {}\na2ps\nacct\nacm\nadns\nalive\nanubis\napl\narchimedes\naris\nartanis\naspell\nauctex\nautoconf\nautoconf-archive\nautogen\nautomake\navl\nballandpaddle\nbarcode\nbash\nbayonne\nbazaar\nbc\nbehistun\nbfd\nbinutils\nbison\nbool\nbpel2owfn\nc-graph\nccaudio\nccd2cue\nccide\nccrtp\nccscript\ncflow\ncgicc\nchess\ncim\nclasspath\nclasspathx\nclisp\ncombine\ncommoncpp\ncomplexity\nconfig\nconsensus\ncoreutils\ncpio\ncppi\ncssc\ncursynth\ndap\ndatamash\ndc\nddd\nddrescue\ndejagnu\ndenemo\ndia\ndico\ndiction\ndiffutils\ndionysus\ndirevent\ndjgpp\ndominion\ndr-geo\neasejs\ned\nedma\nelectric\nemacs\nemacs-muse\nemms\nenscript\neprints\nepsilon\nfdisk\nferret\nfindutils\nfisicalab\nfoliot\nfontopia\nfontutils\nfreedink\nfreefont\nfreeipmi\nfreetalk\nfribidi\ng-golf\ngama\ngarpd\ngawk\ngcal\ngcc\ngcide\ngcl\ngcompris\ngdb\ngdbm\ngengen\ngengetopt\ngettext\ngforth\nggradebook\nghostscript\ngift\ngimp\nglean\ngleem\nglib\nglobal\nglpk\nglue\ngmediaserver\ngmp\ngnash\ngnat\ngnats\ngnatsweb\ngneuralnetwork\ngnome\ngnowsys\ngnu-c-manual\ngnu-crypto\ngnu-pw-mgr\ngnuae\ngnuastro\ngnubatch\ngnubg\ngnubiff\ngnubik\ngnucap\ngnucash\ngnucobol\ngnucomm\ngnudos\ngnufm\ngnugo\ngnuit\ngnujdoc\ngnujump\ngnukart\ngnulib\ngnumach\ngnumed\ngnumeric\ngnump3d\ngnun\ngnunet\ngnupg\ngnupod\ngnuprologjava\ngnuradio\ngnurobots\ngnuschool\ngnushogi\ngnusound\ngnuspeech\ngnuspool\ngnustandards\ngnustep\ngnutls\ngnutrition\ngnuzilla\ngoptical\ngorm\ngpaint\ngperf\ngprolog\ngrabcomics\ngreg\ngrep\ngretl\ngroff\ngrub\ngsasl\ngsegrafix\ngsl\ngslip\ngsrc\ngss\ngtick\ngtk+\ngtypist\nguile\nguile-cv\nguile-dbi\nguile-gnome\nguile-ncurses\nguile-opengl\nguile-rpc\nguile-sdl\nguix\ngurgle\ngv\ngvpe\ngwl\ngxmessage\ngzip\nhalifax\nhealth\nhello\nhelp2man\nhp2xx\nhtml-info\nhttptunnel\nhurd\nhyperbole\nicecat\nidutils\nignuit\nindent\ninetutils\ninklingreader\nintlfonts\njacal\njami\njava-getopt\njel\njtw\njwhois\nkawa\nkopi\nleg\nless\nlibc\nlibcdio\nlibdbh\nliberty-eiffel\nlibextractor\nlibffcall\nlibgcrypt\nlibiconv\nlibidn\nlibjit\nlibmatheval\nlibmicrohttpd\nlibredwg\nlibrejs\nlibsigsegv\nlibtasn1\nlibtool\nlibunistring\nlibxmi\nlightning\nlilypond\nlims\nlinux-libre\nliquidwar6\nlispintro\nlrzsz\nlsh\nm4\nmacchanger\nmailman\nmailutils\nmake\nmarst\nmaverik\nmc\nmcron\nmcsim\nmdk\nmediagoblin\nmelting\nmempool\nmes\nmetaexchange\nmetahtml\nmetalogic-inference\nmifluz\nmig\nmiscfiles\nmit-scheme\nmoe\nmotti\nmpc\nmpfr\nmpria\nmtools\nnana\nnano\nnano-archimedes\nncurses\nnettle\nnetwork\nocrad\noctave\noleo\noo-browser\norgadoc\nosip\npanorama\nparallel\nparted\npascal\npatch\npaxutils\npcb\npdf\npem\npexec\nphantom_home\npies\npipo\nplotutils\npoke\npolyxmass\npowerguru\nproxyknife\npspp\npsychosynth\npth\npyconfigure\npythonwebkit\nqexo\nquickthreads\nr\nradius\nrcs\nreadline\nrecutils\nreftex\nremotecontrol\nrottlog\nrpge\nrush\nsather\nscm\nscreen\nsed\nserveez\nsharutils\nshepherd\nshishi\nshmm\nshtool\nsipwitch\nslib\nsmalltalk\nsocial\nsolfege\nspacechart\nspeex\nspell\nsqltutor\nsrc-highlite\nssw\nstalkerfs\nstow\nstump\nsuperopt\nswbis\nsysutils\ntaler\ntalkfilters\ntar\ntermcap\ntermutils\nteseq\nteximpatient\ntexinfo\ntexmacs\nthales\ntime\ntramp\ntrans-coord\ntrueprint\nunifont\nunits\nunrtf\nuserv\nuucp\nvc-dwim\nvcdimager\nvera\nvmgen\nwb\nwdiff\nwebsocket4j\nwebstump\nwget\nwhich\nwomb\nxaos\nxboard\nxlogmaster\nxmlat\nxnee\nxorriso\nzile"},{"name":"vim-replace.md","content":"[VIM で置換するときの s コマンドの使い方メモ - Qiita](https://qiita.com/yamazon/items/32ddc0f1cc8a8b63e339)\n\ns コマンドを使うと、vim 内で sed と同じことができる。\n\n:s/before/after/\n現在カーソルがある行の一番はじめに出てくる before を after に置換\n\n:s/before/after/g\n現在カーソルがある行の全ての before を after に置換\n\n:1s/before/after/\n現在開いているファイル 1 衆��目の一番はじめに出てくる before を after に置換\n\n:1s/before/after/g\n現在開いているファイル 1 行目に出てくる全ての before を after に置換\n\n:1,10s/before/after/g\n現在開いているファイル 1〜10 行目に出てくる全ての before を after に置換\n\n:%s/before/after/\n現在開いているファイルの各行の一番はじめに出てくる before を after に置換\n\n:%s/before/after/g\n現在開いているファイルに出てくる全てう� before を after に置換\n\n:%s/before/after/gc\nc をつけると、確認(yes/no)が出るようになります。\n\n:1,10s#before#after#gc\n\"/\"は別の文字でも可能。オススメは \"#\" (見易いので。また、/を\\でエスケープしなくてよくなる)。\n\n:%s#a\\|b#c#g\na または b を、c に置換する。\nBRE の (sed や grep と同じ) 正規表現になる。\n| は or 条件を表す。\n\\ で | をメタ文字にする(エスケープする)。\n\n:%s#\\va|b#c#g\na または b を、c に置換する\n\\v で ERE の (grep -e、egrep、awk、perl と同じ) 正規表現になる。\n\n:%s#\\v(a|b)#\\1c#g\na または b を、ac または bc に置換する\n\\1 は ( ) にマッチしたパターン文字列になる\noniguruma の$1 と同じ\n\n\" カレントディレクトリ以下のあらゆるファイルを対象にする\n:vim {pattern} \\*\\*\n\n\" app/views 以下のあらゆるファイルを対象にする（ディレクトリを再帰的に検索）\n:vim {pattern} app/views/\\*\\*\n\n\" app/views/users 内のファイルを対象にする\n:vim {pattern} app/views/users/\\_\n\n\" app/views 以下の erb ファイルを対象にする\n:vim {pattern} app/views/\\*\\*/\\_.erb\n\n\" app/views 以下で*で始まる erb ファイルを対象にする\n:vim {pattern} app/views/\\*\\*/*\\*.erb\n\ncdo %s/pre/after/ge | update"},{"name":"vim.md","content":"# vim\n\nI am in in back log applciation of my workflow experiment\n\napplication does .\n\n:for i in range(1,10) | put ='192.168.0.'.i | endfor\n\n\" 基本設定 <C-k> (ctrl-k) で詳細表示\nset autochdir\nset autoindent\nset clipboard+=unnamedplus\nset clipboard=unnamed\nset cursorline\nset encoding=UTF-8\nset expandtab\nset foldmethod=marker\nset hidden\nset ignorecase\nset laststatus=2\nset lazyredraw\nset modifiable\nset mouse=nv\nset nobackup\nset noerrorbells\nset noruler\nset noshowcmd\nset noshowmode\nset noswapfile\nset novisualbell\nset number relativenumber\nset redrawtime=10000\nset regexpengine=1\nset shiftwidth=2\nset shortmess+=c\nset showtabline=2\nset signcolumn=yes\nset smartcase\nset spelllang=en_us\nset splitright\nset switchbuf+=newtab\nset synmaxcol=200\nset tabpagemax=100\nset tabstop=2\nset termguicolors\nset timeoutlen=1000\nset ttimeoutlen=0\nset updatetime=300\nset viminfo=\"NONE\"\nset virtualedit=block\n\n\" 特別なキーマップ変数<Leader>, <MapLeader>を定義\nlet mapleader=\"\\<Space>\"\nlet maplocalleader=\"\\,\"\n\n\" デフォルトのプラグインを読み混まないようにするため\nlet g:loaded_netrwPlugin = 1\nlet g:loaded_man = 1\nlet g:loaded_gzip = 1\nlet g:loaded_tar = 1\nlet g:loaded_tarPlugin = 1\nlet g:loaded_zip = 1\nlet g:loaded_zipPlugin = 1\nlet g:loaded_rrhelper = 1\nlet g:loaded_2html_plugin = 1\nlet g:loaded_vimball = 1\nlet g:loaded_vimballPlugin = 1\nlet g:loaded_getscript = 1\nlet g:loaded_getscriptPlugin = 1\nlet g:loaded_matchparen = 1\nlet g:loaded_shada_plugin = 1\nlet g:loaded_tutor_mode_plugin = 1\n\n\" gx を押した時にカーソル下がリンクの場合ブラウザで開くコマンドの定義\nlet g:netrw_browsex_viewer=\"open\"\n\n\" プラグインの設定ファイルの読み込み\nsource ~/.config/nvim/plugins.vim\n\n\" ; と : の入れ替え\nnnoremap ; :\nnnoremap : ;\n\n\" x と s のヤンクをしない\nnnoremap x \"\\_x\nnnoremap s \"\\_s\n\n\" カーソルが中央に来るように (zz)\nnnoremap n nzz\nnnoremap N Nzz\n\n\" ファイル全体のインデントを整える\nnnoremap == gg=G''\n\n\" z-, z0, zz での移動\nnnoremap z0 zt\n\n\" gF key でカーソルしたのファイルパスをタブでファイルを開く\nnnoremap gF <C-w>gF\n\n\" ss で水平分割、sv で垂直分割、sn でタブ分割\nnnoremap ss :sp<CR>\nnnoremap sv :vsp<CR>\nnnoremap sn :tab split<CR>\n\n\" <C-s>でファイル保存\nnnoremap <silent> <C-s> :w!<cr>\n\" <C-c>でバッファを閉じる\nnnoremap <silent> <C-c> :bd<cr>\n\" <C-q>でファイルを閉じる\nnnoremap <silent> <C-q> :q!<cr>\n\n\" バッファ全部閉じる\nnnoremap <silent> <C-w><C-q> :%bd<CR>\n\n\"　置換\nnnoremap <Leader>r :%s///g<Left><Left>\n\" 置換 with 確認\nnnoremap <Leader>rc :%s///gc<Left><Left><Left>\n\n\" ファイルパスをコピーする\nnnoremap <silent> su :let @+ = expand(\"%:p\")<cr>\n\n\" $Variable を開く、編集する。\nnnoremap <silent> <Leader>b :tabnew<CR>:cd $MEMOS<CR>\nnnoremap <silent> <Leader>d :tabnew<CR>:e $MYVIMRC<CR>\nnnoremap <silent> <Leader>j :tabnew<CR>:e $TASK<CR>\n\n\" 設定ファイルを再読み込みする\nnnoremap <silent> <Leader>rl :so $MYVIMRC<CR>\nnnoremap <silent> <Leader>o :set spell!<CR>\nnnoremap <Leader>w :!trans -b\nnnoremap md :r! mdl\n\n```\n\"---------------------------------------------------------------------------|\n\" Commands \\ Modes | Normal | Insert | Command | Visual | Select | Operator |\n\" map  / noremap   |    @   |   -    |    -    |   @    |   @    |    @     |\n\" nmap / nnoremap  |    @   |   -    |    -    |   -    |   -    |    -     |\n\" vmap / vnoremap  |    -   |   -    |    -    |   @    |   @    |    -     |\n\" omap / onoremap  |    -   |   -    |    -    |   -    |   -    |    @     |\n\" xmap / xnoremap  |    -   |   -    |    -    |   @    |   -    |    -     |\n\" smap / snoremap  |    -   |   -    |    -    |   -    |   @    |    -     |\n\" map! / noremap!  |    -   |   @    |    @    |   -    |   -    |    -     |\n\" imap / inoremap  |    -   |   @    |    -    |   -    |   -    |    -     |\n\" cmap / cnoremap  |    -   |   -    |    @    |   -    |   -    |    -     |\n\"---------------------------------------------------------------------------\"\n\" :h mode-switching\n\n```\n\n\" --- statusline ---\n\" set statusline=[%n]\\ %F%m%r%h%w\\ >>\\ %l,%v:%p%%\\ >>\\ %{strftime('%m/%d/%H:%M')}\n\nneovim\n\n```vim\nif empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))\n  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim  --create-dirs\n    \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n  autocmd VimEnter * PlugInstall | source ~/.config/nvim/init.vim\nendif\n```\n\nvim\n\n```vim\nif empty(glob('~/.vim/autoload/plug.vim'))\n silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs\n   \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n autocmd VimEnter * PlugInstall | source $MYVIMRC\nendif\n\n```"},{"name":"vimium.md","content":"```\nunmap h\nunmap l\nunmap J\nunmap K\nunmap D\nunmap U\nunmap S\nunmap M\n\nmap <s-h> goBack\nmap <s-l> goForward\nmap <c-h> previousTab\nmap <c-l> nextTab\nmap <c-d> scrollPageDown\nmap <c-u> scrollPageUp\n\n\ng: https://www.google.com/search?q=%s Google\ngy: https://www.google.com/search?q=%s&tbs=qdr:y Google1year\ngm: https://www.google.com/search?q=%s&tbs=qdr:m Google1month\ngw: https://www.google.com/search?q=%s&tbs=qdr:w Google1week\ny: https://www.youtube.com/results?search_query=%s Youtube\nq: https://qiita.com/search?q=%s Qiita\nd: https://duckduckgo.com/?q=%s DuckDuckGo\ngc: https://github.com/search?q=%s&type=Code&utf8=✓ GithubCode\ngh: https://github.com/search?q=%s Github\ngo: https://golang.org/search?q=%s Golang\n```"},{"name":"vscode-settings.md","content":"{\n\"window.zoomLevel\": -2,\n\"window.nativeTabs\": false,\n\"window.titleBarStyle\": \"native\",\n\n    \"editor.tabSize\": 2,\n    \"editor.minimap.enabled\": false,\n    \"editor.fastScrollSensitivity\": 21,\n    \"editor.fontSize\": 21,\n    \"editor.lineHeight\": 30,\n    \"editor.suggestSelection\": \"first\",\n    \"editor.lineNumbers\": \"relative\",\n    \"editor.fontFamily\": \"Myrica M,Myrica N\",\n    \"editor.glyphMargin\": false,\n    \"editor.folding\": false,\n\n\n    \"workbench.editor.tabCloseButton\": \"off\",\n    \"workbench.editor.enablePreviewFromQuickOpen\": false,\n    \"workbench.editor.enablePreview\": false,\n    \"workbench.statusBar.visible\": false,\n    \"workbench.activityBar.visible\": true,\n    \"workbench.colorTheme\": \"Dainty – Nord (chroma 1, lightness 2)\",\n    \"workbench.iconTheme\": \"chalice-icon-theme\",\n\n\n    \"terminal.integrated.fontSize\": 21,\n    \"terminal.integrated.lineHeight\": 1,\n    \"terminal.integrated.shell.osx\": \"/bin/zsh\",\n\n\n    \"customizeUI.titleBar\": \"inline\",\n    \"customizeUI.font.regular\": \"HiraMaruProN-W4\",\n    \"customizeUI.font.monospace\": \"Cascadia Code\",\n    \"customizeUI.activityBar\": \"bottom\",\n\n\n    \"vim.useSystemClipboard\": true,\n    \"vim.visualstar\": true,\n    \"vim.hlsearch\": true,\n    \"vim.leader\": \"<space>\",\n    \"vim.easymotion\": true,\n    \"vim.easymotionKeys\": \"sdfghjklqwertyuiopcvbnm\",\n    \"vim.easymotionMarkerBackgroundColor\": \"nord\",\n    \"vim.easymotionMarkerForegroundColorOneChar\": \"crimson\",\n    \"vim.easymotionMarkerForegroundColorTwoChar\": \"crimson\",\n    \"vim.easymotionMarkerWidthPerChar\": 28,\n    \"vim.handleKeys\": {\n        \"<C-G>\": false\n    },\n    \"vim.normalModeKeyBindingsNonRecursive\": [\n        {\n            \"before\": [\"s\"],\n            \"after\": [\"leader\", \"leader\", \"s\"]\n        },\n        {\n            \"before\": [\"leader\",\"|\"],\n            \"after\": [\":\",\"v\",\"s\",\"CR\"]\n        },\n        {\n            \"before\": [\"leader\",\"-\"],\n            \"after\": [\":\",\"s\",\"p\",\"CR\"]\n        },\n    ],\n\n\n    \"markdown.preview.fontSize\": 21,\n    \"zenMode.silentNotifications\": false,\n    \"vsintellicode.modify.editor.suggestSelection\": \"automaticallyOverrodeDefaultValue\",\n    \"diffEditor.ignoreTrimWhitespace\": false,\n    \"extensions.showRecommendationsOnlyOnDemand\": true,\n    \"explorer.confirmDelete\": false,\n    \"extensions.ignoreRecommendations\": true,\n    \"breadcrumbs.enabled\": true,\n\n}"},{"name":"xargs.md","content":"find . -type d -name \"_log_\" | xargs -I {} sh -c \"echo {}; ls -la {} | tail -2\"\n\nls | xargs -r -L 2 bash -c 'echo \"Output:\" ${0}'\n\necho 'https://nav.kis9a.com/' | xargs -r -L 2 -I@ `echo @ echo curl -s @ | grep -o \"<title>[^<]*\" | tail -c+8 | xargs -I {} echo '[{}]()_'`\n\necho -n '['`curl -s 'https://nav.kis9a.com' | grep -o \"<title>[^<]*\" | tail -c+8`']'; echo -n '(https://nav.kis9a.com)'\n\ncurl -s https://qiita.com | pup '.css-qrra2n text{}, attr{href}' | cat -n | fzf -m | xargs -I {} | cut -d \" \" -f 1\n\nseq 100 | xargs -t -P3 -n4 ruby -e 'sleep 5'\n\nseq 0 0.1 1 | xargs -I@ bash -c 'owari big | lolcat -f --freq=@' | textimg -asl29 -d8\n\n-t 実行する前にそのコマンドラインを表示する\n-P3 3 プロセスを並列に実行\n-n4 各プロセスが引数 4 個をとるようにする（入力をスペースによって引数に区切る）\n\n-P を指定した場合は-n または-L も同時に指定すること。そうしないと 1 プロセスしか起動してこない。\n\n-n と-L の違い\n-n3 各プロセスが引数 3 個をとるようにする（入力をスペースによって引数に区切る）\n-L3 各プロセスが引数 3 個をとるようにする（入力を改行によって引数に区切る）\n\nget ASN for any targets via dig + whois tools…\n\ndig +short uber | xargs -I %% bash -c 'whois -h http://whois.cymru.com \" -f -p %%\"'\n\nseq 3 8 | nl | xargs -n2 bash -c 'seq $1 | sed \"s/^/printf \\$(tput setaf 0)\\$(tput setab $(($0 % 9)))$1\\$(tput sgr0)\\\"...\n\nbash gist2localmd.bash | jq | sed -e \"s/[//g' -e 's/]//g\" | tr -s \"\\n\"\n\ncurl -s \"https://api.github.com/users/milanboers/repos?per_page=100\" | jq -r \".[].git_url\" | xargs -L1 git clone"},{"name":"youtube-dl.md","content":"mpv --ytdl-raw-options=\"yes-playlist=\" https://www.youtube.com/watch?v=DamuE8TM3xo&list=PLGLfVvz_LVvQ9S8YSV0iDsuEU8v11yP9M\n\nThe following example downloads top 100 songs on YouTube Music\n\n```\n-i, --ignore-errors    Continue on download errors, for example to skip\n                       unavailable videos in a playlist\n-w, --no-overwrites    Do not overwrite files\n-c, --continue         Force resume of partially downloaded files.\n                       By default, youtube-dl will resume downloads if possible.\n\n```\n\nyoutube-dl -ciw --playlist-items 1-100 --extract-audio --audio-format mp3 --restrict-filenames https://www.youtube.com/playlist?list=PLDcnymzs18LWrKzHmzrGH1JzLBqrHi3xQ\n\nmpv --ytdl-raw-options=\"yes-playlist=\" https://www.youtube.com/watch?v=DamuE8TM3xo&list=PLGLfVvz_LVvQ9S8YSV0iDsuEU8v11yP9M\n\nmpv --shuffule\n\n\noutube-dl -ciw --extract-audio --audio-format mp3 --restrict-filenames \"https://www.youtube.com/playlist?list=PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj\"\n\n\n> cat a | xargs -I {} youtube-dl -ciw --restrict-filenames -f 22 {}"},{"name":"zsh-vcs-info.md","content":"- %b ブランチ情報 $hook_com[branch]\n- %i リビジョン番号またはリビジョンID $hook_com[revision]\n- %r リポジトリ名 $hook_com[base-name]\n- %R リポジトリのルートディレクトリのパス $hook_com[base]\n- %S リポジトリルートから見た今のディレクトリの相対パス $hook_com[subdir]\n- %a アクション名(mergeなど) actionformats のみで指定可 $hook_com[action]\n- %c stagedstr 文字列 $hook_com[staged]\n- %u unstagedstr 文字列 $hook_com[unstaged]\n- %m その他の情報 $hook_com[misc]"}]
